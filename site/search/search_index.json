{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"Learning%20Resource/","text":"\u5b78\u7fd2\u8cc7\u6e90 \u5c31\u662f\u5404\u5927\u516c\u53f8\u7684tech blog \u5176\u4e2dNetflix, Uber, Facebook, Line \u5f88\u503c\u5f97\u770b\uff0c\u5176\u4ed6\u7684\u5c31 \u310f\u310f Dropbox: https://blogs.dropbox.com/tech/ flickr: http://code.flickr.net/ GitHub: https://githubengineering.com/ Instagram: https://instagram-engineering.com/ Linkedin: https://engineering.linkedin.com/blog Microsoft Python: https://blogs.msdn.microsoft.com/pythonengineering/ PayPal: https://www.paypal-engineering.com/category/engineering/ reddit: https://redditblog.com/ Spotify: https://labs.spotify.com/ Twitter: https://about.twitter.com/ airbnb: https://medium.com/airbnb-engineering Netflix: https://medium.com/netflix-techblog Slack: https://slack.engineering/ Uber: https://eng.uber.com/ Facebook: https://code.fb.com/ Line: https://engineering.linecorp.com/en/blog/","title":"\u5b78\u7fd2\u8cc7\u6e90"},{"location":"Learning%20Resource/#_1","text":"","title":"\u5b78\u7fd2\u8cc7\u6e90"},{"location":"Learning%20Resource/#tech-blog","text":"\u5176\u4e2dNetflix, Uber, Facebook, Line \u5f88\u503c\u5f97\u770b\uff0c\u5176\u4ed6\u7684\u5c31 \u310f\u310f Dropbox: https://blogs.dropbox.com/tech/ flickr: http://code.flickr.net/ GitHub: https://githubengineering.com/ Instagram: https://instagram-engineering.com/ Linkedin: https://engineering.linkedin.com/blog Microsoft Python: https://blogs.msdn.microsoft.com/pythonengineering/ PayPal: https://www.paypal-engineering.com/category/engineering/ reddit: https://redditblog.com/ Spotify: https://labs.spotify.com/ Twitter: https://about.twitter.com/ airbnb: https://medium.com/airbnb-engineering Netflix: https://medium.com/netflix-techblog Slack: https://slack.engineering/ Uber: https://eng.uber.com/ Facebook: https://code.fb.com/ Line: https://engineering.linecorp.com/en/blog/","title":"\u5c31\u662f\u5404\u5927\u516c\u53f8\u7684tech blog"},{"location":"%E6%A5%B5%E6%85%A2%E9%96%8B%E7%99%BC/","text":"\u6975\u6162\u958b\u767c Visual Studio \u4e0d\u6703\u9019\u500b\u8ddf\u6211\u8aaa\u4f60\u60f3\u91cd\u69cb?\u7532\u8cfd ReSharper VS ReSharper IDEA VS2017 ReSharper Postfix Templates shortcut reset: Options Function Shortcut Keyboard Shortcuts Ctrl+K,Ctrl+S Refactor Tool Function Shortcut VS Refactor Alt+Enter ReShaper Refactor Menu Ctrl+Shift+R Edit Tool Function Shortcut VS Delete Cursor Right Shift End Del VS Delete Cursor Left Shift Home Del VS Navigate Backward Ctrl+- VS Navigate Forward Ctrl+Shift+- VS Search Solution Ctrl+; ReSharper Duplicate line Ctrl+D ReSharper Extend selection Ctrl+W ReSharper Shrink selection Ctrl+Shift+W ReSharper Go to everything Ctrl+N ReSharper Insert live template Ctrl+J ReSharper Surround with template Ctrl+Alt+J ReSharper Go to next member Alt+Down ReSharper Go to previous member Alt+Up Go to member\u8207move line\u76f8\u885d\uff0c\u4e0a\u4e0b\u6539\u6210\u7528\u6578\u5b57\u9375\u76e4 Test Tool Function Shortcut VS Run Tests In Context Ctrl+R,T ReSharper Run All Tests Ctrl+T,L ReSharper Run Current Session Ctrl+T,Y ReSharper Repeat Previous Test Ctrl+T,T ReSharper Unit Tests Ctrl+Alt+T ReSharper Unit Test Sessions Ctrl+Alt+R Visual Studio Code VS Code Options Function Shortcut Keyboard Shortcuts Ctrl+K,Ctrl+S Shortcuts Record Keys Alt+K Edit Function Shortcut Delete Line Ctrl+Shift+K Copy Line Down Ctrl+Alt+Down Copy Line Up Ctrl+Alt+Up Add Selection To Next Find Match Ctrl+D Extend selection Shift+Alt+Right Shrink selection Shift+Alt+Left Expand line selection Ctrl+L Fold All Ctrl+K,Ctrl+0 Fold Level Ctrl+K,Ctrl+No. Unfold Ctrl+Shift+] Unfold All Ctrl+K,Ctrl+J Unfold Recursively Ctrl+K,Ctrl+] Open Recent File Ctrl+R Replace Ctrl+H Add Selection To Next Find Match Ctrl+D Open Active File In New Window Ctrl+K,O Navigate Function Shortcut Go Forward Alt+Right Go Back Alt+Left Move Editor into Next Group Ctrl+Alt+Right Move Editor into Previous Group Ctrl+Alt+Left Focus into Side Bar Ctrl+0 Workbench Open Editor at index Alt+No. Next Editor Ctrl+PageDown Previous Editor Ctrl+PageUp Open Recent File Ctrl+R Go to File Ctrl+P Go to Symbol in File Ctrl+Shift+O Go to Symbol in Workspace Ctrl+T Explorer Ctrl+Shift+E Search Ctrl+Shift+S Misc Function Shortcut Markdown Preview Enhanced Ctrl+K,V","title":"\u6975\u6162\u958b\u767c"},{"location":"%E6%A5%B5%E6%85%A2%E9%96%8B%E7%99%BC/#_1","text":"","title":"\u6975\u6162\u958b\u767c"},{"location":"%E6%A5%B5%E6%85%A2%E9%96%8B%E7%99%BC/#visual-studio","text":"\u4e0d\u6703\u9019\u500b\u8ddf\u6211\u8aaa\u4f60\u60f3\u91cd\u69cb?\u7532\u8cfd ReSharper VS ReSharper IDEA VS2017","title":"Visual Studio"},{"location":"%E6%A5%B5%E6%85%A2%E9%96%8B%E7%99%BC/#resharper","text":"Postfix Templates shortcut reset:","title":"ReSharper"},{"location":"%E6%A5%B5%E6%85%A2%E9%96%8B%E7%99%BC/#options","text":"Function Shortcut Keyboard Shortcuts Ctrl+K,Ctrl+S","title":"Options"},{"location":"%E6%A5%B5%E6%85%A2%E9%96%8B%E7%99%BC/#refactor","text":"Tool Function Shortcut VS Refactor Alt+Enter ReShaper Refactor Menu Ctrl+Shift+R","title":"Refactor"},{"location":"%E6%A5%B5%E6%85%A2%E9%96%8B%E7%99%BC/#edit","text":"Tool Function Shortcut VS Delete Cursor Right Shift End Del VS Delete Cursor Left Shift Home Del VS Navigate Backward Ctrl+- VS Navigate Forward Ctrl+Shift+- VS Search Solution Ctrl+; ReSharper Duplicate line Ctrl+D ReSharper Extend selection Ctrl+W ReSharper Shrink selection Ctrl+Shift+W ReSharper Go to everything Ctrl+N ReSharper Insert live template Ctrl+J ReSharper Surround with template Ctrl+Alt+J ReSharper Go to next member Alt+Down ReSharper Go to previous member Alt+Up Go to member\u8207move line\u76f8\u885d\uff0c\u4e0a\u4e0b\u6539\u6210\u7528\u6578\u5b57\u9375\u76e4","title":"Edit"},{"location":"%E6%A5%B5%E6%85%A2%E9%96%8B%E7%99%BC/#test","text":"Tool Function Shortcut VS Run Tests In Context Ctrl+R,T ReSharper Run All Tests Ctrl+T,L ReSharper Run Current Session Ctrl+T,Y ReSharper Repeat Previous Test Ctrl+T,T ReSharper Unit Tests Ctrl+Alt+T ReSharper Unit Test Sessions Ctrl+Alt+R","title":"Test"},{"location":"%E6%A5%B5%E6%85%A2%E9%96%8B%E7%99%BC/#visual-studio-code","text":"VS Code","title":"Visual Studio Code"},{"location":"%E6%A5%B5%E6%85%A2%E9%96%8B%E7%99%BC/#options_1","text":"Function Shortcut Keyboard Shortcuts Ctrl+K,Ctrl+S Shortcuts Record Keys Alt+K","title":"Options"},{"location":"%E6%A5%B5%E6%85%A2%E9%96%8B%E7%99%BC/#edit_1","text":"Function Shortcut Delete Line Ctrl+Shift+K Copy Line Down Ctrl+Alt+Down Copy Line Up Ctrl+Alt+Up Add Selection To Next Find Match Ctrl+D Extend selection Shift+Alt+Right Shrink selection Shift+Alt+Left Expand line selection Ctrl+L Fold All Ctrl+K,Ctrl+0 Fold Level Ctrl+K,Ctrl+No. Unfold Ctrl+Shift+] Unfold All Ctrl+K,Ctrl+J Unfold Recursively Ctrl+K,Ctrl+] Open Recent File Ctrl+R Replace Ctrl+H Add Selection To Next Find Match Ctrl+D Open Active File In New Window Ctrl+K,O","title":"Edit"},{"location":"%E6%A5%B5%E6%85%A2%E9%96%8B%E7%99%BC/#navigate","text":"Function Shortcut Go Forward Alt+Right Go Back Alt+Left Move Editor into Next Group Ctrl+Alt+Right Move Editor into Previous Group Ctrl+Alt+Left Focus into Side Bar Ctrl+0 Workbench Open Editor at index Alt+No. Next Editor Ctrl+PageDown Previous Editor Ctrl+PageUp Open Recent File Ctrl+R Go to File Ctrl+P Go to Symbol in File Ctrl+Shift+O Go to Symbol in Workspace Ctrl+T Explorer Ctrl+Shift+E Search Ctrl+Shift+S","title":"Navigate"},{"location":"%E6%A5%B5%E6%85%A2%E9%96%8B%E7%99%BC/#misc","text":"Function Shortcut Markdown Preview Enhanced Ctrl+K,V","title":"Misc"},{"location":"API%20Design/readme/","text":"API Design Resources \u771f\u3002\u6dfa\u8ac7RESTful API by TritonHo RESTful Web API \u8a2d\u8a08\u6307\u5357 REST API: Sorting, Filtering, and Pagination","title":"API Design Resources"},{"location":"API%20Design/readme/#api-design-resources","text":"\u771f\u3002\u6dfa\u8ac7RESTful API by TritonHo RESTful Web API \u8a2d\u8a08\u6307\u5357 REST API: Sorting, Filtering, and Pagination","title":"API Design Resources"},{"location":"Agile/91%20TDD/","text":"91 TDD all:\u5169\u908a\u4e00\u6a23 0:love \u88c1\u5224\u544a\u8a34\u6211\u8ab0\u5f97\u5206\uff0c\u4e0d\u9700\u8981\u7d00\u9304\u7d50\u679c\uff0c\u56de\u7b54\u8ab0\u8d0f class: Tennis function: Score \u4e0d\u80fdhardcore\u67e5\u8868 \u7121\u9650Deuce\uff0c\u5206\u6578\u6c92\u4e0a\u9650(\u6240\u4ee5\u4e0d\u80fd\u8a08\u5206\u6578) \u91cd\u69cb\u6280\u5de7 Repeat test Duplicate line \u522a\u9664\u6e38\u6a19\u4e4b\u5f8c Tennis \u7b2c\u4e00\u500btest case\u53ef\u4ee5\u7528\u4f86\u8a02API Tennis \u91cd\u69cb\u5f71\u7247 C# Java PHP Accounting \u7b2c\u4e00\u7d44 \u7df4\u7fd2\u91cd\u69cb\u7528branch \u53c3\u8003\u7528\u7684 commit histor \u793a\u7bc4\u5f71\u7247 TDD C# Java PHP","title":"91 TDD"},{"location":"Agile/91%20TDD/#91-tdd","text":"all:\u5169\u908a\u4e00\u6a23 0:love \u88c1\u5224\u544a\u8a34\u6211\u8ab0\u5f97\u5206\uff0c\u4e0d\u9700\u8981\u7d00\u9304\u7d50\u679c\uff0c\u56de\u7b54\u8ab0\u8d0f class: Tennis function: Score \u4e0d\u80fdhardcore\u67e5\u8868 \u7121\u9650Deuce\uff0c\u5206\u6578\u6c92\u4e0a\u9650(\u6240\u4ee5\u4e0d\u80fd\u8a08\u5206\u6578)","title":"91 TDD"},{"location":"Agile/91%20TDD/#_1","text":"Repeat test Duplicate line \u522a\u9664\u6e38\u6a19\u4e4b\u5f8c","title":"\u91cd\u69cb\u6280\u5de7"},{"location":"Agile/91%20TDD/#tennis","text":"\u7b2c\u4e00\u500btest case\u53ef\u4ee5\u7528\u4f86\u8a02API","title":"Tennis"},{"location":"Agile/91%20TDD/#tennis_1","text":"C# Java PHP","title":"Tennis \u91cd\u69cb\u5f71\u7247"},{"location":"Agile/91%20TDD/#accounting","text":"","title":"Accounting"},{"location":"Agile/91%20TDD/#_2","text":"\u7df4\u7fd2\u91cd\u69cb\u7528branch \u53c3\u8003\u7528\u7684 commit histor \u793a\u7bc4\u5f71\u7247","title":"\u7b2c\u4e00\u7d44"},{"location":"Agile/91%20TDD/#tdd","text":"C# Java PHP","title":"TDD"},{"location":"Agile/Agile/","text":"Agile \u7d44\u7e54\u7cfb\u7d71\u7684\u4e0d\u540c\u60f3\u6cd5\u6703\u4e0d\u540c \u81ea\u7d44\u7e54\uff1a\u8b93\u4f60\u7684\u5718\u968a\u81ea\u5df1\u53bb\u5b78\u7fd2 \u6bcf\u4e00\u500bfeature team\u88e1\u9762\u81f3\u5c11\u6709\u4e00\u534a\u4ee5\u4e0a\u662fsenior The State of Agile Software in 2018 \u5927\u5e2b\u958b\u8b1b https://martinfowler.com/articles/agile-aus-2018.html \u73fe\u5728\u654f\u6377\u770b\u4f3c\u4e00\u7247\u5149\u660e\uff0c\u56e0\u70ba\u4ed6\u662f\u4e3b\u6d41\uff0c\u4f46\u5be6\u969b\u4e0a\u537b\u6709\u8a31\u591a\u554f\u984c\uff0c\u5176\u4e2d\u4e09\u500b\u4e3b\u8981\u554f\u984c\uff1a ighting the Agile Industrial Complex and its habit of imposing process upon teams raising the importance of technical excellence organizing our teams around products (rather than projects) As we look at the state of agile: at a surface level, things are looking very good. \u5341\u5e74\u524d\u6709\u4eba\u8acb\u99ac\u4e01\u53bb\u6f14\u8b1b\uff0c\u76f4\u63a5\u8aaa\u660e\u4f60\u53ef\u4ee5\u8ac7\u4efb\u4f55\u4e3b\u984c\uff0c\u4f46\u4e0d\u8981\u8ddf\u654f\u6377\u6709\u95dc\u3002 \u800c\u73fe\u5728\u654f\u6377\u5230\u8655\u90fd\u662f\u3002 \u6240\u4ee5\u4ee5\u524d\u8ac7\u8ad6\u654f\u6377\u6703\u76f4\u63a5\u5f97\u5230\u5f88\u5927\u7684\u53cd\u5f48\uff0c\u4f46\u9019\u6a23\u5c31\u80fd\u5e36\u4f86\u4e00\u4e9b\u91cd\u8981\u7684\u6e9d\u901a\uff0c\u4f46\u73fe\u5728\u4f60\u6703\u807d\u5230\u4ed6\u5011\u76f4\u63a5\u8aaa\"\u5662~\u6211\u5011\u5df2\u7d93\u5728\u8dd1\u654f\u6377\u4e86~\"\uff0c\u7136\u5f8c\u4f60\u5230\u4e86\u90a3\u88cf\uff0c\u767c\u73fe\u8ddf\u4f60\u60f3\u7684\u5b8c\u5168\u4e0d\u4e00\u6a23\u3002 The first problem: Faux-agile Our challenge now is dealing with faux-agile \u6240\u4ee5\u6211\u5011\u7684\u6311\u6230\u662f\u5c0d\u4ed8 \u4eba\u9020\u654f\u6377 \uff0c Dark Agile or Dark Scrum Our challenge at the moment isn't making agile a thing that people want to do, it's dealing with what I call faux-agile: agile that's just the name, but none of the practices and values in place. \u4eba\u9020\u654f\u6377\u6bd4\u5047\u88dd\u654f\u6377\u9084\u7cdf\u7cd5(\u5047\u88dd\u81f3\u5c11\u53ea\u662f\u5047\u88dd\uff0c\u4eba\u9020\u654f\u6377\u662f\u4f60\u771f\u7684\u505a\u4e86\u53ef\u662f\u4e82\u4f86) \u554f\u984c\u592a\u5927\uff0c\u4f5c\u8005\u5340\u5206\u4e09\u500b\u4e3b\u8981\u554f\u984c\u4f86\u8a0e\u8ad6 Our first problem is dealing with the Agile Industrial Complex \u8b93\u505a\u4e8b\u7684\u4eba\u9078\u64c7\u5982\u4f55\u505a\u4e8b\u662f\u654f\u6377\u6700\u57fa\u672c\u7684\u5047\u8a2d In particular, one of the really central things that impressed me very much about the early agile advocates was this realization that people are operating at the best when they choose how they want to work. \u8ac7\u5230\u654f\u6377\u5ba3\u8a00\u6642\uff0c\u96d6\u7136\u4ed6\u5011\u4e26\u6c92\u6709\u9806\u5e8f\u95dc\u4fc2\uff0c\u4f46\u7279\u5225\u8ac7\u5230\u7b2c\u4e00\u689d\"\u500b\u4eba\u8207\u4e92\u52d5\u91cd\u65bc\u6d41\u7a0b\u8207\u5de5\u5177\"\uff0c\u4f60\u5982\u679c\u60f3\u8981\u6210\u529f\u7684\u8edf\u9ad4\u958b\u767c\uff0c\u4f60\u8981\u627e\u5230\u597d\u7684\u4eba\u3002 A team should not only choose its process, but continue to evolve it \u654f\u6377\u904e\u7a0b\u5c31\u662f\u4f60\u6703\u4e00\u76f4\u9032\u5316\u4ed6` \"if you're doing Extreme Programming the same way as you were doing it a year ago, you're no longer doing Extreme Programming\". 20\u4e16\u7d00\u521d\uff0c Frederick Taylor \u5f71\u97ff\u4e86\u6574\u500b\u5de5\u696d\uff0c\u4ed6\u559c\u6b61\u7814\u7a76\u5982\u4f55\u8b93\u4eba\u66f4\u6709\u6548\u7387\uff0c\u4ed6\u8a8d\u70ba\u54e1\u5de5\u5e73\u5747\u800c\u8a00\u662f\u61f6\u60f0\u3001\u8150\u6557\u4e14\u611a\u7b28\u7684\uff0c\u6240\u4ee5\u4e0d\u8b93\u505a\u4e8b\u7684\u7684\u4eba\u6c7a\u5b9a\u5982\u4f55\u505a\u4e8b\u800c\u662f\u6709\u53e6\u4e00\u7fa4\u66f4\u8070\u660e\u53d7\u66f4\u826f\u597d\u6559\u80b2\u7684\u4eba\u4f86\u6c7a\u5b9a\u5982\u4f55\u505a\u4e8b\u3002 \u4f46\u662f\u62dc\u8a17\uff0c\u6211\u5011\u8a0e\u8ad6\u7684\u662f \u8edf\u9ad4\u958b\u767c The agile movement was part of trying to push that, to try to say, \"The teams involved in doing the work should decide how it gets done,\" because let's face it, we're talking about software developers here. People who are well paid, well educated, hopefully, well-motivated people, and so they should figure out what in their particular case is necessary. \"Particular case\"\u662f\u975e\u5e38\u91cd\u8981\u7684\uff0c\u6211\u5011\u9762\u5c0d\u4e0d\u540c\u7684\u6280\u8853\u4e0d\u540c\u7684\u74b0\u5883\u4e0d\u540c\u7684\u4eba\uff0c\u4e0d\u53ef\u80fd\u6709\u4efb\u4f55\u4e00\u7a2e\u65b9\u6cd5\u9069\u7528\u4efb\u4f55\u4eba The Agile Industrial Complex imposing methods on people is an absolute travesty \u654f\u6377\u63d0\u5021\u8005\u4e5f\u90e8\u6703\u8aaa\u654f\u6377\u9069\u7528\u65bc\u4efb\u4f55\u5730\u65b9\uff0c\u91cd\u9ede\u662f The team doing work decides how to do it. That is a fundamental agile principle. \u751a\u81f3\u662f\u5982\u679c\u5718\u968a\u4e0d\u60f3\u8dd1\u654f\u6377\uff0c\u4e0d\u8dd1\u654f\u6377\u5c0d\u9019\u500b\u5718\u968a\u800c\u8a00\u5c31\u662f\u6700\u654f\u6377\u7684 The second problem: technical excellence The second problem is the lack of recognition of the importance of technical excellence. \u8a31\u591a\u654f\u6377\u6703\u8b70\u4e0d\u600e\u9ebc\u8ac7\u8ad6\u6280\u8853\uff0c\u9019\u662f\u5f88\u60b2\u6158\u7684\uff0c\u56e0\u70ba\u6280\u8853\u4eba\u54e1\u662f\u771f\u6b63\u505a\u4e8b\u7684\u4eba\uff0c\u6240\u4ee5\u6211\u5011\u61c9\u8a72\u66f4\u95dc\u6ce8\u9019\u4e9b\u6280\u80fd\uff1a\u5982\u4f55\u57f9\u80b2\u4ed6\u3001\u5982\u4f55\u767c\u5c55\u4ed6\u4e14\u5982\u4f55\u8b93\u4ed6\u66f4\u91cd\u8981 \u4f60\u5011\u6709\u591a\u5c11\u4eba\u61c2Refactor? \u4ed6\u5c31\u662f\u654f\u6377\u9069\u61c9\u5feb\u901f\u8b8a\u5316\u7684\u6838\u5fc3\u6280\u80fd \u654f\u6377\u6709\u5169\u500b\u5927\u91cd\u9ede\uff0c\u4e00\u500b\u662f\u5718\u968a\u512a\u5148\uff0c\u5718\u968a\u6c7a\u5b9a\u5982\u4f55\u505a\u4e8b\uff0c\u53e6\u4e00\u500b\u5c31\u662f\u5718\u968a\u5feb\u901f\u6539\u8b8a\u7684\u80fd\u529b When I summarize agile to people, I usually say there's two main pieces to it. One, I've already talked about, the primacy of the team, and the team's choices of how they do things, but the other is our ability to change rapidly, to be able to deal with change easily. \u54e5\u662f\u5b9a\u7fa9 refactoring \u7684\u4eba\u6211\u61c9\u8a72\u6e05\u695a\u4ed6\u7684\u610f\u601d Refactoring is lots of small changes, none of which change the observable part of the software \u91cd\u69cb\u662f\u8a31\u591a\u5c0f\u7684\u6539\u8b8a\uff0c\u9019\u4e9b\u6539\u8b8a\u4f60\u5f9e\u5916\u9762\u662f\u770b\u4e0d\u51fa\u4f86\u7684\uff0c\u901a\u5e38\u70ba\u7684\u662f\u65b0\u589e\u529f\u80fd\uff0c\u800c\u820a\u7684\u67b6\u69cb\u4e0d\u662f\u5f88\u597d\u65b0\u589e\uff0c\u6240\u4ee5\u4f60\u91cd\u69cb\u4f7f\u7684\u65b0\u529f\u80fd\u66f4\u5bb9\u6613\u65b0\u589e\u4e0a\u53bb\uff1a Kent Beck summarizes this. \"When you want to make a change, first, make the change easy. (Warning, this may be hard.) Then make the easy change\". refactoring is a constant thing \u60f3\u8981\u5feb\u901f\u505a\u8b8a\u5316\u7684\u4e00\u500b\u91cd\u9ede\u662f\u5feb\u901f\u4e86\u89e3\u6574\u500b\u7a0b\u5f0f\u5728\u5e79\u561b\uff0c\u4e0d\u904e\u5982\u679c\u4f60\u7a0b\u5f0f\u6a21\u7d44\u5316\u505a\u5f97\u597d\uff0c\u4f60\u5c31\u4e0d\u7528\u4e86\u89e3\u6574\u500b\u7a0b\u5f0f\u5728\u5e79\u561b\u3002 \u70ba\u4ec0\u9ebc\u91cd\u69cb\u5f88\u91cd\u8981\uff1f\u56e0\u70ba\u91cd\u69cb\u7684\u904e\u7a0b\u4e2d\u4f60\u81f4\u529b\u65bc\u8b93\u7a0b\u5f0f \u66f4\u597d\u95b1\u8b80 \uff0c\u4e0d\u7528\u6bcf\u6b21\u90fd\u9700\u8981\u628a\u904e\u7a0b\u91cd\u65b0\u4e86\u89e3\u4e00\u904d\uff0c\u4f60\u91cd\u69cb\u7684\u904e\u7a0b\u540c\u6642\u8b93\u65b0\u7684\u529f\u80fd \u66f4\u5bb9\u6613\u65b0\u589e \uff0c\u6240\u4ee5\u4f60\u53ef\u4ee5\u66f4\u5feb\u901f\u7684\u505a\u8b8a\u5316\uff0c\u800c\u4e00\u4f46\u4f60\u80fd\u5feb\u901f\u65b0\u589e\u6771\u897f\uff0c\u4f60\u5c31\u4e0d\u9700\u8981\u5728\u4e00\u958b\u59cb\u7684\u6642\u5019\u8b93\u4f60\u7684\u7a0b\u5f0f\u80fd\u505a\u4efb\u4f55\u4e8b\uff0c\u53ef\u4ee5\u7b49\u9700\u8981\u518d\u52a0\u5165\u3002\u9019\u5c31\u662f Yagni - \"You aren't gonna need it\"\u539f\u5247(\u4f60\u7528\u4e0d\u5230\u5566\u539f\u5247)\uff0c\u4e0d\u8981\u5728\u4f60\u9084\u4e0d\u9700\u8981\u7684\u6642\u5019\u52a0\u5165\u529f\u80fd\uff0c\u4f60\u53ea\u6703\u8b93\u7a0b\u5f0f\u66f4\u96e3\u61c2\u3002 \u4e0d\u904e\u9019\u500b\u65b9\u6cd5\u5982\u679c\u6c92\u6709\u826f\u597d\u7684\u91cd\u69cb\u6280\u80fd\uff0c\u662f\u5b8c\u5168\u6c92\u7528\u7684\u3002 \u800c\u91cd\u69cb\u53c8\u4ef0\u8cf4\u8457\u6e2c\u8a66\u3001\u4ef0\u8cf4\u8457\u6301\u7e8c\u6574\u5408\uff0c\u540c\u6642\u4f60\u9084\u9700\u8981\u6301\u7e8c\u767c\u5e03\u4f60\u624d\u80fd\u7528\u975e\u5e38\u975e\u5e38\u5feb\u7684\u983b\u7387\u767c\u5e03\u4f60\u7684\u8edf\u9ad4\u3002 The third problem: product-oriented view \u7528\u7522\u54c1\u770b\u4e16\u754c We should get rid of software projects and use a product-oriented view \u4e2d\u9593\u4e00\u5927\u6bb5\u5b8c\u5168\u770b\u4e0d\u61c2 \u6e9d\u901a\u662f\u4e00\u5207 There should be an ongoing conversation between software developers, business people, and anybody involved in making that customer experience better. Summary Get rid of the Agile Industrial Complex and the idea of imposing stuff on teams . Let teams work out the way they should work themselves. Raise the importance of technical excellence , and never forget that when writing software, the technology side is really vital, and organize around products . \u96d6\u7136\u8b1b\u4e86\u4e00\u5806\u58de\u4e8b\uff0c\u4f46\u662f\u8b1b\u8005\u4e26\u4e0d\u60b2\u89c0\uff0c\u56de\u5230\u654f\u6377\u5ba3\u8a00\u767c\u5e03\u5f8c\u7684\u516d\u500b\u6708\uff0c\u6709\u4eba\u63d0\u8b70\u6211\u5011\u61c9\u8a72\u6210\u7acb\u4e00\u500b\u7d44\u7e54\uff0c\u8a62\u554f\u4e8617\u4f4d\u654f\u6377\u5ba3\u8a00\u4f5c\u8005\u662f\u5426\u8a72\u626e\u6f14\u7279\u6b8a\u8173\u8272\uff1a The manifesto authors said \"no\" to a special role in the movement's future \"new people will come in and do great things\" because we let go, we ended up with a community that could tackle problems we hadn't imagined \u958b\u653e\u6b61\u8fce\u5f8c\u4f86\u8005\u6b63\u662f\u654f\u6377\u7684\u7279\u6027\u4e4b\u4e00\uff0c\u4e0d\u9700\u8981\u60b2\u89c0\u53ea\u9700\u8981\u6301\u7e8c\u6539\u8b8a\u6211\u5011\u5c31\u64c1\u6709\u672a\u4f86","title":"Agile"},{"location":"Agile/Agile/#agile","text":"\u7d44\u7e54\u7cfb\u7d71\u7684\u4e0d\u540c\u60f3\u6cd5\u6703\u4e0d\u540c \u81ea\u7d44\u7e54\uff1a\u8b93\u4f60\u7684\u5718\u968a\u81ea\u5df1\u53bb\u5b78\u7fd2 \u6bcf\u4e00\u500bfeature team\u88e1\u9762\u81f3\u5c11\u6709\u4e00\u534a\u4ee5\u4e0a\u662fsenior","title":"Agile"},{"location":"Agile/Agile/#the-state-of-agile-software-in-2018","text":"\u5927\u5e2b\u958b\u8b1b https://martinfowler.com/articles/agile-aus-2018.html \u73fe\u5728\u654f\u6377\u770b\u4f3c\u4e00\u7247\u5149\u660e\uff0c\u56e0\u70ba\u4ed6\u662f\u4e3b\u6d41\uff0c\u4f46\u5be6\u969b\u4e0a\u537b\u6709\u8a31\u591a\u554f\u984c\uff0c\u5176\u4e2d\u4e09\u500b\u4e3b\u8981\u554f\u984c\uff1a ighting the Agile Industrial Complex and its habit of imposing process upon teams raising the importance of technical excellence organizing our teams around products (rather than projects) As we look at the state of agile: at a surface level, things are looking very good. \u5341\u5e74\u524d\u6709\u4eba\u8acb\u99ac\u4e01\u53bb\u6f14\u8b1b\uff0c\u76f4\u63a5\u8aaa\u660e\u4f60\u53ef\u4ee5\u8ac7\u4efb\u4f55\u4e3b\u984c\uff0c\u4f46\u4e0d\u8981\u8ddf\u654f\u6377\u6709\u95dc\u3002 \u800c\u73fe\u5728\u654f\u6377\u5230\u8655\u90fd\u662f\u3002 \u6240\u4ee5\u4ee5\u524d\u8ac7\u8ad6\u654f\u6377\u6703\u76f4\u63a5\u5f97\u5230\u5f88\u5927\u7684\u53cd\u5f48\uff0c\u4f46\u9019\u6a23\u5c31\u80fd\u5e36\u4f86\u4e00\u4e9b\u91cd\u8981\u7684\u6e9d\u901a\uff0c\u4f46\u73fe\u5728\u4f60\u6703\u807d\u5230\u4ed6\u5011\u76f4\u63a5\u8aaa\"\u5662~\u6211\u5011\u5df2\u7d93\u5728\u8dd1\u654f\u6377\u4e86~\"\uff0c\u7136\u5f8c\u4f60\u5230\u4e86\u90a3\u88cf\uff0c\u767c\u73fe\u8ddf\u4f60\u60f3\u7684\u5b8c\u5168\u4e0d\u4e00\u6a23\u3002","title":"The State of Agile Software in 2018"},{"location":"Agile/Agile/#the-first-problem-faux-agile","text":"Our challenge now is dealing with faux-agile \u6240\u4ee5\u6211\u5011\u7684\u6311\u6230\u662f\u5c0d\u4ed8 \u4eba\u9020\u654f\u6377 \uff0c Dark Agile or Dark Scrum Our challenge at the moment isn't making agile a thing that people want to do, it's dealing with what I call faux-agile: agile that's just the name, but none of the practices and values in place. \u4eba\u9020\u654f\u6377\u6bd4\u5047\u88dd\u654f\u6377\u9084\u7cdf\u7cd5(\u5047\u88dd\u81f3\u5c11\u53ea\u662f\u5047\u88dd\uff0c\u4eba\u9020\u654f\u6377\u662f\u4f60\u771f\u7684\u505a\u4e86\u53ef\u662f\u4e82\u4f86) \u554f\u984c\u592a\u5927\uff0c\u4f5c\u8005\u5340\u5206\u4e09\u500b\u4e3b\u8981\u554f\u984c\u4f86\u8a0e\u8ad6 Our first problem is dealing with the Agile Industrial Complex \u8b93\u505a\u4e8b\u7684\u4eba\u9078\u64c7\u5982\u4f55\u505a\u4e8b\u662f\u654f\u6377\u6700\u57fa\u672c\u7684\u5047\u8a2d In particular, one of the really central things that impressed me very much about the early agile advocates was this realization that people are operating at the best when they choose how they want to work. \u8ac7\u5230\u654f\u6377\u5ba3\u8a00\u6642\uff0c\u96d6\u7136\u4ed6\u5011\u4e26\u6c92\u6709\u9806\u5e8f\u95dc\u4fc2\uff0c\u4f46\u7279\u5225\u8ac7\u5230\u7b2c\u4e00\u689d\"\u500b\u4eba\u8207\u4e92\u52d5\u91cd\u65bc\u6d41\u7a0b\u8207\u5de5\u5177\"\uff0c\u4f60\u5982\u679c\u60f3\u8981\u6210\u529f\u7684\u8edf\u9ad4\u958b\u767c\uff0c\u4f60\u8981\u627e\u5230\u597d\u7684\u4eba\u3002 A team should not only choose its process, but continue to evolve it \u654f\u6377\u904e\u7a0b\u5c31\u662f\u4f60\u6703\u4e00\u76f4\u9032\u5316\u4ed6` \"if you're doing Extreme Programming the same way as you were doing it a year ago, you're no longer doing Extreme Programming\". 20\u4e16\u7d00\u521d\uff0c Frederick Taylor \u5f71\u97ff\u4e86\u6574\u500b\u5de5\u696d\uff0c\u4ed6\u559c\u6b61\u7814\u7a76\u5982\u4f55\u8b93\u4eba\u66f4\u6709\u6548\u7387\uff0c\u4ed6\u8a8d\u70ba\u54e1\u5de5\u5e73\u5747\u800c\u8a00\u662f\u61f6\u60f0\u3001\u8150\u6557\u4e14\u611a\u7b28\u7684\uff0c\u6240\u4ee5\u4e0d\u8b93\u505a\u4e8b\u7684\u7684\u4eba\u6c7a\u5b9a\u5982\u4f55\u505a\u4e8b\u800c\u662f\u6709\u53e6\u4e00\u7fa4\u66f4\u8070\u660e\u53d7\u66f4\u826f\u597d\u6559\u80b2\u7684\u4eba\u4f86\u6c7a\u5b9a\u5982\u4f55\u505a\u4e8b\u3002 \u4f46\u662f\u62dc\u8a17\uff0c\u6211\u5011\u8a0e\u8ad6\u7684\u662f \u8edf\u9ad4\u958b\u767c The agile movement was part of trying to push that, to try to say, \"The teams involved in doing the work should decide how it gets done,\" because let's face it, we're talking about software developers here. People who are well paid, well educated, hopefully, well-motivated people, and so they should figure out what in their particular case is necessary. \"Particular case\"\u662f\u975e\u5e38\u91cd\u8981\u7684\uff0c\u6211\u5011\u9762\u5c0d\u4e0d\u540c\u7684\u6280\u8853\u4e0d\u540c\u7684\u74b0\u5883\u4e0d\u540c\u7684\u4eba\uff0c\u4e0d\u53ef\u80fd\u6709\u4efb\u4f55\u4e00\u7a2e\u65b9\u6cd5\u9069\u7528\u4efb\u4f55\u4eba The Agile Industrial Complex imposing methods on people is an absolute travesty \u654f\u6377\u63d0\u5021\u8005\u4e5f\u90e8\u6703\u8aaa\u654f\u6377\u9069\u7528\u65bc\u4efb\u4f55\u5730\u65b9\uff0c\u91cd\u9ede\u662f The team doing work decides how to do it. That is a fundamental agile principle. \u751a\u81f3\u662f\u5982\u679c\u5718\u968a\u4e0d\u60f3\u8dd1\u654f\u6377\uff0c\u4e0d\u8dd1\u654f\u6377\u5c0d\u9019\u500b\u5718\u968a\u800c\u8a00\u5c31\u662f\u6700\u654f\u6377\u7684","title":"The first problem: Faux-agile"},{"location":"Agile/Agile/#the-second-problem-technical-excellence","text":"The second problem is the lack of recognition of the importance of technical excellence. \u8a31\u591a\u654f\u6377\u6703\u8b70\u4e0d\u600e\u9ebc\u8ac7\u8ad6\u6280\u8853\uff0c\u9019\u662f\u5f88\u60b2\u6158\u7684\uff0c\u56e0\u70ba\u6280\u8853\u4eba\u54e1\u662f\u771f\u6b63\u505a\u4e8b\u7684\u4eba\uff0c\u6240\u4ee5\u6211\u5011\u61c9\u8a72\u66f4\u95dc\u6ce8\u9019\u4e9b\u6280\u80fd\uff1a\u5982\u4f55\u57f9\u80b2\u4ed6\u3001\u5982\u4f55\u767c\u5c55\u4ed6\u4e14\u5982\u4f55\u8b93\u4ed6\u66f4\u91cd\u8981 \u4f60\u5011\u6709\u591a\u5c11\u4eba\u61c2Refactor? \u4ed6\u5c31\u662f\u654f\u6377\u9069\u61c9\u5feb\u901f\u8b8a\u5316\u7684\u6838\u5fc3\u6280\u80fd \u654f\u6377\u6709\u5169\u500b\u5927\u91cd\u9ede\uff0c\u4e00\u500b\u662f\u5718\u968a\u512a\u5148\uff0c\u5718\u968a\u6c7a\u5b9a\u5982\u4f55\u505a\u4e8b\uff0c\u53e6\u4e00\u500b\u5c31\u662f\u5718\u968a\u5feb\u901f\u6539\u8b8a\u7684\u80fd\u529b When I summarize agile to people, I usually say there's two main pieces to it. One, I've already talked about, the primacy of the team, and the team's choices of how they do things, but the other is our ability to change rapidly, to be able to deal with change easily. \u54e5\u662f\u5b9a\u7fa9 refactoring \u7684\u4eba\u6211\u61c9\u8a72\u6e05\u695a\u4ed6\u7684\u610f\u601d Refactoring is lots of small changes, none of which change the observable part of the software \u91cd\u69cb\u662f\u8a31\u591a\u5c0f\u7684\u6539\u8b8a\uff0c\u9019\u4e9b\u6539\u8b8a\u4f60\u5f9e\u5916\u9762\u662f\u770b\u4e0d\u51fa\u4f86\u7684\uff0c\u901a\u5e38\u70ba\u7684\u662f\u65b0\u589e\u529f\u80fd\uff0c\u800c\u820a\u7684\u67b6\u69cb\u4e0d\u662f\u5f88\u597d\u65b0\u589e\uff0c\u6240\u4ee5\u4f60\u91cd\u69cb\u4f7f\u7684\u65b0\u529f\u80fd\u66f4\u5bb9\u6613\u65b0\u589e\u4e0a\u53bb\uff1a Kent Beck summarizes this. \"When you want to make a change, first, make the change easy. (Warning, this may be hard.) Then make the easy change\". refactoring is a constant thing \u60f3\u8981\u5feb\u901f\u505a\u8b8a\u5316\u7684\u4e00\u500b\u91cd\u9ede\u662f\u5feb\u901f\u4e86\u89e3\u6574\u500b\u7a0b\u5f0f\u5728\u5e79\u561b\uff0c\u4e0d\u904e\u5982\u679c\u4f60\u7a0b\u5f0f\u6a21\u7d44\u5316\u505a\u5f97\u597d\uff0c\u4f60\u5c31\u4e0d\u7528\u4e86\u89e3\u6574\u500b\u7a0b\u5f0f\u5728\u5e79\u561b\u3002 \u70ba\u4ec0\u9ebc\u91cd\u69cb\u5f88\u91cd\u8981\uff1f\u56e0\u70ba\u91cd\u69cb\u7684\u904e\u7a0b\u4e2d\u4f60\u81f4\u529b\u65bc\u8b93\u7a0b\u5f0f \u66f4\u597d\u95b1\u8b80 \uff0c\u4e0d\u7528\u6bcf\u6b21\u90fd\u9700\u8981\u628a\u904e\u7a0b\u91cd\u65b0\u4e86\u89e3\u4e00\u904d\uff0c\u4f60\u91cd\u69cb\u7684\u904e\u7a0b\u540c\u6642\u8b93\u65b0\u7684\u529f\u80fd \u66f4\u5bb9\u6613\u65b0\u589e \uff0c\u6240\u4ee5\u4f60\u53ef\u4ee5\u66f4\u5feb\u901f\u7684\u505a\u8b8a\u5316\uff0c\u800c\u4e00\u4f46\u4f60\u80fd\u5feb\u901f\u65b0\u589e\u6771\u897f\uff0c\u4f60\u5c31\u4e0d\u9700\u8981\u5728\u4e00\u958b\u59cb\u7684\u6642\u5019\u8b93\u4f60\u7684\u7a0b\u5f0f\u80fd\u505a\u4efb\u4f55\u4e8b\uff0c\u53ef\u4ee5\u7b49\u9700\u8981\u518d\u52a0\u5165\u3002\u9019\u5c31\u662f Yagni - \"You aren't gonna need it\"\u539f\u5247(\u4f60\u7528\u4e0d\u5230\u5566\u539f\u5247)\uff0c\u4e0d\u8981\u5728\u4f60\u9084\u4e0d\u9700\u8981\u7684\u6642\u5019\u52a0\u5165\u529f\u80fd\uff0c\u4f60\u53ea\u6703\u8b93\u7a0b\u5f0f\u66f4\u96e3\u61c2\u3002 \u4e0d\u904e\u9019\u500b\u65b9\u6cd5\u5982\u679c\u6c92\u6709\u826f\u597d\u7684\u91cd\u69cb\u6280\u80fd\uff0c\u662f\u5b8c\u5168\u6c92\u7528\u7684\u3002 \u800c\u91cd\u69cb\u53c8\u4ef0\u8cf4\u8457\u6e2c\u8a66\u3001\u4ef0\u8cf4\u8457\u6301\u7e8c\u6574\u5408\uff0c\u540c\u6642\u4f60\u9084\u9700\u8981\u6301\u7e8c\u767c\u5e03\u4f60\u624d\u80fd\u7528\u975e\u5e38\u975e\u5e38\u5feb\u7684\u983b\u7387\u767c\u5e03\u4f60\u7684\u8edf\u9ad4\u3002","title":"The second problem: technical excellence"},{"location":"Agile/Agile/#the-third-problem-product-oriented-view","text":"\u7528\u7522\u54c1\u770b\u4e16\u754c We should get rid of software projects and use a product-oriented view \u4e2d\u9593\u4e00\u5927\u6bb5\u5b8c\u5168\u770b\u4e0d\u61c2 \u6e9d\u901a\u662f\u4e00\u5207 There should be an ongoing conversation between software developers, business people, and anybody involved in making that customer experience better.","title":"The third problem: product-oriented view"},{"location":"Agile/Agile/#summary","text":"Get rid of the Agile Industrial Complex and the idea of imposing stuff on teams . Let teams work out the way they should work themselves. Raise the importance of technical excellence , and never forget that when writing software, the technology side is really vital, and organize around products . \u96d6\u7136\u8b1b\u4e86\u4e00\u5806\u58de\u4e8b\uff0c\u4f46\u662f\u8b1b\u8005\u4e26\u4e0d\u60b2\u89c0\uff0c\u56de\u5230\u654f\u6377\u5ba3\u8a00\u767c\u5e03\u5f8c\u7684\u516d\u500b\u6708\uff0c\u6709\u4eba\u63d0\u8b70\u6211\u5011\u61c9\u8a72\u6210\u7acb\u4e00\u500b\u7d44\u7e54\uff0c\u8a62\u554f\u4e8617\u4f4d\u654f\u6377\u5ba3\u8a00\u4f5c\u8005\u662f\u5426\u8a72\u626e\u6f14\u7279\u6b8a\u8173\u8272\uff1a The manifesto authors said \"no\" to a special role in the movement's future \"new people will come in and do great things\" because we let go, we ended up with a community that could tackle problems we hadn't imagined \u958b\u653e\u6b61\u8fce\u5f8c\u4f86\u8005\u6b63\u662f\u654f\u6377\u7684\u7279\u6027\u4e4b\u4e00\uff0c\u4e0d\u9700\u8981\u60b2\u89c0\u53ea\u9700\u8981\u6301\u7e8c\u6539\u8b8a\u6211\u5011\u5c31\u64c1\u6709\u672a\u4f86","title":"Summary"},{"location":"Agile/Is%20Design%20Dead/","text":"Is Design Dead OG Planned and Evolutionary Design \u9019\u4e16\u4e0a\u6709\u5169\u7a2e\u8a2d\u8a08\uff1aPlanned and Evolutionary Design Designers\u96a8\u8457\u6642\u9593\u4e0d\u518d\u958b\u767c\uff0c\u4e0d\u4f46\u8ddf\u4e0d\u4e0a\u6280\u8853\u6f6e\u6d41\uff0c\u4e5f\u6162\u6162\u6703\u5931\u53bb\u958b\u767c\u8005\u5c0d\u4f60\u7684\u5c0a\u656c \u84cb\u623f\u5b50\u4e5f\u6703\u6709\u5efa\u7bc9\u5e2b\u8ddf\u5efa\u7bc9\u5de5\u885d\u7a81\u7684\u554f\u984c\uff0c\u4f46\u6bd4\u8d77\u4f86\u8edf\u9ad4\u696d\u66f4\u70ba\u660e\u986f\uff0c\u56e0\u70ba\u5169\u8005\u7684\u77e5\u8b58\u5206\u754c\u66f4\u5c0f\uff0c\u5c24\u5176\u7576designers\u7f3a\u4e4f\u5c0dprogrammers\u7684\u65e5\u5e38\u958b\u767c\u77e5\u8b58\u7684\u6642\u5019 Planned design\u6c92\u6709\u4e0d\u597d\uff0c\u53ea\u662f\u4f60\u5e7e\u4e4e\u4e0d\u53ef\u80fd\u9810\u6e2c\u4f60\u7684\u9700\u6c42\u8b8a\u52d5\uff0c\u5c24\u5176\u662f\u5546\u696d\u9762\u7684\u539f\u56e0 The Enabling Practices of XP XP\u63d0\u5021Evolutionary Design Evolutionary Design\u4e00\u822c\u8a8d\u70ba\u4e0d\u53ef\u884c\u7684\u539f\u56e0\uff1asoftware change curve \u60f3\u73a9XP\u9996\u5148\u4f60\u8981\u5148enable\u5b83\uff0cenable\u7684\u6838\u5fc3\u4e3b\u8981\u6709\u5169\u500b\uff1aTesting\u548cCI\uff0c\u4e5f\u662f\u9760\u9019\u5169\u62db\u628asoftware change curve\u58d3\u5e73 XP\u4e0d\u50c5\u50c5\u662f\u6e2c\u8a66\uff0c\u7136\u5f8c\u91cd\u69cb\u800c\u5df2\uff0c\u8a2d\u8a08\u5c31\u767c\u751f\u5728\u6bcf\u6b21\u8fed\u4ee3\u4e4b\u9593\uff0c\u53ea\u662f\u7a7a\u9593\u8ddf\u5e73\u8861\u9084\u5728\u62ff\u634f The Value of Simplicity Two of the greatest rallying cries in XP are the slogans \"Do the Simplest Thing that Could Possibly Work\" and \"You Aren't Going to Need It\" (known as YAGNI). \u5c31\u7b97\u6211\u9810\u671f\u4e0b\u500b\u8fed\u4ee3\u5c31\u9700\u8981\u7528\u5230\u7684\u529f\u80fd\u6211\u4e5f\u4e0d\u6703\u5148\u505a\uff0c\u56e0\u70ba\u90a3\u4e9b\u4e0d\u662f\u9019\u6b21\u8fed\u4ee3\u7684\u5de5\u4f5c \u5c31\u7b97cost\u662f0\u6211\u4e5f\u4e0d\u505a\uff0c\u56e0\u70ba\u9808\u8981\u7dad\u8b77 What on Earth is Simplicity Anyway XPE\u88e1\u6240\u8aaa\u7684\u56db\u500b\u7c21\u55ae\u6e96\u5247\uff1a Runs all the Tests No duplication Reveals all the intention Fewest number of classes or methods \u7c21\u55ae\u4e8b\u4e00\u4ef6\u5f88\u8907\u96dc\u7684\u4e8b\u60c5 \"it's easier to refactor over-design than it is to refactor no design.\"\uff0c\u53ef\u4ee5\u8b8a\u7c21\u55ae\u5f88\u597d\uff0c\u4f46\u662f\u7a0d\u5fae\u8907\u96dc\u4e26\u4e0d\u662f\u707d\u96e3 \u6700\u7d42\uff0c\u91cd\u69cb\u7684\u610f\u9858\u9084\u662f\u6bd4\u662f\u5426\u7c21\u55ae\u4f86\u7684\u91cd\u8981 Does Refactoring Violate YAGNI? YAGNI\u662f\u7c21\u55ae\u8a2d\u8a08\u7684\u4e00\u7a2e\u5be6\u8e10\u65b9\u5f0f\uff0c\u91cd\u69cb\u662f\u8b93\u7cfb\u7d71\u7dad\u6301\u7c21\u55ae\u7684\u65b9\u6cd5 Patterns and XP \u6709\u4e9b\u4eba\u8a8d\u70baXP\u8207\u8a2d\u8a08\u6a21\u5f0f\u885d\u7a81\uff0c\u9019\u662f\u56e0\u70ba\u8a2d\u8a08\u6a21\u5f0f\u906d\u5230\u6feb\u7528 \u6709\u6548\u7684\u8a2d\u8a08\u8a8d\u70ba\u8a2d\u8a08\u6a21\u5f0f\u662f\u503c\u5f97\u4ed8\u51fa\u7684 XP\u662f\u958b\u767c\u6d41\u7a0b\uff0c\u800c\u8a2d\u8a08\u6a21\u5f0f\u662f\u8a2d\u8a08\u77e5\u8b58\u9aa8\u5e79 XP\u5f37\u8abf\u7684\u662f\u4e0d\u8981\u4f7f\u7528\u8a2d\u8a08\u6a21\u5f0f\u76f4\u5230\u4f60\u9700\u8981\u4ed6 \u5c0dXPers\u4f7f\u7528\u8a2d\u8a08\u6a21\u5f0f\u7684\u5efa\u8b70\uff1a Invest time in learning about patterns Concentrate on when to apply the pattern (not too early) Concentrate on how to implement the pattern in its simplest form first, then add complexity later. If you put a pattern in, and later realize that it isn't pulling its weight - don't be afraid to take it out again. Growing an Architecture \u8edf\u9ad4\u67b6\u69cb\u5c31\u662f\u6307\u7cfb\u7d71\u7684\u6838\u5fc3\u5143\u7d20\uff0c\u662f\u96e3\u4ee5\u6539\u8b8a\u7684\u90e8\u5206\uff0c\u662f\u5269\u4e0b\u6771\u897f\u7684\u57fa\u790e \u6709\u4e00\u4e9b\u65e9\u671f\u7684\u67b6\u69cb\u8a2d\u8a08\u9084\u662f\u6709\u9ede\u4f5c\u7528\uff0c\u4f8b\u5982\u4f60\u600e\u9ebc\u5206\u5c64\u6216\u5982\u4f55\u8207DB\u6e9d\u901a\u7b49\u7b49 \u91cd\u9ede\u662f\u4e0d\u8981\u8a8d\u70ba\u9019\u4e9b\u67b6\u69cb\u8a2d\u8a08\u662f\u7121\u6cd5\u52d5\u6416\u7684\uff0c\u96a8\u6642\u8981\u6709\u4fee\u6539\u4ed6\u7684\u6e96\u5099 \u5982\u679c\u4f60\u6c7a\u5b9a\u4e0d\u4f7f\u7528\u67d0\u500b\u6771\u897f\uff0c\u601d\u8003\u4e4b\u5f8c\u518d\u628a\u4ed6\u52a0\u5165\u6703\u6709\u591a\u56f0\u96e3 \u5982\u679c\u767c\u73fe\u4f60\u7684\u67b6\u69cb\u67d0\u4e9b\u90e8\u5206\u6c92\u589e\u52a0\u4efb\u4f55\u6771\u897f\uff0c\u96a8\u6642\u6e96\u5099\u628a\u5b83\u7c21\u5316 UML and XP \u5982\u679c\u4f60\u89ba\u5f97\u597d\u7528\u5c31\u7528\uff0c\u4e0d\u61c9\u8a72\u662f\u4f60\u89ba\u5f97\u597d\u7528\u800c\u5f37\u8feb\u5225\u4eba\u4f7f\u7528\uff0c\u53cd\u4e4b\u4ea6\u7136 \u7576\u4f60\u89ba\u5f97\u9700\u8981\u7684\u6642\u5019\u518d\u4f7f\u7528\uff0c\u56e0\u70ba\u9019\u5f88\u82b1\u6642\u9593 \u8a18\u8457\u5716\u8868\u662f\u62ff\u4f86\u6e9d\u901a\u7528\u7684\uff0c\u6709\u6548\u7684\u6e9d\u901a\u5c31\u662f\u53bb\u6389\u96dc\u8a0a\uff0c\u6240\u4ee5\u4e0d\u9700\u8981\u6bcf\u500bclass\u90fd\u756b\uff0cclass\u4e5f\u4e0d\u7528\u6bcf\u500battribute\u90fd\u756b\uff0c\u5982\u679c\u9700\u8981\u5b8c\u6574\u7684\u8cc7\u8a0a\u90a3\u5df2\u7d93\u5728code\u88e1\u4e86 \u7576\u4f60\u4f7f\u7528\u5716\u8868\u4f86\u505a\u958b\u59cbcoding\u524d\u7684\u8a2d\u8a08\u6642\uff0c\u8b39\u8a18\uff1a keep them short don't try to address all the details (just the important ones) treat the resulting design as a sketch, not as a final design UML\u7528\u5728\u9032\u884c\u4e2d\u6587\u6a94(on-going documentation)\u901a\u5e38\u6c92\u5565\u6548\u679c\uff0c\u56e0\u70ba\u8981\u7dad\u6301\u5b83\u7684\u66f4\u65b0\u5f88\u8f9b\u82e6\uff0c\u800c\u4e14\u4ed6\u85cf\u5728CASE tool\u88e1\u9762\u6c92\u4eba\u6703\u770b \u5982\u679c\u4f7f\u7528\u5728\u9032\u884c\u4e2d\u6587\u6a94\uff0c\u5efa\u8b70\uff1a Only use diagrams that you can keep up to date without noticeable pain Put the diagrams where everyone can easily see them. I like to post them on a wall. Encourage people to edit the wall copy with a pen for simple changes. Pay attention to whether people are using them, if not throw them away. UML\u7684\u53e6\u4e00\u500b\u4f7f\u7528\u60c5\u5883\u662f\u4ea4\u63a5\uff0c\u4e00\u6a23\u8a18\u5f97\u5716\u8868\u53ea\u662f\u5e6b\u52a9\u6e9d\u901a\u51f8\u986f\u91cd\u8981\u7684\u90e8\u5206\uff0c\u8a73\u7d30\u7684\u5167\u5bb9\u662f\u5728\u4f60\u7684\u7a0b\u5f0f\u78bc\u5eab On Metaphor \u5b8c\u5168\u770b\u4e0d\u61c2 System Metaphor Definition: What ExtremeProgramming (XP) uses to unify an architecture and provide naming conventions. A simple shared story of how the system works, a metaphor. This story typically involves a handful of classes and patterns that shape the core flow of the system being built. Do you wanna be an Architect when you grow up? \u554f\u984c\u5728\u65bc\uff0c\u7576\u4f60\u60f3\u7df4\u7fd2\u6210\u70ba\u6280\u8853\u9818\u5c0e\u7684\u6642\u5019\uff0c\u4f60\u662f\u5426\u8a72\u4e1f\u68c4\u90a3\u4e9b\u958b\u767c\u65e5\u5e38? \u4e00\u4e9b\u53cd\u5c0dXP\u7684\u4eba\u8a8d\u70ba\u4ed6\u5011\u6700\u4e0d\u60f3\u8981\u958b\u767c\u4eba\u54e1\u91cd\u69cb\u548c\u4e82\u641e\u8a2d\u8a08\uff0c\u53ef\u662f\uff0c\u5982\u679c\u4f60\u4e0d\u4fe1\u4efb\u4f60\u7684\u958b\u767c\u4eba\u54e1\uff0c\u90a3\u4f60\u5e79\u561b\u96c7\u7528\u4ed6\u5011? XP\u7684\u7406\u5ff5\u662f\u7d93\u9a57\u8c50\u5bcc\u7684\u958b\u767c\u4eba\u54e1\u628a\u6280\u80fd\u50b3\u6388\u7d66\u8f03\u6c92\u7d93\u9a57\u7684\u958b\u767c\u4eba\u54e1\uff0c\u5354\u52a9\u4ed6\u5011\u505a\u6c7a\u5b9a\uff0c\u800c\u4e0d\u662f\u9760\u67b6\u69cb\u5e2b\u4e00\u500b\u4eba\u6c7a\u5b9a\u6240\u6709\u91cd\u8981\u7684\u4e8b Reversibility \u5982\u679c\u4f60\u53ef\u4ee5\u8f15\u6613\u6539\u8b8a\u4f60\u7684\u6c7a\u5b9a\uff0c\u90a3\u4f60\u7684\u6c7a\u5b9a\u662f\u5426\u6b63\u78ba\u5c31\u4e0d\u662f\u90a3\u9ebc\u91cd\u8981 evolutionary design\u5c31\u662f\u5728\u505a\u6c7a\u5b9a\u6642\u8981\u907f\u514d\u4e0d\u53ef\u9006\uff0c\u4e0d\u8ad6\u662f\u5ef6\u5f8c\u505a\u6c7a\u5b9a\u6216\u662f\u76f4\u63a5\u505a\u4fee\u6539\u4e0d\u6703\u592a\u56f0\u96e3\u7684\u6c7a\u5b9a \u9019\u5c31\u662f\u70ba\u4ec0\u9ebc\u654f\u6377\u5f37\u8abf\u4f60\u4e00\u5b9a\u8981\u6709\u7248\u63a7 \u53ef\u9006\u5f0f\u8a2d\u8a08\u4e5f\u53ef\u4ee5\u8b93\u554f\u984c\u5feb\u901f\u6d6e\u73fe\uff0c\u4f60\u53ef\u4ee5\u958b\u4e00\u689dbranch\u505a\u4e9b\u5be6\u9a57\u7136\u5f8c\u4e1f\u68c4 The Will to Design evolutionary design\u9700\u8981\u6709\u4e00\u80a1\u6536\u6582\u4ed6\u7684\u529b\u91cf\uff0c\u4e0d\u7528\u662f\u6bcf\u500b\u4eba(\u5982\u679c\u662f\u90a3\u4e5f\u5f88\u597d)\uff0c\u901a\u5e38\u4e00\u6216\u4e8c\u500b\u5718\u968a\u6210\u54e1\u8ca0\u8cac\u6574\u500b\u8a2d\u8a08\u7684\u5b8c\u6574\u6027\uff0c\u9019\u4e5f\u662f\u4e00\u822c\u5728\u8aaa\u7684\"\u67b6\u69cb\u5e2b\"\u7684\u8cac\u4efb\u4e4b\u4e00 \u6301\u7e8c\u95dc\u6ce8code base\uff0c\u770b\u54ea\u88e1\u8b8a\u7cdf\u4e86\u4e26\u5728\u4ed6\u5931\u53bb\u63a7\u5236\u524d\u4fee\u6b63\u4ed6\uff0c\u4fee\u6b63\u4ed6\u7684\u4e0d\u4e00\u5b9a\u8981\u662f\u4fdd\u6301\u8a2d\u8a08\u7684\u4eba\uff0c\u4f46\u8981\u78ba\u4fdd\u6709\u4eba\u53bb\u4fee Things that are difficult to refactor in XP\u8a8d\u70ba\u6240\u6709\u6771\u897f\u90fd\u61c9\u8a72\u8981\u80fd\u7c21\u55ae\u65b0\u589e\uff0c\u5c31\u7b97\u662f\u666e\u904d\u6027\u7684\u529f\u80fd\uff0c\u4f8b\u5982\u570b\u969b\u5316 \u7576\u4f60\u6c7a\u5b9a\u5728\u4e00\u958b\u59cb\u52a0\u5165\u570b\u969b\u5316\uff0c\u4e00\u9031\u53c8\u4e00\u9031\u5730\u6162\u6162\u5730\u65b0\u589e\u8207\u7dad\u8b77\uff0c\u4f60\u6703\u7121\u610f\u8b58\u5ffd\u7565\u4e86\u9019\u500b\u4e4b\u5f8c\u624d\u7528\u7684\u5230\u7684\u6771\u897f\u7684\u6210\u672c\uff0c\u800c\u4e14\u9084\u6709\u4e4b\u5f8c\u9700\u8981\u91cd\u69cb\u7684\u53ef\u80fd YAGNI\u7684\u90e8\u5206\u7406\u7531\u662f\u9019\u4e9b\u6f5b\u5728\u9700\u6c42\u5176\u5be6\u4f60\u6700\u5f8c\u90fd\u4e0d\u9700\u8981\uff0c\u6216\u8005\u4e0d\u662f\u4f60\u671f\u671b\u7684\u6a23\u5b50\uff0c\u800c\u91cd\u69cb\u6bd4\u505a\u51fa\u6240\u6709\u53ef\u80fd\u529f\u80fd\u82b1\u5730\u5de5\u5c11 \u5982\u679c\u4f60\u66fe\u7d93\u505a\u904e\u570b\u969b\u5316\uff0c\u90a3\u4f60\u5c31\u80fd\u6839\u64da\u6210\u672c\u4f86\u8a55\u65b7\u73fe\u5728\u505a\u9084\u662f\u4e4b\u5f8c\u518d\u505a\uff0c\u800c\u5982\u679c\u4f60\u6c92\u505a\u904e\uff0c\u4f60\u4e0d\u4f46\u6c92\u8fa6\u6cd5\u5224\u65b7\u6210\u672c\u4e5f\u4e0d\u77e5\u9053\u5982\u4f55\u505a\u597d\u4ed6\uff0c\u90a3\u4f60\u61c9\u8a72\u4e4b\u5f8c\u518d\u505a\uff0c\u90a3\u500b\u6642\u5019\u4f60\u7684\u5718\u968a\u5df2\u7d93\u66f4\u6709\u7d93\u9a57\uff0c\u66f4\u4e86\u89e3\u9019\u500b\u9818\u57df\uff0c\u66f4\u4e86\u89e3\u9700\u6c42 Kent\u8a8d\u70bastories\u88e1\u9762\u5546\u696d\u50f9\u503c\u662f\u552f\u4e00\u8981\u7d20\uff0c\u99ac\u4e01\u8a8d\u70ba\u61c9\u8a72\u4e5f\u8981\u6709\u4e00\u9ede\u6280\u8853\u98a8\u96aa Is Design Happening? evolutionary design\u6700\u56f0\u96e3\u7684\u4e00\u9ede\u662f\u5f88\u96e3\u5224\u65b7\u662f\u5426\u771f\u7684\u6709\u8a2d\u8a08\uff0c\u908a\u8a2d\u8a08\u908a\u958b\u767c\u5f88\u5bb9\u6613\u8b8a\u6210\u53ea\u6709\u958b\u767c\u6c92\u6709\u8a2d\u8a08 \u7576\u4f60\u767c\u73fecode base\u8b8a\u5f97\u8907\u96dc\u96e3\u904b\u4f5c\u7684\u6642\u5019\uff0c\u5c31\u4ee3\u8868\u7f3a\u4e4f\u8a2d\u8a08\uff0c\u4f46\u907a\u61be\u7684\u662f\u9019\u662f\u5f88\u4e3b\u89c0\u7684\uff0c\u6211\u5011\u6c92\u6709\u53ef\u9760\u7684\u6307\u6a19\u4f86\u5224\u65b7\u9019\u4ef6\u4e8b \u5c0d\u6280\u8853\u4eba\u54e1\u4f86\u8aaa\u5df2\u7d93\u4e0d\u5bb9\u6613\u4e86\uff0c\u5c0d\u975e\u6280\u8853\u4eba\u54e1\u66f4\u96e3\u8a55\u65b7\u4e00\u500b\u8edf\u9ad4\u662f\u5426\u8a2d\u8a08\u826f\u597d \u5169\u9ede\u5efa\u8b70\uff1a Listen to the technical people. If they are complaining about the difficulty of making changes, then take such complaints seriously and give them time to fix things. Keep an eye on how much code is being thrown away. A project that does healthy refactoring will be steadily deleting bad code. If nothing's getting deleted then it's almost certainly a sign that there isn't enough refactoring going on - which will lead to design degradation. However like any metric this can be abused, the opinion of good technical people trumps any metric, despite its subjectivity. So is Design Dead? Not by any means, but the nature of design has changed. XP design looks for the following skills A constant desire to keep code as clear and simple as possible Refactoring skills so you can confidently make improvements whenever you see the need. A good knowledge of patterns: not just the solutions but also appreciating when to use them and how to evolve into them. Designing with an eye to future changes, knowing that decisions taken now will have to be changed in the future. Knowing how to communicate the design to the people who need to understand it, using code, diagrams and above all: conversation.","title":"Is Design Dead"},{"location":"Agile/Is%20Design%20Dead/#is-design-dead","text":"OG","title":"Is Design Dead"},{"location":"Agile/Is%20Design%20Dead/#planned-and-evolutionary-design","text":"\u9019\u4e16\u4e0a\u6709\u5169\u7a2e\u8a2d\u8a08\uff1aPlanned and Evolutionary Design Designers\u96a8\u8457\u6642\u9593\u4e0d\u518d\u958b\u767c\uff0c\u4e0d\u4f46\u8ddf\u4e0d\u4e0a\u6280\u8853\u6f6e\u6d41\uff0c\u4e5f\u6162\u6162\u6703\u5931\u53bb\u958b\u767c\u8005\u5c0d\u4f60\u7684\u5c0a\u656c \u84cb\u623f\u5b50\u4e5f\u6703\u6709\u5efa\u7bc9\u5e2b\u8ddf\u5efa\u7bc9\u5de5\u885d\u7a81\u7684\u554f\u984c\uff0c\u4f46\u6bd4\u8d77\u4f86\u8edf\u9ad4\u696d\u66f4\u70ba\u660e\u986f\uff0c\u56e0\u70ba\u5169\u8005\u7684\u77e5\u8b58\u5206\u754c\u66f4\u5c0f\uff0c\u5c24\u5176\u7576designers\u7f3a\u4e4f\u5c0dprogrammers\u7684\u65e5\u5e38\u958b\u767c\u77e5\u8b58\u7684\u6642\u5019 Planned design\u6c92\u6709\u4e0d\u597d\uff0c\u53ea\u662f\u4f60\u5e7e\u4e4e\u4e0d\u53ef\u80fd\u9810\u6e2c\u4f60\u7684\u9700\u6c42\u8b8a\u52d5\uff0c\u5c24\u5176\u662f\u5546\u696d\u9762\u7684\u539f\u56e0","title":"Planned and Evolutionary Design"},{"location":"Agile/Is%20Design%20Dead/#the-enabling-practices-of-xp","text":"XP\u63d0\u5021Evolutionary Design Evolutionary Design\u4e00\u822c\u8a8d\u70ba\u4e0d\u53ef\u884c\u7684\u539f\u56e0\uff1asoftware change curve \u60f3\u73a9XP\u9996\u5148\u4f60\u8981\u5148enable\u5b83\uff0cenable\u7684\u6838\u5fc3\u4e3b\u8981\u6709\u5169\u500b\uff1aTesting\u548cCI\uff0c\u4e5f\u662f\u9760\u9019\u5169\u62db\u628asoftware change curve\u58d3\u5e73 XP\u4e0d\u50c5\u50c5\u662f\u6e2c\u8a66\uff0c\u7136\u5f8c\u91cd\u69cb\u800c\u5df2\uff0c\u8a2d\u8a08\u5c31\u767c\u751f\u5728\u6bcf\u6b21\u8fed\u4ee3\u4e4b\u9593\uff0c\u53ea\u662f\u7a7a\u9593\u8ddf\u5e73\u8861\u9084\u5728\u62ff\u634f","title":"The Enabling Practices of XP"},{"location":"Agile/Is%20Design%20Dead/#the-value-of-simplicity","text":"Two of the greatest rallying cries in XP are the slogans \"Do the Simplest Thing that Could Possibly Work\" and \"You Aren't Going to Need It\" (known as YAGNI). \u5c31\u7b97\u6211\u9810\u671f\u4e0b\u500b\u8fed\u4ee3\u5c31\u9700\u8981\u7528\u5230\u7684\u529f\u80fd\u6211\u4e5f\u4e0d\u6703\u5148\u505a\uff0c\u56e0\u70ba\u90a3\u4e9b\u4e0d\u662f\u9019\u6b21\u8fed\u4ee3\u7684\u5de5\u4f5c \u5c31\u7b97cost\u662f0\u6211\u4e5f\u4e0d\u505a\uff0c\u56e0\u70ba\u9808\u8981\u7dad\u8b77","title":"The Value of Simplicity"},{"location":"Agile/Is%20Design%20Dead/#what-on-earth-is-simplicity-anyway","text":"XPE\u88e1\u6240\u8aaa\u7684\u56db\u500b\u7c21\u55ae\u6e96\u5247\uff1a Runs all the Tests No duplication Reveals all the intention Fewest number of classes or methods \u7c21\u55ae\u4e8b\u4e00\u4ef6\u5f88\u8907\u96dc\u7684\u4e8b\u60c5 \"it's easier to refactor over-design than it is to refactor no design.\"\uff0c\u53ef\u4ee5\u8b8a\u7c21\u55ae\u5f88\u597d\uff0c\u4f46\u662f\u7a0d\u5fae\u8907\u96dc\u4e26\u4e0d\u662f\u707d\u96e3 \u6700\u7d42\uff0c\u91cd\u69cb\u7684\u610f\u9858\u9084\u662f\u6bd4\u662f\u5426\u7c21\u55ae\u4f86\u7684\u91cd\u8981","title":"What on Earth is Simplicity Anyway"},{"location":"Agile/Is%20Design%20Dead/#does-refactoring-violate-yagni","text":"YAGNI\u662f\u7c21\u55ae\u8a2d\u8a08\u7684\u4e00\u7a2e\u5be6\u8e10\u65b9\u5f0f\uff0c\u91cd\u69cb\u662f\u8b93\u7cfb\u7d71\u7dad\u6301\u7c21\u55ae\u7684\u65b9\u6cd5","title":"Does Refactoring Violate YAGNI?"},{"location":"Agile/Is%20Design%20Dead/#patterns-and-xp","text":"\u6709\u4e9b\u4eba\u8a8d\u70baXP\u8207\u8a2d\u8a08\u6a21\u5f0f\u885d\u7a81\uff0c\u9019\u662f\u56e0\u70ba\u8a2d\u8a08\u6a21\u5f0f\u906d\u5230\u6feb\u7528 \u6709\u6548\u7684\u8a2d\u8a08\u8a8d\u70ba\u8a2d\u8a08\u6a21\u5f0f\u662f\u503c\u5f97\u4ed8\u51fa\u7684 XP\u662f\u958b\u767c\u6d41\u7a0b\uff0c\u800c\u8a2d\u8a08\u6a21\u5f0f\u662f\u8a2d\u8a08\u77e5\u8b58\u9aa8\u5e79 XP\u5f37\u8abf\u7684\u662f\u4e0d\u8981\u4f7f\u7528\u8a2d\u8a08\u6a21\u5f0f\u76f4\u5230\u4f60\u9700\u8981\u4ed6 \u5c0dXPers\u4f7f\u7528\u8a2d\u8a08\u6a21\u5f0f\u7684\u5efa\u8b70\uff1a Invest time in learning about patterns Concentrate on when to apply the pattern (not too early) Concentrate on how to implement the pattern in its simplest form first, then add complexity later. If you put a pattern in, and later realize that it isn't pulling its weight - don't be afraid to take it out again.","title":"Patterns and XP"},{"location":"Agile/Is%20Design%20Dead/#growing-an-architecture","text":"\u8edf\u9ad4\u67b6\u69cb\u5c31\u662f\u6307\u7cfb\u7d71\u7684\u6838\u5fc3\u5143\u7d20\uff0c\u662f\u96e3\u4ee5\u6539\u8b8a\u7684\u90e8\u5206\uff0c\u662f\u5269\u4e0b\u6771\u897f\u7684\u57fa\u790e \u6709\u4e00\u4e9b\u65e9\u671f\u7684\u67b6\u69cb\u8a2d\u8a08\u9084\u662f\u6709\u9ede\u4f5c\u7528\uff0c\u4f8b\u5982\u4f60\u600e\u9ebc\u5206\u5c64\u6216\u5982\u4f55\u8207DB\u6e9d\u901a\u7b49\u7b49 \u91cd\u9ede\u662f\u4e0d\u8981\u8a8d\u70ba\u9019\u4e9b\u67b6\u69cb\u8a2d\u8a08\u662f\u7121\u6cd5\u52d5\u6416\u7684\uff0c\u96a8\u6642\u8981\u6709\u4fee\u6539\u4ed6\u7684\u6e96\u5099 \u5982\u679c\u4f60\u6c7a\u5b9a\u4e0d\u4f7f\u7528\u67d0\u500b\u6771\u897f\uff0c\u601d\u8003\u4e4b\u5f8c\u518d\u628a\u4ed6\u52a0\u5165\u6703\u6709\u591a\u56f0\u96e3 \u5982\u679c\u767c\u73fe\u4f60\u7684\u67b6\u69cb\u67d0\u4e9b\u90e8\u5206\u6c92\u589e\u52a0\u4efb\u4f55\u6771\u897f\uff0c\u96a8\u6642\u6e96\u5099\u628a\u5b83\u7c21\u5316","title":"Growing an Architecture"},{"location":"Agile/Is%20Design%20Dead/#uml-and-xp","text":"\u5982\u679c\u4f60\u89ba\u5f97\u597d\u7528\u5c31\u7528\uff0c\u4e0d\u61c9\u8a72\u662f\u4f60\u89ba\u5f97\u597d\u7528\u800c\u5f37\u8feb\u5225\u4eba\u4f7f\u7528\uff0c\u53cd\u4e4b\u4ea6\u7136 \u7576\u4f60\u89ba\u5f97\u9700\u8981\u7684\u6642\u5019\u518d\u4f7f\u7528\uff0c\u56e0\u70ba\u9019\u5f88\u82b1\u6642\u9593 \u8a18\u8457\u5716\u8868\u662f\u62ff\u4f86\u6e9d\u901a\u7528\u7684\uff0c\u6709\u6548\u7684\u6e9d\u901a\u5c31\u662f\u53bb\u6389\u96dc\u8a0a\uff0c\u6240\u4ee5\u4e0d\u9700\u8981\u6bcf\u500bclass\u90fd\u756b\uff0cclass\u4e5f\u4e0d\u7528\u6bcf\u500battribute\u90fd\u756b\uff0c\u5982\u679c\u9700\u8981\u5b8c\u6574\u7684\u8cc7\u8a0a\u90a3\u5df2\u7d93\u5728code\u88e1\u4e86 \u7576\u4f60\u4f7f\u7528\u5716\u8868\u4f86\u505a\u958b\u59cbcoding\u524d\u7684\u8a2d\u8a08\u6642\uff0c\u8b39\u8a18\uff1a keep them short don't try to address all the details (just the important ones) treat the resulting design as a sketch, not as a final design UML\u7528\u5728\u9032\u884c\u4e2d\u6587\u6a94(on-going documentation)\u901a\u5e38\u6c92\u5565\u6548\u679c\uff0c\u56e0\u70ba\u8981\u7dad\u6301\u5b83\u7684\u66f4\u65b0\u5f88\u8f9b\u82e6\uff0c\u800c\u4e14\u4ed6\u85cf\u5728CASE tool\u88e1\u9762\u6c92\u4eba\u6703\u770b \u5982\u679c\u4f7f\u7528\u5728\u9032\u884c\u4e2d\u6587\u6a94\uff0c\u5efa\u8b70\uff1a Only use diagrams that you can keep up to date without noticeable pain Put the diagrams where everyone can easily see them. I like to post them on a wall. Encourage people to edit the wall copy with a pen for simple changes. Pay attention to whether people are using them, if not throw them away. UML\u7684\u53e6\u4e00\u500b\u4f7f\u7528\u60c5\u5883\u662f\u4ea4\u63a5\uff0c\u4e00\u6a23\u8a18\u5f97\u5716\u8868\u53ea\u662f\u5e6b\u52a9\u6e9d\u901a\u51f8\u986f\u91cd\u8981\u7684\u90e8\u5206\uff0c\u8a73\u7d30\u7684\u5167\u5bb9\u662f\u5728\u4f60\u7684\u7a0b\u5f0f\u78bc\u5eab","title":"UML and XP"},{"location":"Agile/Is%20Design%20Dead/#on-metaphor","text":"\u5b8c\u5168\u770b\u4e0d\u61c2 System Metaphor Definition: What ExtremeProgramming (XP) uses to unify an architecture and provide naming conventions. A simple shared story of how the system works, a metaphor. This story typically involves a handful of classes and patterns that shape the core flow of the system being built.","title":"On Metaphor"},{"location":"Agile/Is%20Design%20Dead/#do-you-wanna-be-an-architect-when-you-grow-up","text":"\u554f\u984c\u5728\u65bc\uff0c\u7576\u4f60\u60f3\u7df4\u7fd2\u6210\u70ba\u6280\u8853\u9818\u5c0e\u7684\u6642\u5019\uff0c\u4f60\u662f\u5426\u8a72\u4e1f\u68c4\u90a3\u4e9b\u958b\u767c\u65e5\u5e38? \u4e00\u4e9b\u53cd\u5c0dXP\u7684\u4eba\u8a8d\u70ba\u4ed6\u5011\u6700\u4e0d\u60f3\u8981\u958b\u767c\u4eba\u54e1\u91cd\u69cb\u548c\u4e82\u641e\u8a2d\u8a08\uff0c\u53ef\u662f\uff0c\u5982\u679c\u4f60\u4e0d\u4fe1\u4efb\u4f60\u7684\u958b\u767c\u4eba\u54e1\uff0c\u90a3\u4f60\u5e79\u561b\u96c7\u7528\u4ed6\u5011? XP\u7684\u7406\u5ff5\u662f\u7d93\u9a57\u8c50\u5bcc\u7684\u958b\u767c\u4eba\u54e1\u628a\u6280\u80fd\u50b3\u6388\u7d66\u8f03\u6c92\u7d93\u9a57\u7684\u958b\u767c\u4eba\u54e1\uff0c\u5354\u52a9\u4ed6\u5011\u505a\u6c7a\u5b9a\uff0c\u800c\u4e0d\u662f\u9760\u67b6\u69cb\u5e2b\u4e00\u500b\u4eba\u6c7a\u5b9a\u6240\u6709\u91cd\u8981\u7684\u4e8b","title":"Do you wanna be an Architect when you grow up?"},{"location":"Agile/Is%20Design%20Dead/#reversibility","text":"\u5982\u679c\u4f60\u53ef\u4ee5\u8f15\u6613\u6539\u8b8a\u4f60\u7684\u6c7a\u5b9a\uff0c\u90a3\u4f60\u7684\u6c7a\u5b9a\u662f\u5426\u6b63\u78ba\u5c31\u4e0d\u662f\u90a3\u9ebc\u91cd\u8981 evolutionary design\u5c31\u662f\u5728\u505a\u6c7a\u5b9a\u6642\u8981\u907f\u514d\u4e0d\u53ef\u9006\uff0c\u4e0d\u8ad6\u662f\u5ef6\u5f8c\u505a\u6c7a\u5b9a\u6216\u662f\u76f4\u63a5\u505a\u4fee\u6539\u4e0d\u6703\u592a\u56f0\u96e3\u7684\u6c7a\u5b9a \u9019\u5c31\u662f\u70ba\u4ec0\u9ebc\u654f\u6377\u5f37\u8abf\u4f60\u4e00\u5b9a\u8981\u6709\u7248\u63a7 \u53ef\u9006\u5f0f\u8a2d\u8a08\u4e5f\u53ef\u4ee5\u8b93\u554f\u984c\u5feb\u901f\u6d6e\u73fe\uff0c\u4f60\u53ef\u4ee5\u958b\u4e00\u689dbranch\u505a\u4e9b\u5be6\u9a57\u7136\u5f8c\u4e1f\u68c4","title":"Reversibility"},{"location":"Agile/Is%20Design%20Dead/#the-will-to-design","text":"evolutionary design\u9700\u8981\u6709\u4e00\u80a1\u6536\u6582\u4ed6\u7684\u529b\u91cf\uff0c\u4e0d\u7528\u662f\u6bcf\u500b\u4eba(\u5982\u679c\u662f\u90a3\u4e5f\u5f88\u597d)\uff0c\u901a\u5e38\u4e00\u6216\u4e8c\u500b\u5718\u968a\u6210\u54e1\u8ca0\u8cac\u6574\u500b\u8a2d\u8a08\u7684\u5b8c\u6574\u6027\uff0c\u9019\u4e5f\u662f\u4e00\u822c\u5728\u8aaa\u7684\"\u67b6\u69cb\u5e2b\"\u7684\u8cac\u4efb\u4e4b\u4e00 \u6301\u7e8c\u95dc\u6ce8code base\uff0c\u770b\u54ea\u88e1\u8b8a\u7cdf\u4e86\u4e26\u5728\u4ed6\u5931\u53bb\u63a7\u5236\u524d\u4fee\u6b63\u4ed6\uff0c\u4fee\u6b63\u4ed6\u7684\u4e0d\u4e00\u5b9a\u8981\u662f\u4fdd\u6301\u8a2d\u8a08\u7684\u4eba\uff0c\u4f46\u8981\u78ba\u4fdd\u6709\u4eba\u53bb\u4fee","title":"The Will to Design"},{"location":"Agile/Is%20Design%20Dead/#things-that-are-difficult-to-refactor-in","text":"XP\u8a8d\u70ba\u6240\u6709\u6771\u897f\u90fd\u61c9\u8a72\u8981\u80fd\u7c21\u55ae\u65b0\u589e\uff0c\u5c31\u7b97\u662f\u666e\u904d\u6027\u7684\u529f\u80fd\uff0c\u4f8b\u5982\u570b\u969b\u5316 \u7576\u4f60\u6c7a\u5b9a\u5728\u4e00\u958b\u59cb\u52a0\u5165\u570b\u969b\u5316\uff0c\u4e00\u9031\u53c8\u4e00\u9031\u5730\u6162\u6162\u5730\u65b0\u589e\u8207\u7dad\u8b77\uff0c\u4f60\u6703\u7121\u610f\u8b58\u5ffd\u7565\u4e86\u9019\u500b\u4e4b\u5f8c\u624d\u7528\u7684\u5230\u7684\u6771\u897f\u7684\u6210\u672c\uff0c\u800c\u4e14\u9084\u6709\u4e4b\u5f8c\u9700\u8981\u91cd\u69cb\u7684\u53ef\u80fd YAGNI\u7684\u90e8\u5206\u7406\u7531\u662f\u9019\u4e9b\u6f5b\u5728\u9700\u6c42\u5176\u5be6\u4f60\u6700\u5f8c\u90fd\u4e0d\u9700\u8981\uff0c\u6216\u8005\u4e0d\u662f\u4f60\u671f\u671b\u7684\u6a23\u5b50\uff0c\u800c\u91cd\u69cb\u6bd4\u505a\u51fa\u6240\u6709\u53ef\u80fd\u529f\u80fd\u82b1\u5730\u5de5\u5c11 \u5982\u679c\u4f60\u66fe\u7d93\u505a\u904e\u570b\u969b\u5316\uff0c\u90a3\u4f60\u5c31\u80fd\u6839\u64da\u6210\u672c\u4f86\u8a55\u65b7\u73fe\u5728\u505a\u9084\u662f\u4e4b\u5f8c\u518d\u505a\uff0c\u800c\u5982\u679c\u4f60\u6c92\u505a\u904e\uff0c\u4f60\u4e0d\u4f46\u6c92\u8fa6\u6cd5\u5224\u65b7\u6210\u672c\u4e5f\u4e0d\u77e5\u9053\u5982\u4f55\u505a\u597d\u4ed6\uff0c\u90a3\u4f60\u61c9\u8a72\u4e4b\u5f8c\u518d\u505a\uff0c\u90a3\u500b\u6642\u5019\u4f60\u7684\u5718\u968a\u5df2\u7d93\u66f4\u6709\u7d93\u9a57\uff0c\u66f4\u4e86\u89e3\u9019\u500b\u9818\u57df\uff0c\u66f4\u4e86\u89e3\u9700\u6c42 Kent\u8a8d\u70bastories\u88e1\u9762\u5546\u696d\u50f9\u503c\u662f\u552f\u4e00\u8981\u7d20\uff0c\u99ac\u4e01\u8a8d\u70ba\u61c9\u8a72\u4e5f\u8981\u6709\u4e00\u9ede\u6280\u8853\u98a8\u96aa","title":"Things that are difficult to refactor in"},{"location":"Agile/Is%20Design%20Dead/#is-design-happening","text":"evolutionary design\u6700\u56f0\u96e3\u7684\u4e00\u9ede\u662f\u5f88\u96e3\u5224\u65b7\u662f\u5426\u771f\u7684\u6709\u8a2d\u8a08\uff0c\u908a\u8a2d\u8a08\u908a\u958b\u767c\u5f88\u5bb9\u6613\u8b8a\u6210\u53ea\u6709\u958b\u767c\u6c92\u6709\u8a2d\u8a08 \u7576\u4f60\u767c\u73fecode base\u8b8a\u5f97\u8907\u96dc\u96e3\u904b\u4f5c\u7684\u6642\u5019\uff0c\u5c31\u4ee3\u8868\u7f3a\u4e4f\u8a2d\u8a08\uff0c\u4f46\u907a\u61be\u7684\u662f\u9019\u662f\u5f88\u4e3b\u89c0\u7684\uff0c\u6211\u5011\u6c92\u6709\u53ef\u9760\u7684\u6307\u6a19\u4f86\u5224\u65b7\u9019\u4ef6\u4e8b \u5c0d\u6280\u8853\u4eba\u54e1\u4f86\u8aaa\u5df2\u7d93\u4e0d\u5bb9\u6613\u4e86\uff0c\u5c0d\u975e\u6280\u8853\u4eba\u54e1\u66f4\u96e3\u8a55\u65b7\u4e00\u500b\u8edf\u9ad4\u662f\u5426\u8a2d\u8a08\u826f\u597d \u5169\u9ede\u5efa\u8b70\uff1a Listen to the technical people. If they are complaining about the difficulty of making changes, then take such complaints seriously and give them time to fix things. Keep an eye on how much code is being thrown away. A project that does healthy refactoring will be steadily deleting bad code. If nothing's getting deleted then it's almost certainly a sign that there isn't enough refactoring going on - which will lead to design degradation. However like any metric this can be abused, the opinion of good technical people trumps any metric, despite its subjectivity.","title":"Is Design Happening?"},{"location":"Agile/Is%20Design%20Dead/#so-is-design-dead","text":"Not by any means, but the nature of design has changed. XP design looks for the following skills A constant desire to keep code as clear and simple as possible Refactoring skills so you can confidently make improvements whenever you see the need. A good knowledge of patterns: not just the solutions but also appreciating when to use them and how to evolve into them. Designing with an eye to future changes, knowing that decisions taken now will have to be changed in the future. Knowing how to communicate the design to the people who need to understand it, using code, diagrams and above all: conversation.","title":"So is Design Dead?"},{"location":"Database/Advanced%20Database%20Design%20For%20a%20Relational%20DB%20w%20MySQL/","text":"Advanced Database Design For a Relational DB w/ MySQL naming conventions is important because you don't want to change that naming convention after you have a few people created already because then it's pure mess Database Design Essentials Understand the database's purpose (OLTP/OLAP?) Get the right tool (MySQL Workbench) Gather the requirements for the database (biz, tech, ops) Standardize the naming convention Enforce relationships (data integrity) Use the appropriate data types (use a variety of data types) Be conscientious when modeling the data (do what's right!) Include indexes when modeling Document your work & keep track of changes (GitHub repo) Common Database Design Mistakes Poor design/planning Ignoring normalization Poor naming standards Lack of documentation One table to hold all domain values Using identity columns are your ONLY key Not using SQL facilities to protect data integrity Trying to build generic objects (common reference table) Lack of testing Poor deployment workflow (lack of environments) Database Purpose what is the purpose of the database? transactional(OLTP) or anlytical database(OLAP)? OLTP: optimize for the speed of transactions OLAP: optimize for the speed of aggregate queries The OLTP disk access tends to be random disk access. (thus may get benefit from storage grids). On the other hand, OLAP operations tend to be long and resource intensive thus more contention risk. Furthermore, the OLAP disk access tends to be sequential. To avoid OLAP blocking the OLTP it's advisable to separate OLTP & OLAP processing , i.e. using a dedicated server only for OLAP operations or to defer OLAP operations to nightly/less intensive period. Best Practices Naming Convetions Michal: I think that the scrum is a little enemy for database design, because in database design things should not really change so fast because it's very cumbersome. table or column names always always in singular, so you don't spend time thinking of if it is user or users. Which Columns to Index How to choose which columns for index: The primary and foreign keys columns are candidates for index. Choose columns which not frequently updated , since index will degrade performance of DML (update, insert, delete) operations (due to index table maintenance). Choose columns which are used in order by / group by clauses since indexes will order the data to make these statements faster. If you use range in where clause (e.g. between) use this range columns when making clustered index. Use high selective / high cardinality columns. Order is matter when creating composite indexes: create highly selective indexes by using the most restrictive columns first. Avoid over indexing: Remove unused index For small table your don't need index If more than 10 percent of table must be examined you might better use full table scan instead of index When to Use a View Consider to use views in these cases: To limit columns/tables that a user can see due to security/privacy concerns. You might restrict the view query to read only and limit the rows return. To hide complex join , to represent a combination of tables. To give meaningful names . To absorb changes . When the data model in database changes, the application can still use the same query if we modify the view definition. Use Artifical Keys artifical key is a little bit better than natural since you don't need to worry about the number could be changed Use Integrity Checks As Much As You Can Domain tables (reference tables) are effective for enforcing integrity. They work well when there are many values to be checked against, or the values to be checked are frequently changing. A common misconception is to think that the application should check integrity. The issue here is that a central database might be accessed by many applications. Also, you generally want to protect the data where it is: in the database. If the possible values are limited or in a range, then a check constraint may be preferable. Let\u2019s say that messages are defined as either Incoming or Outgoing, in which case there is no need for a foreign key. But, for something like valid currencies, while these may seem static, they actually change from time-to-time. Countries join a currency union and currencies change. Applications should also perform integrity checks, but don\u2019t rely only on the application for integrity checking. Defining integrity rules on the database ensures that those rules will never be violated. In this way, the data satisfies the defined integrity rules at all times. Don't Have All Columns NULLable Within the database columns definitions good data domains, ranges and values should be analyzed, evaluated and prototyped for the business application. Having good default values, a limited scope of values and always a value are best for performance and application logic. NULLable columns are only good when data is unknown or doesn\u2019t have a value yet. Someone\u2019s death date data is the classic example of a NULLable column because it is unknown unless they are already dead. Make sure your database design represents data that is known and only uses a minimum of NULLable columns. Make Sure You Understand Database Normalization Your OLTP database should be well normalized - using at least third normal form and maybe even up to fifth normal form is the starting critical evaluation criteria. The reason the database design normalization processes have been endorsed forever is because they are effective for identifying all the insert, update and delete data anomalies and support the integrity of the application data.","title":"Advanced Database Design For a Relational DB w/ MySQL"},{"location":"Database/Advanced%20Database%20Design%20For%20a%20Relational%20DB%20w%20MySQL/#advanced-database-design-for-a-relational-db-w-mysql","text":"naming conventions is important because you don't want to change that naming convention after you have a few people created already because then it's pure mess","title":"Advanced Database Design For a Relational DB w/ MySQL"},{"location":"Database/Advanced%20Database%20Design%20For%20a%20Relational%20DB%20w%20MySQL/#database-design-essentials","text":"Understand the database's purpose (OLTP/OLAP?) Get the right tool (MySQL Workbench) Gather the requirements for the database (biz, tech, ops) Standardize the naming convention Enforce relationships (data integrity) Use the appropriate data types (use a variety of data types) Be conscientious when modeling the data (do what's right!) Include indexes when modeling Document your work & keep track of changes (GitHub repo)","title":"Database Design Essentials"},{"location":"Database/Advanced%20Database%20Design%20For%20a%20Relational%20DB%20w%20MySQL/#common-database-design-mistakes","text":"Poor design/planning Ignoring normalization Poor naming standards Lack of documentation One table to hold all domain values Using identity columns are your ONLY key Not using SQL facilities to protect data integrity Trying to build generic objects (common reference table) Lack of testing Poor deployment workflow (lack of environments)","title":"Common Database Design Mistakes"},{"location":"Database/Advanced%20Database%20Design%20For%20a%20Relational%20DB%20w%20MySQL/#database-purpose","text":"what is the purpose of the database? transactional(OLTP) or anlytical database(OLAP)? OLTP: optimize for the speed of transactions OLAP: optimize for the speed of aggregate queries The OLTP disk access tends to be random disk access. (thus may get benefit from storage grids). On the other hand, OLAP operations tend to be long and resource intensive thus more contention risk. Furthermore, the OLAP disk access tends to be sequential. To avoid OLAP blocking the OLTP it's advisable to separate OLTP & OLAP processing , i.e. using a dedicated server only for OLAP operations or to defer OLAP operations to nightly/less intensive period.","title":"Database Purpose"},{"location":"Database/Advanced%20Database%20Design%20For%20a%20Relational%20DB%20w%20MySQL/#best-practices","text":"","title":"Best Practices"},{"location":"Database/Advanced%20Database%20Design%20For%20a%20Relational%20DB%20w%20MySQL/#naming-convetions","text":"Michal: I think that the scrum is a little enemy for database design, because in database design things should not really change so fast because it's very cumbersome. table or column names always always in singular, so you don't spend time thinking of if it is user or users.","title":"Naming Convetions"},{"location":"Database/Advanced%20Database%20Design%20For%20a%20Relational%20DB%20w%20MySQL/#which-columns-to-index","text":"How to choose which columns for index: The primary and foreign keys columns are candidates for index. Choose columns which not frequently updated , since index will degrade performance of DML (update, insert, delete) operations (due to index table maintenance). Choose columns which are used in order by / group by clauses since indexes will order the data to make these statements faster. If you use range in where clause (e.g. between) use this range columns when making clustered index. Use high selective / high cardinality columns. Order is matter when creating composite indexes: create highly selective indexes by using the most restrictive columns first. Avoid over indexing: Remove unused index For small table your don't need index If more than 10 percent of table must be examined you might better use full table scan instead of index","title":"Which Columns to Index"},{"location":"Database/Advanced%20Database%20Design%20For%20a%20Relational%20DB%20w%20MySQL/#when-to-use-a-view","text":"Consider to use views in these cases: To limit columns/tables that a user can see due to security/privacy concerns. You might restrict the view query to read only and limit the rows return. To hide complex join , to represent a combination of tables. To give meaningful names . To absorb changes . When the data model in database changes, the application can still use the same query if we modify the view definition.","title":"When to Use a View"},{"location":"Database/Advanced%20Database%20Design%20For%20a%20Relational%20DB%20w%20MySQL/#use-artifical-keys","text":"artifical key is a little bit better than natural since you don't need to worry about the number could be changed","title":"Use Artifical Keys"},{"location":"Database/Advanced%20Database%20Design%20For%20a%20Relational%20DB%20w%20MySQL/#use-integrity-checks-as-much-as-you-can","text":"Domain tables (reference tables) are effective for enforcing integrity. They work well when there are many values to be checked against, or the values to be checked are frequently changing. A common misconception is to think that the application should check integrity. The issue here is that a central database might be accessed by many applications. Also, you generally want to protect the data where it is: in the database. If the possible values are limited or in a range, then a check constraint may be preferable. Let\u2019s say that messages are defined as either Incoming or Outgoing, in which case there is no need for a foreign key. But, for something like valid currencies, while these may seem static, they actually change from time-to-time. Countries join a currency union and currencies change. Applications should also perform integrity checks, but don\u2019t rely only on the application for integrity checking. Defining integrity rules on the database ensures that those rules will never be violated. In this way, the data satisfies the defined integrity rules at all times.","title":"Use Integrity Checks As Much As You Can"},{"location":"Database/Advanced%20Database%20Design%20For%20a%20Relational%20DB%20w%20MySQL/#dont-have-all-columns-nullable","text":"Within the database columns definitions good data domains, ranges and values should be analyzed, evaluated and prototyped for the business application. Having good default values, a limited scope of values and always a value are best for performance and application logic. NULLable columns are only good when data is unknown or doesn\u2019t have a value yet. Someone\u2019s death date data is the classic example of a NULLable column because it is unknown unless they are already dead. Make sure your database design represents data that is known and only uses a minimum of NULLable columns.","title":"Don't Have All Columns NULLable"},{"location":"Database/Advanced%20Database%20Design%20For%20a%20Relational%20DB%20w%20MySQL/#make-sure-you-understand-database-normalization","text":"Your OLTP database should be well normalized - using at least third normal form and maybe even up to fifth normal form is the starting critical evaluation criteria. The reason the database design normalization processes have been endorsed forever is because they are effective for identifying all the insert, update and delete data anomalies and support the integrity of the application data.","title":"Make Sure You Understand Database Normalization"},{"location":"Database/MySQL%20%E8%B6%85%E6%96%B0%E6%89%8B%E5%85%A5%E9%96%80/","text":"MySQL \u8d85\u65b0\u624b\u5165\u9580 MySQL \u8d85\u65b0\u624b\u5165\u9580 SELECT \u57fa\u790e\u67e5\u8a62 \u67e5\u8a62\u5b50\u53e5\u9806\u5e8f SELECT FROM WHERE GROUP BY HAVING ORDER BY LIMIT \u6307\u5b9a\u4f7f\u7528\u4e2d\u8cc7\u6599\u5eab: USE \uff0c\u5982\u679c\u4f7f\u7528UI\u901a\u5e38\u7528\u4e0d\u5230\u9019\u6307\u4ee4 \u4e0d\u7528 USE \u53ef\u4ee5\u7528 DatabaseName.TableName SELECT \u55ae\u7368\u4f7f\u7528\u53ef\u4ee5\u7576print\u4f7f\u7528 \u53ef\u4ee5\u4f7f\u7528\u5225\u540d\u5728SELECT\u4e4b\u5f8c\uff0c\u4f7f\u7528 AS \u6216 \u7a7a\u683c \u63a5\u4e0a\u60f3\u8981\u53d6\u7684\u540d\u7a31 \u4e00\u4e9b\u7279\u6b8a\u5be6\u7528\u7684\u7684\u689d\u4ef6\u904b\u7b97\u5b50\uff1a BETWEEN...AND... , IN(...) , IS BETWEEN...AND... \u662f\u5305\u542b(>=,<=) NULL\u8981\u7528 IS \u6216 <=> \u5224\u65b7\u4e0d\u80fd\u76f4\u63a5\u4f7f\u7528 = \uff0c\u4e0d\u7b49\u65bc\u4f7f\u7528 IS NOT LIKE \u5c08\u9580\u8655\u7406\u5b57\u4e32\uff0c\u5f8c\u9762\u63a5 %\uff1a0\u5230\u591a\u500b\u4efb\u4f55\u5b57\u5143 _ \uff1a\u4e00\u500b\u4efb\u4f55\u5b57\u5143 LIMIT \u9664\u4e86\u56de\u50b3\u9650\u5236\u5916\u53ef\u4ee5\u7d66\u5169\u500b\u6578\u5b57\u7b2c\u4e00\u500b\u4ee3\u8868\u8df3\u904e\u5e7e\u7b46 \u904b\u7b97\u5f0f\u8207\u51fd\u5f0f \u503c\u8207\u904b\u7b97\u5f0f \u6578\u503c\uff1a\u53ef\u4ee5\u7528\u4f86\u57f7\u884c\u7b97\u6578\u904b\u7b97\u7684\u6578\u503c\uff0c\u5305\u542b\u6574\u6578\u8207\u5c0f\u6578\uff0c\u5206\u70ba\u7cbe\u78ba\u503c\u8207\u8fd1\u4f3c\u503c\u5169\u7a2e \u5b57\u4e32\uff1a\u4f7f\u7528\u55ae\u5f15\u865f\u6216\u96d9\u5f15\u865f\u5305\u570d\u7684\u6587\u5b57 \u65e5\u671f/\u6642\u9593\uff1a\u4f7f\u7528\u55ae\u5f15\u865f\u6216\u96d9\u5f15\u865f\u5305\u570d\u7684\u65e5\u671f\u6216\u6642\u9593 \u7a7a\u503c\uff1a\u4f7f\u7528\u300cNULL\u300d\u8868\u793a\u7684\u503c \u5e03\u6797\u503c\uff1a\u300cTRUE\u300d\u6216\u300c1\u300d\u8868\u793a\u300c\u771f\u300d\uff0c\u300cFALSE\u300d\u6216\u300c0\u300d\u8868\u793a\u300c\u5047\u300d \u5982\u679c\u4f60\u62ff\u5b57\u4e32\u4f86\u57f7\u884c\u7b97\u6578\u904b\u7b97\u7684\u8a71\uff0cMySQL\u6703\u5148\u628a\u5b57\u4e32\u4e2d\u7684\u5167\u5bb9\u8f49\u63db\u70ba\u6578\u5b57\uff0c\u7136\u5f8c\u518d\u57f7\u884c\u7b97\u6578\u904b\u7b97 \u65e5\u671f\u53ef\u4ee5\u7528\u95dc\u9375\u5b57 INTERVAL \u904b\u7b97 NULL\u503c\u8207\u5176\u5b83\u4efb\u4f55\u503c\u90fd\u4e0d\u4e00\u6a23\uff0c\u5305\u542bNULL\u81ea\u5df1 \u770b\u5230 () \u4ed6\u5c31\u662f\u51fd\u5f0f \u5b57\u4e32\u8655\u7406\uff1a\u5927\u5c0f\u5beb\u3001\u4e32\u63a5\u3001TRIM\u3001REPLACE... \u6578\u5b78\uff1aROUND\u3001CEIL\u3001FLOOR... \u65e5\u671f\u6642\u9593\uff1a\u76ee\u524d\u65e5\u671f\u3001\u5e74\u6708\u65e5\u3001\u52a0\u6e1b\u4e58\u9664... \u6d41\u7a0b\u63a7\u5236\uff1a IF(\u689d\u4ef6, \u904b\u7b97\u5f0f1, \u904b\u7b97\u5f0f2) \u8ddf\u4e09\u5143\u904b\u7b97\u5b50\u670987%\u50cf CASE WHEN THEN \u4e00\u500b\u689d\u4ef6\u4e0d\u7528\u5920\u7528\u7684\u6642\u5019...(\u7136\u5f8c\u9019\u8ddfswitch\u670987%\u50cf) \u5176\u4ed6\uff1aIFNULL()\u3001ISNULL \u7fa4\u7d44\u67e5\u8a62 \u7fa4\u7d44\u51fd\u5f0f\uff1a MAX(\u904b\u7b97\u5f0f)\uff1a\u6700\u5927\u503c MIN(\u904b\u7b97\u5f0f)\uff1a\u6700\u5c0f\u503c SUM(\u904b\u7b97\u5f0f)\uff1a\u5408\u8a08 AVG(\u904b\u7b97\u5f0f)\uff1a\u5e73\u5747 COUNT([DISTINCT]*|\u904b\u7b97\u5f0f)\uff1a\u4f7f\u7528\u300cDISTINCT\u300d\u6642\uff0c\u91cd\u8907\u7684\u8cc7\u6599\u4e0d\u6703\u8a08\u7b97\uff1b\u4f7f\u7528[*]\u6642\uff0c\u8a08\u7b97\u8868\u683c\u7d00\u9304\u7684\u6578\u91cf\uff1a\u4f7f\u7528[\u904b\u7b97\u5f0f]\u6642\uff0c\u8a08\u7b97\u7684\u6578\u91cf\u4e0d\u6703\u5305\u542b\u300cNULL\u300d\u503c COUNT() \u88e1\u9762\u585e\u6b04\u4f4d\u540d\u7a31\u7684\u8a71\uff0cNULL\u4e0d\u6703\u88ab\u8a08\u7b97 GROUP_CONCAT \u662f\u7528\u4f86\u4e32\u63a5\u5b57\u4e32\u8cc7\u6599\u7684\u51fd\u5f0f GROUP_CONCAT( [DISTINCT] \u904b\u7b97\u5f0f [\u6392\u5e8f\u8a2d\u5b9a] [SEPARATOR \u904b\u7b97\u5f0f] ) GROUP BY\u8207HAVING\u5b50\u53e5 \u5728\u4e0a\u5217\u4f7f\u7528\u7fa4\u7d44\u51fd\u5f0f\u7684\u6240\u6709\u7bc4\u4f8b\u4e2d\uff0c\u90fd\u662f\u5c07\u300cFROM\u300d\u5b50\u53e5\u4e2d\u6307\u5b9a\u7684\u8868\u683c\u7576\u6210\u662f\u4e00\u6574\u500b\u300c\u7fa4\u7d44\u300d\uff0c\u7fa4\u7d44\u51fd\u5f0f\u6240\u8655\u7406\u7684\u8cc7\u6599\u662f\u8868\u683c\u4e2d\u6240\u6709\u7684\u7d00\u9304\u3002\u5982\u679c\u5e0c\u671b\u4f9d\u7167\u6307\u5b9a\u7684\u8cc7\u6599\u4f86\u8a08\u7b97\u5206\u7d44\u7d71\u8a08\u8207\u5206\u6790\u8cc7\u8a0a\uff0c\u4f7f\u7528 GROUP BY GROUP BY {\u6b04\u4f4d|\u904b\u7b97\u5f0f|\u4f4d\u7f6e\u7de8\u865f} [ASC|DESC] [WITH ROLLUP] [,...] HAVING \u5206\u7d44\u689d\u4ef6 \u53ef\u4ee5GROUP BY\u591a\u500b\u6b04\u4f4d\uff0c\u610f\u601d\u662f\u7167\u9806\u5e8f\u5206\u7d44 \u4f7f\u7528\u300cGROUP BY\u300d\u6307\u5b9a\u7fa4\u7d44\u7684\u8a2d\u5b9a\u4ee5\u5f8c\uff0c\u56de\u50b3\u7684\u7fa4\u7d44\u67e5\u8a62\u8cc7\u6599\u90fd\u6703\u4f9d\u7167\u6307\u5b9a\u7684\u7fa4\u7d44\u6392\u5e8f\uff0c\u9810\u8a2d\u5b9a\u6392\u5e8f\u65b9\u5f0f\u662f\u905e\u589e\u6392\u5e8f\uff0c\u4f7f\u7528\u300cDESC\u300d\u95dc\u9375\u5b57\u53ef\u4ee5\u6307\u5b9a\u6392\u5e8f\u7684\u65b9\u5f0f\u70ba\u905e\u6e1b\u6392\u5e8f \u4f7f\u7528\u300cGROUP BY\u300d\u5b50\u53e5\u7684\u6642\u5019\u53ef\u4ee5\u642d\u914d\u300cWITH ROLLUP\u300d\uff0c\u6548\u679c\u6703\u4f5c\u7528\u5728\u67e5\u8a62\u4e2d\u7684\u6bcf\u4e00\u500b\u7fa4\u7d44\u51fd\u5f0f\uff0c\u529f\u7528\u5f0f\u7d71\u8a08\u6240\u6709\u6578\u91cf \u5728\u300cGROUP BY\u300d\u5b50\u53e5\u4e2d\u6709\u591a\u500b\u7fa4\u7d44\u8a2d\u5b9a\u7684\u6642\u5019\uff0c\u4f60\u53ef\u4ee5\u5728\u6700\u5f8c\u9762\u52a0\u5165\u300cWITH ROLLUP\u300d \u5305\u542b\u7fa4\u7d44\u51fd\u5f0f\u7684\u689d\u4ef6\u8a2d\u5b9a\u5c31\u4e00\u5b9a\u8981\u653e\u5728\u300cHAVING\u300d\u5b50\u53e5\u4e2d SELECT\u4e86\u6c92\u6709\u51fa\u73fe\u5728GROUP BY\u7684\u6b04\u4f4d\u884c\u70ba\u6703\u5f88\u5947\u602a\uff0c\u4f46MySQL\u4e0d\u6703\u5831\u932f\uff0c\u6709\u8a2d\u5b9a\u53ef\u4ee5\u8a2d ONLY_FULL_GROUP_BY \u5f37\u5236\u6c92\u6709\u4f7f\u7528\u7fa4\u7d44\u51fd\u5f0f\u7684\u6b04\u4f4d\u4e00\u5b9a\u8981\u5168\u90e8\u51fa\u73fe\u5728GROUP BY\u4e2d\uff0c\u4e0d\u7136\u6703\u5831\u932f JOIN \u8207 UNION \u67e5\u8a62 Inner Join SELECT \u8868\u500b\u540d\u7a31.\u6b04\u4f4d\u540d\u7a31[,\u8868\u500b\u540d\u7a31.\u6b04\u4f4d\u540d\u7a31...] FROM \u8868\u500b\u540d\u7a31 [AS] [\u8868\u683c\u5225\u540d][,\u8868\u500b\u540d\u7a31 [AS] [\u8868\u683c\u5225\u540d]...] WHERE \u7d50\u5408\u689d\u4ef6 \u61f6\u4eba\u5beb\u6cd5 SELECT \u8868\u500b\u540d\u7a31.\u6b04\u4f4d\u540d\u7a31[,\u8868\u500b\u540d\u7a31.\u6b04\u4f4d\u540d\u7a31...] FROM \u8868\u500b\u540d\u7a31 [INNER] JOIN \u8868\u500b\u540d\u7a31 ON \u7d50\u5408\u689d\u4ef6 \u7576\u4e0d\u540cTable\u800c\u6b04\u4f4d\u540d\u7a31\u4e00\u6a23\u6642\u53ef\u4ee5\u66f4\u61f6 SELECT \u8868\u500b\u540d\u7a31.\u6b04\u4f4d\u540d\u7a31[,\u8868\u500b\u540d\u7a31.\u6b04\u4f4d\u540d\u7a31...] FROM \u8868\u500b\u540d\u7a31 [INNER] JOIN \u8868\u500b\u540d\u7a31 USING (\u7d50\u5408\u6b04\u4f4d...) Outer Join SELECT \u8868\u683c\u540d\u7a31.\u6b04\u4f4d\u540d\u7a31[,\u8868\u683c\u540d\u7a31.\u6b04\u4f4d\u540d\u7a31...] FROM \u8868\u683c\u540d\u7a31 {LEFT | RIGHT} [OUTER] JOIN \u8868\u683c\u540d\u7a31 {ON \u7d50\u5408\u689d\u4ef6 | USING (\u7d50\u5408\u6b04\u4f4d...)} right or left join\u5c31\u662f\u770b\u54ea\u908a\u9700\u8981 \u53e6\u4e00\u908a \u6c92\u503c\u5f97\u6642\u5019\u4e5f\u51fa\u73fe Union join\u662f\u4e00\u500b\u67e5\u8a62\u4f7f\u7528\u591a\u500btable\uff0c\u800cunion\u5c31\u662f\u628a\u4e00\u500b\u4ee5\u4e0a\u7684\u67e5\u8a62\u5408\u4f75\uff0c\u807d\u8d77\u4f86\u5c31\u4e0d\u662f\u500b\u597d\u4e3b\u610f \u6b04\u4f4d\u540d\u7a31\u548c\u6578\u91cf\u8981\u4e00\u6a23(\u7684\u6a23\u5b50?) CRUD \u8207\u8cc7\u6599\u7dad\u8b77 DESCRIBE \u6216 DESC \u662f\u5c08\u5c6c\u65bcMySQL\u7684\u6307\u4ee4\uff0c\u53d6\u5f97Table\u7d50\u69cb\u8cc7\u8a0a \u6b04\u4f4d\u662f\u6709\u9806\u5e8f\u7684\uff0c DESC \u73a9\u7531\u4e0a\u81f3\u4e0b\u5c31\u662f\u4ed6\u7684\u6b04\u4f4d\u9806\u5e8f \u65b0\u589e \u57fa\u790e\u65b0\u589e\u6558\u8ff0 \u6309\u6b04\u4f4d\u9806\u5e8f\u5728\u8868\u683c\u65b0\u589e\u4e00\u7b46\u8cc7\u6599 INSERT [INTO] \u8868\u683c\u540d\u7a31 VALUES ( \u904b\u7b97\u5f0f | DEFAULT,...) \u7576\u4f60\u5fd8\u8a18\u9806\u5e8f\u7684\u6642\u5019\u53ef\u4ee5\u7528\uff0c\u6b64\u7a2e\u65b9\u5f0f\u6c92\u6709\u5beb\u51fa\u7684\u6b04\u4f4d\u6703\u4f7f\u7528default INSERT [INTO] \u8868\u683c\u540d\u7a31 [(\u6b04\u4f4d\u540d\u7a31,...)] VALUES ( \u904b\u7b97\u5f0f | DEFAULT,...) \u5168\u6b04\u4f4ddefault INSERT [INTO] \u8868\u683c\u540d\u7a31 () VALUES () \u53e6\u4e00\u7a2e\u5beb\u6cd5\uff0c\u611f\u89ba\u6bd4\u8f03\u597d\u8b80 INSERT [INTO] \u8868\u683c\u540d\u7a31 SET \u6b04\u4f4d\u540d\u7a31 = \u904b\u7b97\u5f0f|DEFAULT [,...] \u4e00\u6b21\u65b0\u589e\u591a\u7b46\uff0c\u7c21\u55ae\u4f86\u8aaa\u5c31\u662f VALUES \u5f8c\u9762\u52a0\u4e0a,() INSERT [INTO] \u8868\u683c\u540d\u7a31 [(\u6b04\u4f4d\u540d\u7a31,...)] VALUES ( \u904b\u7b97\u5f0f | DEFAULT,...)[,...] Primary Key \u5728\u8a2d\u8a08\u8868\u683c\u7684\u6642\u5019\uff0c\u901a\u5e38\u6703\u8996\u9700\u8981\u6307\u5b9a\u8868\u683c\u4e2d\u7684\u67d0\u4e00\u500b\u6b04\u4f4d\u70ba\u300c\u4e3b\u7d22\u5f15\u300d\u6b04\u4f4d \u4f60\u53ef\u4ee5\u5728\u4f7f\u7528 INSERT \u6558\u8ff0\u7684\u6642\u5019\uff0c\u52a0\u5165 IGNORE \u95dc\u9375\u5b57\uff0c\u5b83\u53ef\u4ee5\u5728\u57f7\u884c\u4e00\u500b\u9055\u53cd\u4e3b\u7d22\u5f15\u898f\u5b9a\u7684\u65b0\u589e\u6558\u8ff0\u6642\uff0c\u81ea\u52d5\u5ffd\u7565\u65b0\u589e\u7684\u52d5\u4f5c\uff0c\u9019\u6a23\u5c31\u4e0d\u6703\u7522\u751f\u932f\u8aa4\u8a0a\u606f ON DUPLICATE KEY UPDATE \u4f7f\u7528 INSERT \u6558\u8ff0\u65b0\u589e\u7d00\u9304\u7684\u6642\u5019\uff0c\u9084\u53ef\u4ee5\u8996\u9700\u8981\u5728\u6700\u5f8c\u642d\u914d\u4e00\u4e32\u95dc\u9375\u5b57 ON DUPLICATE KEY UPDATE \uff0c\u5b83\u53ef\u4ee5\u7528\u4f86\u6307\u5b9a\u5728\u9055\u53cd\u91cd\u8907\u7d22\u5f15\u503c\u7684\u898f\u5b9a\u6642\u8981\u57f7\u884c\u7684\u4fee\u6539 INSERT ... ON DUPLICATE KEY UPDATE \u6b04\u4f4d=\u904b\u7b97\u5f0f[,...] \u300cREPLACE\u300d\u6558\u8ff0 \u9664\u4e86\u4f7f\u7528\u300cINSERT\u300d\u6558\u8ff0\u65b0\u589e\u7d00\u9304\u5916\uff0c\u300cREPLACE\u300d\u6558\u8ff0\u540c\u6a23\u53ef\u4ee5\u65b0\u589e\u7d00\u9304\uff0c\u5b83\u5011\u7684\u8a9e\u6cd5\u5e7e\u4e4e\u76f8\u540c\uff1a REPLACE [INTO] \u8868\u683c\u540d\u7a31 [(\u6b04\u4f4d\u540d\u7a31,...)] VALUES ( \u904b\u7b97\u5f0f | DEFAULT,...) REPLACE [INTO] \u8868\u683c\u540d\u7a31 SET \u6b04\u4f4d\u540d\u7a31 = \u904b\u7b97\u5f0f|DEFAULT [,...] \u5c31\u662f\u7576Key\u4e00\u6a23\u6642\u76f4\u63a5\u53d6\u4ee3 \u4fee\u6539 UPDATE [IGNORE] \u8868\u683c\u540d\u7a31 SET \u6b04\u4f4d\u540d\u7a31 = \u904b\u7b97\u5f0f|DEFAULT [,...] [WHERE \u689d\u4ef6] [ORDER BY \u6392\u5e8f] [LIMIT \u9650\u5236] \u4e00\u5b9a\u8981\u6ce8\u610f\u6c92\u4e0bwhere\u5c31\u6703\u8b8a\u6210\u5168\u6b04\u4f4d... \u4e00\u6a23\u53ef\u4e0b IGNORE \u5ffd\u7565\u7d22\u5f15\u9375\u932f\u8aa4 \u5982\u679c IGNORE \u5ffd\u7565\u7684\u662f\u8f49\u578b\u932f\u8aa4\u6703\u6709\u610f\u60f3\u4e0d\u5230\u7684\u9a5a\u559c(\u96f7\u7206) \u642d\u914d ORDER BY \u8207 LIMIT \u7bc4\u4f8b\uff1a\u5e6b\u85aa\u6c34\u6700\u4f4e\u7684\u4e09\u500b\u6708\u516c\u52a0\u85aa \u522a\u9664 DELETE [IGNORE] FROM \u8868\u683c\u540d\u7a31 [WHERE \u689d\u4ef6] [ORDER BY \u6392\u5e8f] [LIMIT \u9650\u5236] \u300cTRUNCATE\u300d\u6558\u8ff0\u5728\u57f7\u884c\u522a\u9664\u7d00\u9304\u7684\u6642\u5019\uff0c\u6703\u6bd4\u4f7f\u7528\u300cDELETE\u300d\u6558\u8ff0\u7684\u6548\u7387\u597d\u4e00\u4e9b\uff0c\u5c24\u5176\u662f\u8868\u683c\u4e2d\u7684\u7d00\u9304\u975e\u5e38\u591a\u7684\u6642\u5019\u6703\u66f4\u660e\u986f\u3002 TRUNCATE [TABLE] \u8868\u683c\u540d\u7a31 \u300cTRUNCATE\u300d\u6558\u8ff0\u5728\u57f7\u884c\u522a\u9664\u7d00\u9304\u7684\u6642\u5019\uff0c\u6703\u6bd4\u4f7f\u7528\u300cDELETE\u300d\u6558\u8ff0\u7684\u6548\u7387\u597d\u4e00\u4e9b\uff0c\u5c24\u5176\u662f\u8868\u683c\u4e2d\u7684\u7d00\u9304\u975e\u5e38\u591a\u7684\u6642\u5019\u6703\u66f4\u660e\u986f\u3002 \u5b57\u5143\u96c6\u8207\u8cc7\u6599\u5eab Character Set\u8207Collation Character Set(\u5b57\u5143\u96c6)\u5c31\u662f\u7de8\u78bc Collation(or binary collation)\u662f\u5b57\u5143\u5927\u5c0f\u6392\u5e8f\u898f\u5247 \u53ef\u4ee5\u770b\u8cc7\u6599\u5eab\u652f\u63f4\u7684\u5b57\u5143\u96c6 SHOW CHARACTER SET \u6bcf\u7a2e\u5b57\u5143\u96c6\u53ef\u4ee5\u642d\u914d\u4e0d\u540c\u7684Collation\uff0c\u540c\u6a23\uff1a SHOW COLLATION \u8cc7\u6599\u5eab \u6bcf\u500b\u8cc7\u6599\u5eab\u90fd\u6703\u628a\u8cc7\u6599\u5b58\u5728 \u8cc7\u6599\u5eab\u8cc7\u6599\u593e \u4e2d \u96d6\u7136MySQL\u5c0d\u65bc\u8cc7\u6599\u5eab\u7684\u6578\u91cf\u4e26\u6c92\u6709\u9650\u5236\uff0c\u53ef\u662f\u4f60\u8981\u6ce8\u610fMySQL\u8cc7\u6599\u5eab\u4f3a\u670d\u5668\u8edf\u9ad4\u6240\u5b89\u88dd\u7684\u4f5c\u696d\u7cfb\u7d71\uff0c\u5b83\u5c0d\u65bc\u8cc7\u6599\u593e\u8207\u6a94\u6848\u5927\u5c0f\u7684\u9650\u5236\u3002 MySQL\u4f7f\u7528\u8cc7\u6599\u5eab\u540d\u7a31\u4f5c\u70ba\u8cc7\u6599\u5eab\u8cc7\u6599\u593e\u7684\u540d\u7a31\uff0c\u6240\u4ee5\u4f60\u8981\u7279\u5225\u6ce8\u610f\u5927\u5c0f\u5beb\u7684\u554f\u984c\u3002\u5728\u8cc7\u6599\u593e\u540d\u7a31\u4e0d\u5206\u5927\u5c0f\u5beb\u7684\u4f5c\u696d\u7cfb\u7d71(\u4f8b\u5982Windows)\uff0c\u8cc7\u6599\u5eab\u540d\u7a31\u300cMyDB\u300d\u548c\u300cmydb\u300d\u662f\u4e00\u6a23\u7684\uff1b\u53ef\u662f\u5728\u8cc7\u6599\u593e\u540d\u7a31\u6703\u5340\u5206\u5927\u5c0f\u5beb\u7684\u4f5c\u696d\u7cfb\u7d71(\u4f8b\u5982Linux)\uff0c\u8cc7\u6599\u5eab\u540d\u7a31\u300cMyDB\u300d\u548c\u300cmydb\u300d\u5c31\u4e0d\u4e00\u6a23\u4e86\u3002 \u6bcf\u4e00\u500b\u8cc7\u6599\u5eab\u8cc7\u6599\u593e\u4e2d\u90fd\u6709\u4e00\u500b\u7279\u5225\u7684\u6a94\u6848\uff0c\u6a94\u6848\u540d\u7a31\u662f\u300cdb.opt\u300d\uff0c\u9019\u500b\u6a94\u6848\u7684\u5167\u5bb9\u662f\u8cc7\u6599\u5eab\u7684\u5b57\u5143\u96c6\u8207collation\u8a2d\u5b9a\u3002 \u8a3b\uff1aMySQL\u628a\u300cDATABASE\u300d\u8207\u300cSCHEMA\u300d\u7576\u6210\u662f\u4e00\u6a23\u7684\uff0c\u6240\u6709\u4f60\u5728\u5f8c\u7e8c\u4f7f\u7528\u7684\u6307\u4ee4\uff0c\u90fd\u53ef\u4ee5\u628a\u300cDATABASE\u300d\u63db\u6210\u300cSCHEMA\u300d\u3002 \u5efa\u7acb\u53ef\u4ee5\u7528 IF NOT EXISTS \u6aa2\u67e5\uff0c\u522a\u9664\u53ef\u4ee5\u7528 IF EXISTS \u6aa2\u67e5 \u5efa\u7acb\u8cc7\u6599\u5eab\u6642\u53ef\u4ee5\u540c\u6642\u6307\u5b9a\u5b57\u5143\u96c6\u8207collation\uff0c\u4e5f\u53ef\u4ee5\u90fd\u4e0d\u6307\u5b9a\u6216\u53ea\u6307\u5b9a\u4e00\u500b\uff0c\u6c92\u88ab\u6307\u5b9a\u7684\u6703\u4f7f\u7528default\u3002 \u5efa\u7acb\u4e86\u4e4b\u5f8c\u9084\u662f\u53ef\u4ee5\u4fee\u6539\u5b57\u5143\u96c6\u6216\u662fcollation\uff0c\u4f46\u4e0d\u6703\u5f71\u97ff\u5df2\u7d93\u5b58\u5728\u7684table \u522a\u9664\u6703\u76f4\u63a5\u63b0\u63b0\uff0c\u4e0d\u6703\u518d\u554f\u4f60\u8981\u4e0d\u8981\u522a\u9664\uff0c\u6a94\u6848\u4e5f\u6703\u63b0 \u53d6\u5f97\u6240\u6709\u8cc7\u6599\u5eab\u540d\u7a31\uff1a SHOW DATABASE \u6216 SHOW SCHEMAS \u53d6\u5f97\u5efa\u7acb\u8cc7\u6599\u5eab\u7684sql\uff1a SHOW CREATE DATABASE mydb MySQL\u8cc7\u6599\u5eab\u4f3a\u670d\u5668\u6709\u4e00\u500b\u5f88\u91cd\u8981\u7684\u8cc7\u6599\u5eab\uff0c\u540d\u7a31\u70ba\u300cinformation_schema\u300d\uff0c\u9019\u500b\u8cc7\u6599\u5eab\u901a\u5e38\u6703\u628a\u5b83\u7a31\u70ba\u300c\u7cfb\u7d71\u8cc7\u6599\u5eab\u300d\uff0c\u8cc7\u6599\u5eab\u4e2d\u5132\u5b58\u4f3a\u670d\u5668\u6240\u6709\u91cd\u8981\u7684\u8cc7\u8a0a\u3002\u8ddf\u8cc7\u6599\u5eab\u76f8\u95dc\u7684\u8cc7\u8a0a\u5132\u5b58\u5728\u300cSCHEMATA\u300d\u8868\u683c\u4e2d\uff0c\u6240\u4ee5\u4f60\u53ef\u4ee5\u4f7f\u7528\u67e5\u8a62\u6558\u8ff0\u53d6\u5f97\u6240\u6709\u8cc7\u6599\u5eab\u7684\u76f8\u95dc\u8cc7\u8a0a\uff1a SELECT * FROM information_schema.SCHEMATA \u5132\u5b58\u5f15\u64ce\u8207\u8cc7\u6599\u578b\u614b \u8868\u683c\u8207\u5132\u5b58\u5f15\u64ce \u8cc7\u6599\u5eab\u8cc7\u6599\u593e\u88e1\u9762\u6703\u5728\u4f9d\u7167table\u5206\u8cc7\u6599\u593e\u5132\u5b58 \u300cStorage engine\u3001\u5132\u5b58\u5f15\u64ce\u300d\u662fMySQL\u7528\u4f86\u5132\u5b58\u8cc7\u6599\u7684\u6280\u8853\uff0c\u70ba\u4e86\u8cc7\u6599\u5eab\u591a\u6a23\u5316\u7684\u61c9\u7528\uff0c\u4f60\u53ef\u4ee5\u5728\u5efa\u7acb\u8868\u683c\u7684\u6642\u5019\uff0c\u4f9d\u7167\u81ea\u5df1\u7684\u9700\u6c42\u6307\u5b9a\u4e00\u7a2e\u5132\u5b58\u5f15\u64ce MyISAM\uff1aMySQL\u9810\u8a2d\u7684\u5132\u5b58\u5f15\u64ce\uff0c\u96d6\u7136\u5b83\u652f\u63f4\u7684\u529f\u80fd\u4e26\u6c92\u6709\u50cf\u4e00\u822c\u7684\u8cc7\u6599\u5eab\u90a3\u9ebc\u591a(\u4f8b\u5982\u4ea4\u6613\u3001transaction)\uff1b\u4e0d\u904e\u4e5f\u56e0\u70ba\u5b83\u6bd4\u8f03\u7c21\u55ae\uff0c\u6240\u4ee5\u904b\u4f5c\u7684\u6548\u7387\u76f8\u5c0d\u4e5f\u6bd4\u8f03\u597d InnoDB\uff1a\u9019\u7a2e\u5132\u5b58\u5f15\u64ce\u6240\u63d0\u4f9b\u7684\u529f\u80fd\u5df2\u7d93\u8ddf\u5927\u578b\u7684\u5546\u7528\u8cc7\u6599\u5eab\u8edf\u9ad4\u4e00\u6a23\u4e86\uff0c\u50cf\u662f\u4ea4\u6613(transaction)\u3001\u7d00\u9304\u9396\u5b9a(row-level locking) \u8207\u81ea\u52d5\u56de\u5fa9(auto-recovery)\u3002 MEMORY\uff1a\u9019\u662f\u4e00\u500b\u6bd4\u8f03\u7279\u6b8a\u7684\u5132\u5b58\u5f15\u64ce\uff0c\u5b83\u628a\u8cc7\u6599\u5132\u5b58\u5728\u7d00\u61b6\u9ad4\u4e2d\uff0c\u6240\u4ee5\u904b\u4f5c\u7684\u6548\u7387\u662f\u6700\u5feb\u7684\uff1b\u4e0d\u904e\u53ea\u8981MySQL\u4f3a\u670d\u5668\u95dc\u9589\u5f8c\uff0c\u5132\u5b58\u7684\u8cc7\u6599\u5c31\u5168\u90e8\u4e0d\u898b\u4e86\u3002 MyISAM vs InnoDB MyISAM\u53ef\u4ee5\u7528\u8907\u88fd\u6a94\u6848\u7684\u65b9\u5f0f\u642c\u79fbtable \u76f8\u8f03\u65bcMyISAM\u6bcf\u500btable\u6709\u5404\u81ea\u7684\u5132\u5b58\u7a7a\u9593\uff0cInnoDB\u5171\u7528\u4e00\u500b\u7a7a\u9593\u5132\u5b58\u6240\u6709\u8868\u683c \u6b04\u4f4d\u8cc7\u6599\u578b\u614b \u6578\u503c\u8207\u4f4d\u5143 \u6574\u6578\u53ef\u4ee5\u8a2d\u5b9a\u9577\u5ea6\u9650\u5236\uff0c\u6211\u4e0d\u77e5\u9053\u5e79\u5565\u7528 \u6d6e\u9ede\u6578\u53ef\u4ee5\u8a2d\u5b9a\u9577\u5ea6\u8ddf\u5c0f\u6578\u9577\u5ea6\u9650\u5236\uff0c\u5c0f\u6578\u592a\u9577\u6703\u56db\u6368\u4e94\u5165\uff0c\u6574\u6578\u90e8\u5206\u8d85\u904e\u6703\u932f\u8aa4 \u628afloat\u585e\u9032int\u4e0d\u6703\u51fa\u932f\uff0c\u6703\u5e6b\u4f60\u56db\u6368\u4e94\u5165 MySQL\u7684\u6578\u503c\u578b\u614b\uff0c\u5305\u542b\u6574\u6578\u8207\u6d6e\u9ede\u6578\u90fd\u53ef\u4ee5\u8a2d\u5b9a\u70ba\u300c\u53ea\u80fd\u5132\u5b58\u6b63\u6578\u300d \u300cZEROFILL\u300d\u7684\u8a2d\u5b9a\u8868\u793a\u5728\u67e5\u8a62\u9019\u4e9b\u6b04\u4f4d\u7684\u6642\u5019\uff0c\u56de\u50b3\u7684\u8cc7\u6599\u6703\u5728\u5de6\u5074\u6839\u64da\u9577\u5ea6\u7684\u8a2d\u5b9a\u586b\u6eff\u300c0\u300d \u5132\u5b58bit\u578b\u614b\u53ef\u4ee5\u7528\u6574\u6578\u4e5f\u53ef\u4ee5\u7528\u4e8c\u9032\u4f4d\u8868\u793a(b'xxx') \u5b57\u4e32 MySQL\u628a\u5b57\u4e32\u578b\u614b\u5206\u70ba\u5169\u5927\u985e\uff1a\u300c\u975e\u4e8c\u9032\u4f4d\u5236\u3001non-binary\u300d\u8207\u300c\u4e8c\u9032\u4f4d\u5236\u3001binary\u300d\u3002\u975e\u4e8c\u9032\u4f4d\u5236\u5c31\u662f\u5132\u5b58\u4e00\u822c\u6587\u5b57\u7684\u5b57\u4e32\uff0c\u6703\u6709\u7279\u5b9a\u7684\u5b57\u5143\u96c6\u8207collation\uff1b\u4e8c\u9032\u4f4d\u5236\u4f7f\u7528\u4f4d\u5143\u7d44\u5132\u5b58\u8cc7\u6599\uff0c\u4e0d\u5305\u542b\u5b57\u5143\u96c6\u8207collation\uff0c\u6240\u4ee5\u5927\u591a\u7528\u4f86\u5132\u5b58\u5716\u7247\u6216\u97f3\u6a02\u9019\u985e\u8cc7\u6599\u3002 \u53ea\u6709char\u662f\u56fa\u5b9a\u9577\u5ea6\u5b57\u4e32\uff0c\u9577\u5ea6\u4e0d\u5920\u6703\u7528\u7a7a\u767d\u88dc\u6eff \u56fa\u5b9a\u9577\u5ea6\u8207\u8b8a\u52d5\u9577\u5ea6\u7684\u5169\u7a2e\u5b57\u4e32\u578b\u614b\u90fd\u53ef\u4ee5\u5132\u5b58\u5b57\u4e32\uff0c\u5dee\u7570\u5728\u5132\u5b58\u7684\u6587\u5b57\u500b\u6578\u5c0f\u65bc\u578b\u614b\u6307\u5b9a\u7684\u9577\u5ea6\u6642\uff0c\u8b8a\u52d5\u9577\u5ea6\u5be6\u969b\u5132\u5b58\u7684\u7a7a\u9593\u6703\u5c0f\u4e00\u4e9b \u6bcf\u7a2e\u5b57\u5143\u96c6\u4f54\u7528\u7a7a\u9593\u9577\u5ea6\u4e0d\u4e00\uff0c\u53ef\u4ee5\u67e5\u8a62MySQL\u8cc7\u6599\u5eab\u652f\u63f4\u7684\u5b57\u5143\u96c6\u7279\u6027\uff0c\u300cMAXLEN\u300d\u6b04\u4f4d\u662f\u95dc\u65bc\u5132\u5b58\u7a7a\u9593\u7684\u8cc7\u8a0a \u4f7f\u7528\u5728\u300cLENGTH\u300d\u51fd\u5f0f\u4f86\u67e5\u8a62\u5132\u5b58\u5728\u9019\u500b\u8868\u683c\u4e2d\u7684\u5b57\u4e32\u8cc7\u6599\uff0c\u5c31\u53ef\u4ee5\u5f88\u660e\u986f\u7684\u770b\u51fa\u4e0d\u540c\u7684\u5b57\u5143\u96c6\uff0c\u5728\u5132\u5b58\u5b57\u5143\u6642\u4f7f\u7528\u7684\u5132\u5b58\u7a7a\u9593 \u300cLENGTH\u300d\u51fd\u5f0f\u6703\u50b3\u56de\u5b57\u4e32\u8cc7\u6599\u5be6\u969b\u7684\u5132\u5b58\u9577\u5ea6(byte)\uff1b\u5982\u679c\u4f60\u8981\u67e5\u8a62\u5b57\u4e32\u7684\u5b57\u5143\u6578\u91cf\u7684\u8a71\uff0c\u5c31\u8981\u4f7f\u7528\u300cCHAR_LENGTH\u300d\u51fd\u5f0f Collation\u9664\u4e86\u5f71\u97ff\u6392\u5e8f\u5916\uff0c\u5176\u4e2d\u7684\u300cci\u300d(case insensitive)\u9084\u6703\u5f71\u97ff\u6bd4\u8f03 \u5217\u8209\u8207\u96c6\u5408 ENUM\u5c31\u662f\u6703\u5e6b\u4f60\u505a\u6aa2\u67e5\u7684VARCHAR\u62c9 \u5217\u8209(ENUM)\u578b\u614b\u6b04\u4f4d\u9664\u4e86\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u5b57\u4e32\u503c\u4f86\u65b0\u589e\u8207\u66f4\u65b0\u8cc7\u6599\u5916\uff0c\u9084\u53ef\u4ee5\u4f7f\u7528\u6578\u503c\u8cc7\u6599\u7684\u7de8\u865f\u4f86\u4ee3\u66ff\uff0c\u4efb\u4f55\u4e00\u500b\u5217\u8209\u578b\u614b\u4e2d\u7684\u6210\u54e1\uff0cMySQL\u90fd\u6703\u5e6b\u5b83\u5011\u7de8\u4e00\u500b\u865f\u78bc \u96d6\u7136\u5728\u67e5\u8a62\u5217\u8209\u578b\u614b\u6b04\u4f4d\u8cc7\u6599\u7684\u6642\u5019\uff0c\u6240\u5f97\u5230\u7684\u7d50\u679c\u90fd\u662f\u6210\u54e1\u7684\u5b57\u4e32\u503c\uff1b\u4e0d\u904e\u771f\u6b63\u5132\u5b58\u5728\u8cc7\u6599\u5eab\u4e2d\u7684\u8cc7\u6599\u537b\u662f\u6210\u54e1\u7684\u7de8\u865f\uff0c\u6240\u4ee5\u6307\u5b9a\u5217\u8209\u578b\u614b\u6b04\u4f4d\u70ba\u6392\u5e8f\u6b04\u4f4d\u7684\u6642\u5019\uff0c\u8cc7\u6599\u5eab\u6703\u4f7f\u7528\u7de8\u865f\u4f86\u6392\u5e8f\uff0c\u800c\u4e0d\u662f\u4ee5\u6210\u54e1\u7684\u5b57\u4e32\u503c \u5728\u6307\u5b9a\u5217\u8209\u578b\u614b\u6b04\u4f4d\u7684\u67e5\u8a62\u689d\u4ef6\u6642\uff0c\u53ef\u4ee5\u4f7f\u7528\u6210\u54e1\u7684\u5b57\u4e32\u503c\u6216\u7de8\u865f \u96c6\u5408(SET)\u578b\u614b\u540c\u6a23\u53ef\u4ee5\u8a2d\u5b9a\u4e00\u7d44\u6210\u54e1\uff0c\u4e0d\u904e\u5b83\u53ef\u4ee5\u5132\u5b58\u591a\u500b\u6210\u54e1\u8cc7\u6599\uff0c\u4e00\u6a23\u5177\u6709\u9a57\u8b49\u529f\u80fd \u96c6\u5408\u7684\u6210\u54e1\u7de8\u865f\u662f\u7528bit flag\u65b9\u5f0f\u5132\u5b58(0,2,4,8,16...) \u5217\u8209\u8207\u96c6\u5408\u578b\u614b\u90fd\u53ef\u4ee5\u8a2d\u5b9a\u9700\u8981\u7684\u5b57\u5143\u96c6\u8207collation\uff0ccollation\u7684\u5927\u5c0f\u5beb\u6703\u5f71\u97ff\u9a57\u8b49 \u65e5\u671f\u8207\u6642\u9593 \u65e5\u671f(DATE)\u578b\u614b\u6b04\u4f4d\u53ef\u4ee5\u5132\u5b58\u5e74\u3001\u6708\u3001\u65e5\u7684\u8cc7\u6599\uff0c\u7bc4\u570d\u5f9e\u300c1000-01-01\u300d\u5230\u300c9999-12-31\u300d\uff0c\u4f60\u7684\u65e5\u671f\u8cc7\u6599\u4e0d\u53ef\u4ee5\u8d85\u904e\u300c9999-12-31\u300d\uff0c\u53ef\u662f\u4f60\u53ef\u4ee5\u5132\u5b58\u300c1000-01-01\u300d\u4ee5\u524d\u7684\u65e5\u671f\uff0c\u4e0d\u904eMySQL\u5efa\u8b70\u4f60\u6700\u597d\u4e0d\u8981\u9019\u9ebc\u4f5c\uff0c\u4e0d\u7136\u53ef\u80fd\u6703\u9020\u6210\u4e00\u4e9b\u5947\u602a\u7684\u554f\u984c\u3002 \u6642\u9593(TIME)\u578b\u614b\u53ef\u4ee5\u5132\u5b58\u6642\u3001\u5206\u3001\u79d2\u7684\u8cc7\u6599\uff0c\u7bc4\u570d\u5f9e\u300c-838:59:59\u300d\u5230\u300c838:59:59\u300d,MySQL\u7684\u6642\u9593\u578b\u614b\u6b04\u4f4d\u53ef\u4ee5\u8b93\u4f60\u5132\u5b58\u985e\u4f3c\u300c\u7d93\u904e\u7684\u6642\u9593\u300d\u9019\u6a23\u7684\u8cc7\u6599 \u5728\u6307\u5b9a\u4e00\u500b\u6642\u9593\u8cc7\u6599\u7684\u6642\u5019\uff0c\u4f60\u53ef\u4ee5\u7701\u7565\u79d2\u6216\u5206\uff0c\u7701\u7565\u7684\u90e8\u4efd\uff0cMySQL\u90fd\u6703\u5e6b\u4f60\u8a2d\u5b9a\u70ba\u300c0\u300d \u65e5\u671f\u8207\u6642\u9593(DATETIME)\u578b\u614b\u53ef\u4ee5\u5132\u5b58\u5b8c\u6574\u7684\u5e74\u3001\u6708\u3001\u65e5\u8207\u6642\u3001\u5206\u3001\u79d2\u8cc7\u6599\uff0c\u7bc4\u570d\u5f9e\u300c1000-01-01 00:00:00\u300d\u5230\u300c9999-12-31 23:59:59\u300d\u3002 \u5982\u679c\u53ea\u9700\u8981\u5132\u5b58\u5e74\u4efd\u8cc7\u6599\u7684\u8a71\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u897f\u5143\u5e74(YEAR)\u578b\u614b\uff0c\u9019\u6a23\u6703\u7bc0\u7701\u5f88\u591a\u5132\u5b58\u7a7a\u9593\u3002 \u300cTIMESTAMP\u300d\u578b\u614b\u7684\u683c\u5f0f\u8207\u300cDATETIME\u300d\u4e00\u6a23\uff0c\u90fd\u5305\u542b\u5b8c\u6574\u7684\u5e74\u3001\u6708\u3001\u65e5\u8207\u6642\u3001\u5206\u3001\u79d2\u8cc7\u6599\uff0c\u4e0d\u904e\u5b83\u4f7f\u7528\u7684\u5132\u5b58\u7a7a\u9593\u53ea\u67094bytes\uff0c\u662f\u300cDATETIME\u300d\u578b\u614b\u7684\u4e00\u534a\u3002 \u300cTIMESTAMP\u300d\u4e5f\u662fMySQL\u65e5\u671f\u8207\u6642\u9593\u578b\u614b\u4e2d\u5177\u6709\u300c\u6642\u5340\u300d\u7279\u6027\u7684\u578b\u614b\u3002\u5b83\u53ef\u4ee5\u5132\u5b58\u5f9e\u300c1970-01-01 00:00:00\u300d\u5230\u76ee\u524d\u7d93\u904e\u7684\u79d2\u6578\u3002\u9019\u500b\u8d77\u59cb\u65e5\u671f\u8207\u6642\u9593\u4f7f\u7528\u300cCoordinated Universal Time\u3001UTC\u300d\u4e16\u754c\u6a19\u6e96\u6642\u9593\u70ba\u5132\u5b58\u8cc7\u6599\u7684\u4f9d\u64da\uff0c\u5b83\u8207\u300cGreenwich Mean Time\u3001GMT\u300d\u683c\u6797\u5a01\u6cbb\u6a19\u6e96\u6642\u9593\u662f\u4e00\u6a23\u7684\u3002 MySQL\u8cc7\u6599\u5eab\u63a1\u7528\u8207\u4f5c\u696d\u7cfb\u7d71\u540c\u6a23\u7684\u6642\u5340\u8a2d\u5b9a\uff0c\u6240\u4ee5\u5728\u5132\u5b58\u300cTIMESTAMP\u300d\u578b\u614b\u6b04\u4f4d\u7684\u8cc7\u6599\u6642\uff0c\u904e\u7a0b\u4e2d\u6703\u6709\u4e00\u4e9b\u8a08\u7b97\u7684\u52d5\u4f5c \u8868\u683c\u8207\u7d22\u5f15 \u5efa\u7acb\u8868\u683c CREATE TABLE [IF NOT EXISTS] \u8868\u683c\u540d\u7a31 (\u6b04\u4f4d\u5b9a\u7fa9,...) [{ENGINE | TYPE} [=] \u5132\u5b58\u5f15\u64ce\u540d\u7a31] [CHARACTER SET [=] \u5b57\u5143\u96c6\u540d\u7a31] [COLLATE [=] collation\u540d\u7a31] \u6b04\u4f4d\u5b9a\u7fa9 \u6b04\u4f4d\u540d\u7a31 \u6b04\u4f4d\u578b\u614b [\u6b04\u4f4d\u5c6c\u6027],... \u67e5\u8a62\u5f15\u64ce SHOW ENGINES \u4fee\u6539\u8a2d\u5b9a\u6a94\uff1aMySQL\u8cc7\u6599\u5eab\u4f3a\u670d\u5668\u5728\u555f\u52d5\u6642\u6703\u8b80\u53d6\u4e00\u500b\u540d\u7a31\u70ba\u300cmy.ini\u300d\u7684\u8a2d\u5b9a\u6a94\uff0c\u6a94\u6848\u4e2d\u6709\u8a31\u591a\u555f\u52d5\u8cc7\u6599\u5eab\u4f3a\u670d\u5668\u6642\u9700\u8981\u7684\u8cc7\u8a0a\u3002\u5176\u4e2d\u5c31\u5305\u542b\u9810\u8a2d\u7684\u5132\u5b58\u5f15\u64ce\u8a2d\u5b9a\uff0c\u4f60\u53ef\u4ee5\u4fee\u6539\u9019\u500b\u8a2d\u5b9a\u5f8c\u518d\u91cd\u65b0\u555f\u52d5\u8cc7\u6599\u5eab\u4f3a\u670d\u5668\uff0c\u8b93\u65b0\u7684\u8a2d\u5b9a\u751f\u6548\uff1a default-storage-engine=InnoDB \u8a2d\u5b9a\u5132\u5b58\u5f15\u64ce\uff1a\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528\u300cSET\u300d\u6558\u8ff0\u8a2d\u5b9a\u9810\u8a2d\u7684\u5132\u5b58\u5f15\u64ce\uff1a SET GLOBAL storage_engine = \u5132\u5b58\u5f15\u64ce \u55ae\u6b21\u751f\u6548\uff1a SET SESSION storage_engine = \u5132\u5b58\u5f15\u64ce SET storage_engine = \u5132\u5b58\u5f15\u64ce \u53ef\u4ee5\u53ea\u91dd\u5c0d\u55ae\u4e00\u6b04\u4f4d\u6307\u5b9a\u5b57\u5143\u96c6\u8207collation\uff0c\u6c92\u6307\u5b9a\u7684\u5c31\u4f7f\u7528default \u6578\u503c\u578b\u614b\u6b04\u4f4d\u5c08\u7528\u7684\u5c6c\u6027\u8a2d\u5b9a\u6709\u300cUNSIGNED\u300d\u3001\u300cZEROFILL\u300d\u8207\u300cAUTO_INCREMENT\u300d \u9664\u4e86\u5b57\u4e32\u8207\u6578\u503c\u5169\u7a2e\u6b04\u4f4d\u5c08\u7528\u7684\u6b04\u4f4d\u5c6c\u6027\u8a2d\u5b9a\u5916\uff0c\u9084\u6709\u300cNULL\u300d\u3001\u300cNOT NULL\u300d \u5982\u679c\u4f60\u6c92\u6709\u70ba\u6b04\u4f4d\u4f7f\u7528\u300cDEFAULT\u300d\u95dc\u9375\u5b57\u8a2d\u5b9a\u9810\u8a2d\u503c\uff0c\u800c\u4e14\u4e5f\u6c92\u6709\u8a2d\u5b9a\u70ba\u300cNOT NULL\u300d\uff0cMySQL\u6703\u81ea\u52d5\u70ba\u4f60\u52a0\u5165\u9810\u8a2d\u503c\u7684\u8a2d\u5b9a\u300cDEFAULT NULL\u300d TIMESTAMP \u5728\u8868\u683c\u4e2d\u4f7f\u7528\u300cTIMESTAMP\u300d\u578b\u614b\u7684\u6b04\u4f4d\u6642\uff0c\u5982\u679c\u4f60\u6c92\u6709\u8a2d\u5b9a\u5b83\u5011\u7684\u6b04\u4f4d\u5c6c\u6027\uff0cMySQL\u6703\u81ea\u52d5\u5e6b\u4f60\u5728\u7b2c\u4e00\u500b\u300cTIMESTAMP\u300d\u6b04\u4f4d\u52a0\u5165\u300cNOT NULL\u300d\u3001\u300cDEFAULT\u300d\u548c\u300cON UPDATE\u300d\u4e09\u500b\u6b04\u4f4d\u5c6c\u6027\u7684\u8a2d\u5b9a\u3002\u5176\u5b83\u6c92\u6709\u8a2d\u5b9a\u6b04\u4f4d\u5c6c\u6027\u7684\u300cTIMESTAMP\u300d\u6b04\u4f4d\uff0cMySQL\u6703\u5e6b\u4f60\u52a0\u5165\u300cNOT NULL\u300d\u8207\u300cDEFAULT\u300d\u5169\u500b\u6b04\u4f4d\u5c6c\u6027\u3002 \u300cNOT NULL\u300d\u4e0d\u5141\u8a31\u4f60\u5132\u5b58\u300cNULL\u300d\u503c \u300cDEFAULT CURRENT_TIMESTAMP\u300d\u8a2d\u5b9a\u9810\u8a2d\u503c\u70ba\u76ee\u524d\u7684\u65e5\u671f\u6642\u9593\u3002\u5728\u6240\u6709\u6b04\u4f4d\u578b\u614b\u4e2d\uff0c\u53ea\u6709\u300cTIMESTAMP\u300d\u53ef\u4ee5\u4f7f\u7528\u300cCURRENT_TIMESTAMP\u300d\u6307\u5b9a\u9810\u8a2d\u503c\uff1b\u5176\u5b83\u7684\u6b04\u4f4d\u578b\u614b\uff0c\u5728\u6307\u5b9a\u9810\u8a2d\u503c\u53ea\u80fd\u662f\u300c\u4e00\u500b\u660e\u78ba\u7684\u503c\u300d \u300cON UPDATE\u300d\u53ef\u4ee5\u6307\u5b9a\u5728\u4fee\u6539\u7d00\u9304\u7684\u6642\u5019\uff0cMySQL\u81ea\u52d5\u5e6b\u4f60\u586b\u5165\u7684\u8cc7\u6599 \u5728\u4e00\u500b\u8868\u683c\u4e2d\uff0cMySQL\u9650\u5236\u300cCURRENT_TIMESTAMP\u300d\u53ea\u80fd\u5728\u4e00\u500b\u6b04\u4f4d\u51fa\u73fe\u3002 \u5132\u5b58\u5efa\u7acb\u7d00\u9304\u7684\u6642\u9593\u6b04\u4f4d\u4f7f\u7528\u300c0\u300d\u4ee3\u66ff\u300cCURRENT_TIMESTAMP\u300d\uff0c\u7576\u6b04\u4f4d\u7684\u503c\u70ba\u300cNULL\u300d\u7684\u6642\u5019\uff0cMySQL\u6703\u81ea\u52d5\u70ba\u4f60\u586b\u5165\u76ee\u524d\u7684\u65e5\u671f\u8207\u6642\u9593\u3002(\u8d85\u5947\u602a...) \u7528\u5176\u4ed6\u8868\u683c\u5efa\u65b0\u8868\u683c \u53ef\u4ee5\u4f7f\u7528CREATE TABLE\u642d\u914d\u67e5\u8a62\u8a9e\u6cd5\u76f4\u63a5\u628a\u67e5\u8a62\u7d50\u679c\u5efa\u6210\u8868\u683c MySQL\u4f7f\u7528\u67e5\u8a62\u7d50\u679c\u7684\u6b04\u4f4d\u540d\u7a31\u8207\u578b\u614b\u4f86\u5efa\u7acb\u65b0\u7684\u8868\u683c \u5982\u679c\u6c92\u6709\u6307\u5b9a\u5132\u5b58\u5f15\u64ce\u3001\u5b57\u5143\u96c6\u6216collation\u7684\u8a71\uff0c\u5efa\u7acb\u7684\u65b0\u8868\u683c\u4f7f\u7528\u8cc7\u6599\u5eab\u9810\u8a2d\u7684\u5132\u5b58\u5f15\u64ce\u3001\u5b57\u5143\u96c6\u8207collation \u67e5\u8a62\u8868\u683c\u4e2d\uff0c\u6b04\u4f4d\u7684\u7d22\u5f15\u8207\u300cAUTO_INCREMENT\u300d\u8a2d\u5b9a\u90fd\u6703\u88ab\u5ffd\u7565 \u53ea\u5efaSchema CREATE TABLE [IF NOT EXISTS] \u8868\u683c\u540d\u7a31 { LIKE \u8868\u683c\u540d\u7a31 | (LIKE \u8868\u683c\u540d\u7a31)} \u4f7f\u7528\u9019\u7a2e\u8a9e\u6cd5\u5efa\u7acb\u7684\u65b0\u8868\u683c\uff0c\u4e26\u4e0d\u6703\u65b0\u589e\u7d00\u9304\u5230\u65b0\u8868\u683c\u4e2d\uff0c\u53ef\u662f\u5305\u542b\u7d22\u5f15\u8207\u300cAUTO_INCREMENT\u300d\u8a2d\u5b9a\u90fd\u6703\u5957\u7528\u5728\u65b0\u8868\u683c\uff0c\u9664\u4e86\u4e0b\u5217\u5169\u500b\u4f8b\u5916\uff1a \u4f7f\u7528\u300cMyISAM\u300d\u5132\u5b58\u5f15\u64ce\u6642\uff0c\u4f60\u53ef\u4ee5\u5728\u5efa\u7acb\u8868\u683c\u7684\u6642\u5019\u4f7f\u7528\u300cDATA DIRECTORY\u300d\u8207\u300cINDEX DIRECTORY\u300d\u6307\u5b9a\u8cc7\u6599\u8207\u7d22\u5f15\u6a94\u6848\u7684\u8cc7\u6599\u593e\u4f4d\u7f6e\uff1b\u5efa\u7acb\u7684\u65b0\u8868\u683c\u6703\u5ffd\u7565\u9019\u4e9b\u8a2d\u5b9a\uff0c\u800c\u4f7f\u7528\u8cc7\u6599\u5eab\u9810\u8a2d\u7684\u8cc7\u6599\u593e \u6b04\u4f4d\u7684\u300cFOREIGN KEY\u300d\u8207\u8868\u683c\u7684\u300cREFERENCES\u300d\u5c6c\u6027\u8a2d\u5b9a\u90fd\u6703\u88ab\u5ffd\u7565 \u4e0a\u5217\u8a0e\u8ad6\u7684\u5efa\u7acb\u8868\u683c\u65b9\u5f0f\uff0c\u90fd\u53ef\u4ee5\u5728\u5efa\u7acb\u8868\u683c\u7684\u6642\u5019\uff0c\u4f9d\u7167\u9700\u8981\u52a0\u5165\u300cTEMPORARY\u300d\u95dc\u9375\u5b57\uff0c\u6307\u5b9a\u9019\u500b\u65b0\u5efa\u7acb\u7684\u8868\u683c\u70ba\u300c\u7528\u6236\u7aef\u66ab\u6642\u5b58\u5728\u300d\u7684\u8868\u683c\uff1a \u5efa\u7acb\u66ab\u5b58\u8868\u683c CREATE [TEMPORARY] TABLE [IF NOT EXISTS] \u8868\u683c\u540d\u7a31 \u300cTEMPORARY\u300d\u8868\u683c\u6709\u4e0b\u5217\u91cd\u9ede\uff1a \u300cTEMPORARY\u300d\u8868\u683c\u662f\u6bcf\u4e00\u500b\u7528\u6236\u7aef\u5c08\u5c6c\u7684\u8868\u683c\uff0c\u7528\u6236\u7aef\u96e2\u7dda\u5f8c\uff0cMySQL\u5c31\u6703\u81ea\u52d5\u522a\u9664\u9019\u4e9b\u8868\u683c \u56e0\u70ba\u300cTEMPORARY\u300d\u8868\u683c\u662f\u7528\u6236\u7aef\u5c08\u5c6c\u7684\u8868\u683c\uff0c\u5176\u5b83\u7528\u6236\u7aef\u4e0d\u80fd\u4f7f\u7528\uff0c\u6240\u4ee5\u4e0d\u540c\u7684\u7528\u6236\u7aef\uff0c\u4f7f\u7528\u540c\u6a23\u540d\u7a31\u5efa\u7acb\u300cTEMPORARY\u300d\u8868\u683c\u4e5f\u6c92\u6709\u95dc\u4fc2 \u300cTEMPORARY\u300d\u8868\u683c\u540d\u7a31\u53ef\u4ee5\u8ddf\u8cc7\u6599\u5eab\u4e2d\u7684\u8868\u683c\u540d\u7a31\u4e00\u6a23\uff0c\u4e0d\u904e\u5728\u300cTEMPORARY\u300d\u8868\u683c\u5b58\u5728\u7684\u6642\u5019\uff0c\u8cc7\u6599\u5eab\u4e2d\u7684\u8868\u683c\u6703\u88ab\u96b1\u85cf\u8d77\u4f86 \u53ef\u4ee5\u4f7f\u7528\u300cALTER TABLE\u300d\u4fee\u6539\u300cTEMPORARY\u300d\u8868\u683c\u540d\u7a31\uff0c\u4e0d\u53ef\u4ee5\u4f7f\u7528\u300cRENAME TABLE\u300d\u4fee\u6539\u300cTEMPORARY\u300d\u8868\u683c\u540d\u7a31 \u4fee\u6539\u8868\u683c ALTER TABLE \u8868\u683c\u540d\u7a31 \u4fee\u6539\u5b9a\u7fa9[,...] \u65b0\u589e ADD [COLUMN] \u6b04\u4f4d\u5b9a\u7fa9 [FIRST | AFTER \u6b04\u4f4d\u540d\u7a31] #\u589e\u52a0\u6b04\u4f4d\u6307\u5b9a\u4f4d\u7f6e ADD [COLUMN] (\u6b04\u4f4d\u5b9a\u7fa9[,...]) #\u589e\u52a0\u591a\u500b\u65b0\u6b04\u4f4d \u4fee\u6539 CHANGE [COLUMN] \u820a\u6b04\u4f4d\u540d\u7a31 \u65b0\u7684\u6b04\u4f4d\u5b9a\u7fa9 [FIRST | AFTER \u6b04\u4f4d\u540d\u7a31] #\u6539\u540d\u7a31\u3001\u5b9a\u7fa9\u8207\u4f4d\u7f6e MODIFY [COLUMN] \u6b04\u4f4d\u5b9a\u7fa9 [FIRST | AFTER \u6b04\u4f4d\u540d\u7a31] #\u6539\u5b9a\u7fa9\u8207\u4f4d\u7f6e \u522a\u9664 DROP [COLUMN] \u6b04\u4f4d\u540d\u7a31 \u4fee\u6539\u8868\u683c\u540d\u7a31 ALTER TABLE \u820a\u8868\u683c\u540d\u7a31 RENAME [TO] \u65b0\u8868\u683c\u540d\u7a31 RENAME TABLE \u820a\u8868\u683c\u540d\u7a31 TO \u65b0\u8868\u683c\u540d\u7a31[,...] #\u53ef\u4ee5\u4e00\u6b21\u6539\u591a\u500b \u522a\u9664\u8868\u683c DROP TABLE [IF EXISTS] \u8868\u683c\u540d\u7a31[,...] MySQL\u4e0d\u6703\u8ddf\u4f60\u78ba\u8a8d \u7d22\u5f15\u4ecb\u7d39 \u7d22\u5f15\u5206\u70ba\u4e3b\u7d22\u5f15\u9375(primary key)\u3001\u552f\u4e00\u7d22\u5f15(unique index)\u8207\u975e\u552f\u4e00\u7d22\u5f15(non-unique index)\u4e09\u7a2e\u3002 \u4e3b\u7d22\u5f15\u9375\u7684\u61c9\u7528\u5f88\u5e38\u898b\uff0c\u800c\u4e14\u4e00\u500b\u8868\u683c\u901a\u5e38\u6703\u6709\u4e00\u500b\uff0c\u800c\u4e14\u53ea\u80fd\u6709\u4e00\u500b\u3002\u5728\u4e00\u500b\u8868\u683c\u4e2d\uff0c\u8a2d\u5b9a\u70ba\u4e3b\u7d22\u5f15\u9375\u7684\u6b04\u4f4d\u503c\u4e0d\u53ef\u4ee5\u91cd\u8907\uff0c\u800c\u4e14\u4e0d\u53ef\u4ee5\u5132\u5b58\u300cNULL\u300d\u503c\u3002\u56e0\u70ba\u9019\u6a23\u7684\u9650\u5236\uff0c\u6240\u4ee5\u5f88\u9069\u5408\u4f7f\u7528\u5728\u985e\u4f3c\u7de8\u78bc\u3001\u4ee3\u865f\u6216\u8eab\u4efd\u8b49\u5b57\u865f\u9019\u985e\u6b04\u4f4d\u3002 \u552f\u4e00\u7d22\u5f15\u4e5f\u7a31\u70ba\u300c\u4e0d\u53ef\u91cd\u8907\u7d22\u5f15\u300d\uff0c\u5728\u4e00\u500b\u8868\u683c\u4e2d\uff0c\u8a2d\u5b9a\u70ba\u552f\u4e00\u7d22\u5f15\u7684\u6b04\u4f4d\u503c\u4e0d\u53ef\u4ee5\u91cd\u8907\uff0c\u4f46\u662f\u53ef\u4ee5\u5132\u5b58\u300cNULL\u300d\u503c\u3002\u9019\u7a2e\u7d22\u5f15\u9069\u5408\u7528\u5728\u985e\u4f3c\u54e1\u5de5\u8cc7\u6599\u8868\u683c\u4e2d\u5132\u5b58\u96fb\u5b50\u90f5\u4ef6\u5e33\u865f\u7684\u6b04\u4f4d\uff0c\u56e0\u70ba\u54e1\u5de5\u4e0d\u4e00\u5b9a\u6709\u96fb\u5b50\u90f5\u4ef6\u5e33\u865f\uff0c\u6240\u4ee5\u5141\u8a31\u5132\u5b58\u300cNULL\u300d\u503c\uff0c\u53ef\u4ee5\u6bcf\u4e00\u500b\u54e1\u5de5\u7684\u96fb\u5b50\u90f5\u4ef6\u5e33\u865f\u90fd\u4e0d\u53ef\u4ee5\u91cd\u8907\u3002 \u4e0a\u5217\u5169\u7a2e\u7d22\u5f15\u90fd\u53ef\u4ee5\u9810\u9632\u5132\u5b58\u7684\u8cc7\u6599\u767c\u751f\u91cd\u8907\u7684\u554f\u984c\uff0c\u4e5f\u53ef\u4ee5\u589e\u52a0\u67e5\u8a62\u8207\u7dad\u8b77\u8cc7\u6599\u7684\u6548\u7387\u3002\u975e\u552f\u4e00\u7d22\u5f15\u5c31\u53ea\u662f\u7528\u4f86\u589e\u52a0\u67e5\u8a62\u8207\u7dad\u8b77\u8cc7\u6599\u6548\u7387\u7684\u7d22\u5f15\u3002\u8a2d\u5b9a\u70ba\u975e\u552f\u4e00\u7d22\u5f15\u7684\u6b04\u4f4d\u503c\u53ef\u4ee5\u91cd\u8907\uff0c\u4e5f\u53ef\u4ee5\u5132\u5b58\u300cNULL\u300d\u503c\u3002 CREATE TABLE \u8868\u683c\u540d\u7a31( \u6b04\u4f4d\u5b9a\u7fa9 [UNIQUE] [KEY] | [PRIMARY [KEY]] ) \u9810\u8a2d\u7684\u300cHASH\u300d\u6f14\u7b97\u6cd5\u9069\u5408\u7528\u5728\u4e3b\u7d22\u5f15\u9375\u548c\u552f\u4e00\u7d22\u5f15\uff0c\u9019\u7a2e\u6f14\u7b97\u6cd5\u5728\u641c\u5c0b\u4e0d\u80fd\u91cd\u8907\u7684\u8cc7\u6599\u6642\uff0c\u6548\u7387\u6703\u6bd4\u8f03\u597d\uff1b\u800c\u300cBTREE\u300d\u6f14\u7b97\u6cd5\u9069\u5408\u7528\u5728\u53ef\u4ee5\u5141\u8a31\u91cd\u8907\u8cc7\u6599\u7684\u4e00\u822c\u7d22\u5f15\uff0c\u5728\u641c\u5c0b\u4e0a\u6703\u6bd4\u300cHASH\u300d\u6709\u66f4\u597d\u7684\u6548\u7387\u3002 \u8a3b\uff1a\u300cFULLTEXT\u300d\u7d22\u5f15\u53ea\u80fd\u7528\u5728\u300cCHAR\u300d\u3001\u300cVARCHAR\u300d\u8207\u300cTEXT\u300d\u578b\u614b\u7684\u6b04\u4f4d\uff0c\u800c\u4e14\u8868\u683c\u4f7f\u7528\u7684\u5132\u5b58\u5f15\u64ce\u5fc5\u9808\u662f\u300cMyISAM\u300d\u3002\u300cSPATIAL\u300d\u7d22\u5f15\u662f\u300cSPATIAL\u300d\u578b\u614b\u6b04\u4f4d\u5c08\u7528\u7684\uff0c\u800c\u4e14\u8868\u683c\u4f7f\u7528\u7684\u5132\u5b58\u5f15\u64ce\u5fc5\u9808\u662f\u300cMyISAM\u300d\u3002\u9019\u5169\u7a2e\u7d22\u5f15\u4e0d\u6703\u5728\u9019\u88e1\u8a0e\u8ad6\u3002 AUTO_INCREMENT \u81ea\u52d5\u905e\u589e \u53ea\u6709\u6574\u6578\u578b\u614b\u624d\u53ef\u4ee5\u4f7f\u7528\u300cAUTO_INCREMENT\u300d\u6b04\u4f4d\u5c6c\u6027\uff0c\u4f60\u53ef\u4ee5\u6839\u64da\u7de8\u865f\u5927\u5c0f\u7684\u9700\u6c42\uff0c\u9078\u64c7\u4f7f\u7528\u300cTINYINT\u300d\u3001\u300cSMALLINT\u300d\u3001\u300cMEDIUMINT\u300d\u3001\u300cINT\u300d\u6216\u300cBIGINT\u300d\uff0c\u800c\u4e14\u56e0\u70ba\u53ea\u6703\u4f7f\u7528\u5230\u6b63\u6578\uff0c\u6240\u4ee5\u4f60\u53ef\u4ee5\u52a0\u5165\u300cUNSIGNED\u300d\u4f86\u589e\u52a0\u7de8\u865f\u7684\u7bc4\u570d NOT NULL \u4e00\u500b\u8868\u683c\u53ea\u80fd\u6709\u4e00\u500b\u300cAUTO_INCREMENT\u300d\u6b04\u4f4d\uff0c\u800c\u4e14\u8981\u70ba\u5b83\u5efa\u7acb\u4e00\u500b\u7d22\u5f15\uff0c\u800c\u4e14\u901a\u5e38\u662f\u5efa\u7acb\u4e3b\u7d22\u5f15\u9375\u6216\u552f\u4e00\u7d22\u5f15\uff0c\u9019\u6a23\u53ef\u4ee5\u9632\u6b62\u91cd\u8907\u7684\u7de8\u865f\uff1b\u4e0d\u904eMySQL\u4e5f\u5141\u8a31\u4f60\u5efa\u7acb\u53ef\u91cd\u8907\u7684\u7d22\u5f15 \u53ef\u4f7f\u7528LAST_INSERT_ID()\u53d6\u7684\u6700\u65b0\u4e00\u7b46\uff0c\u4f46\u81ea\u5df1\u6307\u5b9aAUTO_INCREMENT\u6b04\u4f4d\u7684\u8a71\u9019\u529f\u80fd\u6703\u6709\u554f\u984c \u4f7f\u7528\u300cTRUNCATE TABLE\u300d\u6558\u8ff0\u522a\u9664\u5305\u542b\u300cAUTO_INCREMENT\u300d\u6b04\u4f4d\u8868\u683c\u7684\u6240\u6709\u7d00\u9304\uff0c\u7de8\u865f\u6703\u91cd\u65b0\u5f9e\u982d\u958b\u59cb\u3002 \u4e0d\u8981\u6307\u5b9a\u503c\uff0c\u6216\u662f\u6307\u5b9a\u300cNULL\u300d\u503c\u7d66\u300cAUTO_INCREMENT\u300d\u6b04\u4f4d\uff0c\u90fd\u53ef\u4ee5\u8b93MySQL\u70ba\u4f60\u81ea\u52d5\u7de8\u88fd\u4e00\u500b\u6d41\u6c34\u865f\uff0c\u4e26\u5132\u5b58\u5230\u7d00\u9304\u4e2d\uff0c\u9019\u5169\u7a2e\u4e5f\u662f\u6bd4\u8f03\u597d\u7684\u65b9\u5f0f \u5982\u679c\u7de8\u865f\u5df2\u7d93\u5230\u6b04\u4f4d\u578b\u614b\u7684\u6700\u5927\u7bc4\u570d\uff0c\u4f8b\u5982\u4e00\u500b\u300cSMALLINT\u300d\u578b\u614b\uff0c\u800c\u4e14\u662f\u6307\u5b9a\u70ba\u300cUNSIGNED\u300d\u7684\u300cAUTO_INCREMENT\u300d\u6b04\u4f4d\uff0c\u7de8\u865f\u5df2\u7d93\u5230\u300c65535\u300d\u4e86\uff0c\u5982\u679c\u518d\u57f7\u884c\u65b0\u589e\u7684\u6558\u8ff0\uff0c\u5c31\u6703\u9020\u6210\u300cDuplicate entry \u201965535\u2032 for key \u2018\u6b04\u4f4d\u540d\u7a31\u2019\u300d\u7684\u932f\u8aa4 \u67e5\u8a62\u8868\u683c\u8207\u7d22\u5f15\u8cc7\u8a0a MySQL\u8cc7\u6599\u5eab\u5728\u555f\u52d5\u4ee5\u5f8c\uff0c\u6703\u6709\u4e00\u500b\u5f88\u7279\u5225\u7684\u8cc7\u6599\u5eab\uff0c\u540d\u7a31\u662f\u300cinformation_schema\u300d\uff0c\u9019\u500b\u8cc7\u6599\u5eab\u901a\u5e38\u6703\u7a31\u70ba\u300c\u7cfb\u7d71\u8cc7\u8a0a\u8cc7\u6599\u5eab\u300d\u3002\u9019\u500b\u8cc7\u6599\u5eab\u4e2d\u6709\u4e00\u500b\u8868\u683c\u53eb\u4f5c\u300cTABLES\u300d\uff0c\u5b83\u5132\u5b58\u6240\u6709MySQL\u8cc7\u6599\u5eab\u4e2d\u7684\u8868\u683c\u76f8\u95dc\u8cc7\u8a0a\u3002 \u5b50\u67e5\u8a62 \u5b50\u67e5\u8a62(subquery)\u662f\u4e00\u7a2e\u5f88\u5e38\u898b\u7684\u61c9\u7528\uff0c\u4e0d\u8ad6\u662f\u67e5\u8a62\u3001\u65b0\u589e\u3001\u4fee\u6539\u6216\u522a\u9664\u90fd\u6709\u53ef\u80fd\u51fa\u73fe\u3002\u5b50\u67e5\u8a62\u662f\u4e00\u500b\u653e\u5728\u5de6\u53f3\u522e\u865f\u4e2d\u7684\u300cSELECT\u300d\u6558\u8ff0\uff0c\u800c\u9019\u500b\u67e5\u8a62\u6558\u8ff0\u6703\u653e\u5728\u53e6\u4e00\u500bSQL\u6558\u8ff0\u4e2d\u3002\u5728\u57f7\u884c\u4e00\u4e9b\u5de5\u4f5c\u7684\u6642\u5019\uff0c\u4f7f\u7528\u5b50\u67e5\u8a62\u53ef\u4ee5\u7c21\u5316SQL\u6558\u8ff0\u3002 SELECT Code, Population FROM country WHERE Population > ( SELECT Population FROM country WHERE Code = 'USA' ) \u5b50\u67e5\u8a62\u5927\u90e8\u4efd\u4f7f\u7528\u5728\u63d0\u4f9b\u5224\u65b7\u689d\u4ef6\u7528\u7684\u8cc7\u6599\uff0c\u5728\u300cWHERE\u300d\u548c\u300cHAVING\u300d\u5b50\u53e5\u4e2d\uff0c\u90fd\u53ef\u80fd\u51fa\u73fe\u5b50\u67e5\u8a62 \u6bd4\u8f03\u904b\u7b97\u5b50 WHERE \u904b\u7b97\u5f0f == (\u5b50\u67e5\u8a62) HAVING <> < <= > >= \u6ce8\u610f\u56de\u50b3\u4e0d\u53ef\u8d85\u904e\u4e00\u500b\u6b04\u4f4d\u7684\u8cc7\u6599\u4e5f\u4e0d\u80fd\u8d85\u904e\u4e00\u7b46\u4ee5\u4e0a\u7684\u8cc7\u6599 \u300cIN\u300d\u904b\u7b97\u5b50 WHERE \u904b\u7b97\u5f0f [NOT] IN (\u5b50\u67e5\u8a62) HAVING \u56e0\u70ba\u662f\u300cIN\u300d\u53ef\u4ee5\u6709\u591a\u7b46(\u4f46\u9084\u662f\u53ea\u80fd\u4e00\u6b04\u4f4d) \u5176\u4ed6\u904b\u7b97\u5b50 WHERE \u904b\u7b97\u5f0f == ALL (\u5b50\u67e5\u8a62) HAVING <> Any < SOME <= > >= \u5728MySQL\u4e2d\uff0c\u300cANY\u300d\u8207\u300cSOME\u300d\u904b\u7b97\u5b50\u7684\u6548\u679c\u662f\u4e00\u6a23\u7684 \u300c<> ALL\u300d\u6548\u679c\u5176\u5be6\u8ddf\u300cNOT IN\u300d\u662f\u4e00\u6a23\u7684 \u300c= ANY\u300d\u904b\u7b97\u5b50\u7684\u6548\u679c\u8ddf\u300cIN\u300d\u662f\u4e00\u6a23\u7684 \u591a\u6b04\u4f4d\u5b50\u67e5\u8a62 \u591a\u6b04\u4f4d\u6bd4\u8f03 SELECT Name, GNP FROM country WHERE ( Continent, GovernmentForm ) = ( 'Asia', 'Replublic' ) \u642d\u914d\u5b50\u67e5\u8a62 SELECT Name FROM country WHERE (Region, GovernmentForm) = ( SELECT Region, GovernmentForm From country WHERE Name = 'Iraq') = \u540c\u6a23\u53ef\u4ee5\u6539\u6210 IN \u7684\u65b9\u5f0f\u67e5\u8a62 SELECT\u5b50\u53e5\u8207\u5b50\u67e5\u8a62 \u5982\u679c\u9700\u8981\u7684\u8a71\uff0c\u5b50\u67e5\u8a62\u4e5f\u53ef\u4ee5\u4f7f\u7528\u5728\u300cSELECT\u300d\u5b50\u53e5\u4e2d \u611f\u89ba\u6c92\u5565\u5c41\u7528? FROM\u5b50\u53e5\u8207\u5b50\u67e5\u8a62 \u628a\u5b50\u67e5\u8a62\u7684\u56de\u50b3\u7576\u8868\u683c\u4f7f\u7528\uff0c\u4e00\u5b9a\u8981\u52a0 AS \u611f\u89ba\u4e5f\u6c92\u5565\u5c41\u7528 \u8cc7\u6599\u7dad\u8b77\u8207\u5b50\u67e5\u8a62 \u5728\u4f7f\u7528\u300cINSERT\u300d\u3001\u300cUPDATE\u300d\u8207\u300cDELETE\u300d\u6558\u8ff0\u57f7\u884c\u65b0\u589e\u3001\u4fee\u6539\u8207\u522a\u9664\u8cc7\u6599\u6642\uff0c\u4e5f\u53ef\u4ee5\u4f9d\u7167\u9700\u8981\u4f7f\u7528\u5b50\u67e5\u8a62\u4f86\u7c21\u5316\u8cc7\u6599\u7dad\u8b77\u7684\u6558\u8ff0\u3002 INSERT:\u7576\u6210\u585e\u5165\u7684\u8cc7\u6599 UPDATE\u3001DELETE:\u653e\u5728WHERE\u88e1\u7576\u689d\u4ef6 MySQL\u7684UPDATE\u3001DELETE\u4fee\u6539\u548c\u5b50\u67e5\u8a62\u4e0d\u53ef\u4ee5\u51fa\u73fe\u76f8\u540c\u7684\u8868\u683c \u95dc\u806f\u5b50\u67e5\u8a62 \u5728\u4f7f\u7528\u5b50\u67e5\u8a62\u7684\u7684\u6642\u5019\uff0c\u901a\u5e38\u4e0d\u6703\u8ddf\u5916\u5c64\u67e5\u8a62\u6709\u76f4\u63a5\u7684\u95dc\u4fc2\uff0c\u4e5f\u5c31\u662f\u5b50\u67e5\u8a62\u4e0d\u6703\u4f7f\u7528\u5916\u5c64\u67e5\u8a62\u7684\u8cc7\u6599\uff1b\u4e0d\u904e\u9047\u5230\u4e00\u4e9b\u6bd4\u8f03\u7279\u6b8a\u7684\u9700\u6c42\u6642\uff0c\u5728\u300cWHERE\u300d\u6216\u300cHAVING\u300d\u5b50\u53e5\u4e2d\u7684\u5b50\u67e5\u8a62\uff0c\u4e5f\u9700\u8981\u4f7f\u7528\u5916\u5c64\u67e5\u8a62\u7684\u8cc7\u6599\u4f86\u57f7\u884c\u5224\u65b7\u7684\u5de5\u4f5c\uff0c\u9019\u6a23\u7684\u6558\u8ff0\u7a31\u70ba\u300c\u95dc\u806f\u5b50\u67e5\u8a62\u3001correlated subqueries\u300d\uff0c\u4f7f\u7528\u5225\u540d\u4f86\u9054\u6210 \u5728\u300cWHERE\u300d\u6216\u300cHAVING\u300d\u5b50\u53e5\u4e2d\u7528\u4f86\u8a2d\u5b9a\u689d\u4ef6\u7684\u5b50\u67e5\u8a62\uff0c\u53ef\u4ee5\u4f9d\u7167\u9700\u6c42\u4f7f\u7528\u50cf\u300cIN\u300d\u3001\u300cANY\u300d\u9019\u4e9b\u904b\u7b97\u5b50\u4f86\u5224\u65b7\u689d\u4ef6\u662f\u5426\u7b26\u5408\u3002\u9664\u4e86\u4e0a\u5217\u4ee5\u7d93\u8a0e\u8ad6\u7684\u6bd4\u8f03\u904b\u7b97\u5b50\u5916\uff0c\u9084\u6709\u4e00\u500b\u300cEXISTS\u300d\u904b\u7b97\u5b50\uff0c\u300cEXISTS\u300d\u904b\u7b97\u5b50\u5224\u65b7\u689d\u4ef6\u662f\u5426\u6210\u7acb\u7684\u4f9d\u64da\u6bd4\u8f03\u4e0d\u4e00\u6a23\uff0c\u5982\u679c\u5b50\u67e5\u8a62\u6709\u4efb\u4f55\u7d00\u9304\u8cc7\u6599\u56de\u50b3\uff0c\u689d\u4ef6\u5c31\u7b97\u6210\u7acb\uff0c\u6240\u4ee5SELECT\u5f8c\u9762\u63a5\u751a\u9ebc\u90fd\u4e00\u6a23(*, 1, NULL, 'Hello'...) WHERE \u904b\u7b97\u5f0f [NOT] EXISTS (\u5b50\u67e5\u8a62) HAVING \u5b50\u67e5\u8a62\u8207\u7d50\u5408\u67e5\u8a62 \u6709\u4e9b\u6642\u5019\u53ef\u4ee5\u4f7f\u7528\u7d50\u5408\u67e5\u8a62\u5c31\u597d SELECT Name FROM city WHERE ID NOT IN ( SELECT Captial FROM country WHERE Captial IS NOT NULL) \u5148left join\u518d\u628anot null\u53bb\u6389\u9054\u6210\u8ddf\u4e0a\u9762\u76f8\u540c\u6548\u679c SELECT city.Name, country,Capital FROM city LEFT JOIN country ON city.ID = country.Capital WHERE country.Capital IS NULL Views \u5982\u679c\u5728\u8cc7\u6599\u5eab\u7684\u61c9\u7528\u4e2d\uff0c\u51fa\u73fe\u5f88\u5e38\u57f7\u884c\u7684\u67e5\u8a62\u6558\u8ff0\u6642\uff0c\u4f60\u53ef\u4ee5\u5728MySQL\u8cc7\u6599\u5eab\u4e2d\u5efa\u7acb\u4e00\u7a2e\u300cView\u300d\u5143\u4ef6\uff0cView\u5143\u4ef6\u7528\u4f86\u4fdd\u5b58\u4e00\u6bb5\u4f60\u6307\u5b9a\u7684\u67e5\u8a62\u6558\u8ff0\u3002 \u4e5f\u6709\u5f88\u591a\u4eba\u7a31\u300cView\u300d\u5143\u4ef6\u662f\u4e00\u7a2e\u300c\u865b\u64ec\u8868\u683c\u300d\uff0c\u56e0\u70ba\u5b83\u4e0d\u662f\u4e00\u500b\u771f\u6b63\u5132\u5b58\u7d00\u9304\u8cc7\u6599\u7684\u8868\u683c\uff0c\u53ef\u662f\u5b83\u53c8\u8ddf\u8868\u683c\u7684\u7528\u6cd5\u985e\u4f3c\u3002 CREATE [OR REPLACE] VIEW \u540d\u7a31 \u5982\u679c\u9700\u8981\u4fee\u6539\u4e00\u500b\u5df2\u7d93\u5efa\u7acb\u597d\u7684View\u5143\u4ef6\uff0c\u4f60\u5c31\u8981\u52a0\u5165\u300cOR REPLACE\u300d\u7684\u8a2d\u5b9a \u5982\u679c\u60f3\u8981\u67e5\u8a62\u4e00\u500bView\u5143\u4ef6\u4e2d\u6703\u50b3\u56de\u54ea\u4e9b\u6b04\u4f4d\u7684\u8cc7\u6599\uff0c\u53ef\u4ee5\u4f7f\u7528\u300cDESCRIBE\u300d\u6216\u662f\u6bd4\u8f03\u7c21\u77ed\u7684\u300cDESC\u300d\u6307\u4ee4 \u4e0b\u5217\u662fMySQL\u95dc\u65bcView\u5143\u4ef6\u7684\u898f\u5b9a\u8207\u9650\u5236\uff1a \u5728\u540c\u4e00\u500b\u8cc7\u6599\u5eab\u4e2d\uff0cView\u7684\u540d\u7a31\u4e0d\u53ef\u4ee5\u91cd\u8907\uff0c\u4e5f\u4e0d\u53ef\u4ee5\u8ddf\u8868\u683c\u540d\u7a31\u4e00\u6a23 View\u4e0d\u53ef\u4ee5\u8ddfTriggers\u5efa\u7acb\u806f\u7d50 \u5132\u5b58\u5728View\u4e2d\u7684\u67e5\u8a62\u6558\u8ff0\u4e5f\u6709\u4e0b\u5217\u7684\u898f\u5b9a\uff1a \u67e5\u8a62\u6558\u8ff0\u4e2d\u53ea\u80fd\u4f7f\u7528\u5230\u5df2\u5b58\u5728\u7684\u8868\u683c\u6216View \u300cFROM\u300d\u5b50\u53e5\u4e2d\u4e0d\u53ef\u4ee5\u4f7f\u7528\u5b50\u67e5\u8a62 \u4e0d\u53ef\u4ee5\u4f7f\u7528\u300cTEMPORARY\u300d\u8868\u683c \u4e0d\u53ef\u4ee5\u4f7f\u7528\u81ea\u884c\u5b9a\u7fa9\u7684\u8b8a\u6578\u3001Procedure\u8207Prepared statement\u53c3\u6578 \u89e3\u6c7a\u6b04\u4f4d\u540d\u7a31\u4e00\u6a23\u7684\u65b9\u6cd5\u9664\u4e86\u4f7f\u7528\u5225\u540d\u5916\uff0c\u4e5f\u53ef\u4ee5\u6307\u5b9aView\u5143\u4ef6\u6b04\u4f4d\u540d\u7a31\uff1a CREATE [OR REPLACE] VIEW \u540d\u7a31 [(\u6b04\u4f4d\u540d\u7a31[,...])] AS \u67e5\u8a62\u6558\u8ff0 \u4f7f\u7528\u300cALTER VIEW\u300d\u6558\u8ff0\uff0c\u53ef\u4ee5\u8b93\u4f60\u4fee\u6539\u4e00\u500b\u5df2\u7d93\u5efa\u7acb\u597d\u7684View\u5143\u4ef6 \u5982\u679c\u4ee5\u4fee\u6539View\u5143\u4ef6\u7684\u5de5\u4f5c\u4f86\u8aaa\uff0c\u4f7f\u7528\u300cALTER VIEW\u300d\u6216\u300cCREATE OR REPLACE VIEW\u300d\u6558\u8ff0\u7684\u6548\u679c\u662f\u5b8c\u5168\u4e00\u6a23\u7684\u3002\u552f\u4e00\u7684\u5dee\u7570\u662f\u8981\u4fee\u6539View\u5143\u4ef6\u5982\u679c\u4e0d\u5b58\u5728\u7684\u8a71\uff0c\u300cCREATE OR REPLACE VIEW\u300d\u6558\u8ff0\u6703\u76f4\u63a5\u5efa\u7acb\u65b0\u7684View\u5143\u4ef6 \u4f7f\u7528\u300cDROP VIEW\u300d\u522a\u9664\u4e00\u500b\u4e0d\u9700\u8981\u7684View\u5143\u4ef6 \u5c0dView\u505a\u300cINSERT\u300d\u3001\u300cUPDATE\u300d\u548c\u300cDELETE\u300d\u90fd\u6703\u76f4\u63a5\u5f71\u97ff\u4f86\u6e90\u8cc7\u6599 \u52a0\u5165\u300cWITH CHECK OPTION\u300d\u8a2d\u5b9a\u7684View\u5143\u4ef6\uff0c\u5728\u57f7\u884c\u8cc7\u6599\u7dad\u8b77\u5de5\u4f5c\u6642\uff0c\u6703\u5148\u57f7\u884c\u6aa2\u67e5\u7684\u5de5\u4f5c\uff0c\u898f\u5247\u662f\u4e00\u5b9a\u8981\u7b26\u5408\u300cView\u5143\u4ef6\u4e2dWHERE\u8a2d\u5b9a\u7684\u689d\u4ef6\u300d View\u5143\u4ef6\u4e2d\u7684\u300cWITH CHECK OPTION\u300d\u8a2d\u5b9a\uff0c\u9084\u6709\u984d\u5916\u7684\u300cCASCADE\u300d\u548c\u300cLOCAL\u300d\u5169\u500b\u63a7\u5236\u6aa2\u67e5\u7bc4\u570d\u7684\u8a2d\u5b9a\uff0c\u6aa2\u67e5\u7bc4\u570d\u8a2d\u5b9a\u70ba\u300cLOCAL\u300d\u7684View\u5143\u4ef6\uff0c\u5728\u57f7\u884c\u8cc7\u6599\u7dad\u8b77\u7684\u6642\u5019\uff0c\u53ea\u6703\u6aa2\u67e5\u662f\u5426\u7b26\u5408\u81ea\u5df1\u7684\u689d\u4ef6\u8a2d\u5b9a\uff1b\u6aa2\u67e5\u7bc4\u570d\u8a2d\u5b9a\u70ba\u300cCASCADE\u300d\u7684View\u5143\u4ef6\uff0c\u5728\u57f7\u884c\u8cc7\u6599\u7dad\u8b77\u7684\u6642\u5019\uff0c\u5c31\u4e0d\u80fd\u9055\u53cd\u6240\u6709VIew\u5143\u4ef6\u7684\u689d\u4ef6\u8a2d\u5b9a View\u5143\u4ef6\u53ef\u4ee5\u63d0\u4f9b\u66f4\u65b9\u4fbf\u7684\u8cc7\u6599\u67e5\u8a62\u8207\u7dad\u8b77\u65b9\u5f0f\uff0c\u5728\u4f60\u5efa\u7acbView\u5143\u4ef6\u7684\u6642\u5019\uff0c\u9664\u4e86\u6307\u5b9a\u7684\u67e5\u8a62\u6558\u8ff0\u8981\u7b26\u5408\u898f\u5b9a\uff0c\u9084\u53ef\u4ee5\u6307\u5b9a\u8cc7\u6599\u5eab\u57f7\u884cView\u5143\u4ef6\u6642\u6240\u4f7f\u7528\u7684\u300c\u6f14\u7b97\u6cd5\u3001algorithm\u300d \u53ef\u4f7f\u7528\u6aa2\u67e5\u8868\u683c\u6216View\u5143\u4ef6\u7684\u6558\u8ff0\u300cCHECK TABLE\u300d\u6aa2\u67e5View\u5143\u4ef6\u5305\u542b\u7684\u67e5\u8a62\u6558\u8ff0\u662f\u5426\u6b63\u78ba MySQL\u8cc7\u6599\u5eab\u5728\u555f\u52d5\u4ee5\u5f8c\uff0c\u6703\u6709\u4e00\u500b\u5f88\u7279\u5225\u7684\u8cc7\u6599\u5eab\uff0c\u540d\u7a31\u662f\u300cinformation_schema\u300d\uff0c\u9019\u500b\u8cc7\u6599\u5eab\u901a\u5e38\u6703\u7a31\u70ba\u300c\u7cfb\u7d71\u8cc7\u8a0a\u8cc7\u6599\u5eab\u300d\u3002\u9019\u500b\u8cc7\u6599\u5eab\u4e2d\u6709\u4e00\u500b\u8868\u683c\u53eb\u4f5c\u300cVIEWS\u300d\uff0c\u5b83\u5132\u5b58\u6240\u6709MySQL\u8cc7\u6599\u5eab\u4e2dView\u5143\u4ef6\u7684\u76f8\u95dc\u8cc7\u8a0a Prepared Statement \u4f7f\u7528\u8005\u8b8a\u6578 MySQL\u8cc7\u6599\u5eab\u4f3a\u670d\u5668\u63d0\u4f9b\u4e00\u7a2e\u7c21\u6613\u7684\u5132\u5b58\u8cc7\u6599\u65b9\u5f0f\uff0c\u7a31\u70ba\u300c\u4f7f\u7528\u8005\u8b8a\u6578\u3001user variables\u300d\u3002\u4f7f\u7528\u8005\u8b8a\u6578\u5132\u5b58\u4e00\u4e9b\u7c21\u55ae\u7684\u8cc7\u6599\uff0c\u4f8b\u5982\u6578\u5b57\u6216\u5b57\u4e32\uff0c\u5b83\u5011\u53ef\u4ee5\u5728\u5f8c\u7e8c\u7684\u64cd\u4f5c\u4e2d\u4f7f\u7528\u3002 SET @\u8b8a\u6578\u540d\u7a31 {= | := } \u503c [\u3121] select\u9806\u4fbf\u8a2d\u5b9a\u8b8a\u6578(\u53ea\u80fd\u4f7f\u7528 := )\uff1a SELECT @\u8b8a\u6578\u540d\u7a31 := \u503c [,...] Prepared Statements\u7684\u61c9\u7528 \u5982\u679c\u6709\u300c\u8a31\u591a\u8981\u57f7\u884c\u7684\u6558\u8ff0\uff0c\u53ef\u662f\u5167\u5bb9\u537b\u76f8\u4f3c\u300d\u7684\u60c5\u6cc1\uff0c\u53ef\u4ee5\u4f7f\u7528\u300cPrepared statements\u300d\u6539\u5584\u8cc7\u6599\u5eab\u7684\u6548\u7387\u3002 \u4e00\u822c\uff1a \u6aa2\u67e5->\u89e3\u6790->\u57f7\u884c->\u56de\u50b3 SELECT Code, Name, GNP FROM country WHERE Code = 'USA' \u4f7f\u7528prepared statement \u6aa2\u67e5->\u89e3\u6790->\u4fdd\u5b58 PREPARE my_country FROM `SELECT Code, Name, GNP FROM country WHERE Code = ?' \u57f7\u884c->\u56de\u50b3 SET @my_code = 'USA' EXECUTE my_country USING @my_code \u5efa\u7acb PREPARE \u540d\u7a31 FROM '\u6558\u8ff0` \u57f7\u884c EXECUTE \u540d\u7a31 [USING @\u8b8a\u6578\u540d\u7a31[,...]] \u522a\u9664 { DEALLOCATE | DROP } PREPARE \u540d\u7a31 prepared statement\u4f7f\u7528?\u4f86\u4ee3\u8868\u9700\u8981\u7684\u53c3\u6578\uff0c\u50b3\u5165\u7684\u6642\u5019\u6703\u4f9d\u7167\u9806\u5e8f\u5e36\u5165\uff0c\u6578\u91cf\u4e0d\u5c0d\u6703\u7522\u751f\u932f\u8aa4\uff1b\u5982\u679c\u50b3\u5165\u7684\u8b8a\u6578\u4e0d\u5b58\u5728\u6703\u8b8a\u6210NULL\u3002 \u6240\u6709\u4f7f\u7528\u8005\u8b8a\u6578\u8207prepared statements\u90fd\u662f\u67d0\u4e00\u500b\u7528\u6236\u7aef\u5c08\u5c6c\u7684\uff0c\u5982\u679c\u7528\u6236\u7aef\u96e2\u7dda\u4ee5\u5f8c\uff0c\u4ed6\u6240\u8a2d\u5b9a\u7684\u4f7f\u7528\u8005\u8b8a\u6578\u8207prepared statements\u90fd\u6703\u88ab\u6e05\u9664\uff0c\u6240\u4ee5\u5efa\u7acbprepared statements\u6642\uff0c\u4e0d\u53ef\u4ee5\u6307\u5b9a\u5b83\u662f\u5c6c\u65bc\u54ea\u4e00\u500b\u8cc7\u6599\u5eab\uff0c\u5426\u5247\u6703\u6709\u932f\u8aa4\u8a0a\u606f\u3002 Stored Routines \u5165\u9580 Sotred Routines\u7684\u8b8a\u6578\u8207\u6d41\u7a0b Stored Routines\u9032\u968e Triton Ho \u8def\u908a\u5c0f\u9178\u9178\u7684\u4fe1\u7bb1\u6536\u5230\u7684\u554f\u984c\uff1a \u70ba\u4ec0\u9ebc\u9280\u884c\u90fd\u559c\u6b61\u628aSQL\u5beb\u5728\u9810\u5b58\u7a0b\u5e8f\u5167\uff1f \u9664\u4e86\u6bd4\u8f03\u5feb\u3001\u6bd4\u8f03\u5b89\u5168\u4ee5\u53ca\u4e0d\u7528\u4f48\u7248\uff0c\u537b\u4e5f\u5931\u53bb\u4e86\u5f48\u6027\uff0c\u9019\u6a23\u597d\u55ce \u4e00\u652f\u9810\u5b58\u7a0b\u5e8f\u8655\u7406\u597d\u6240\u6709\u4e8b\u60c5\uff0c\u9084\u662f\u5728AP\u547c\u53eb\u4e0d\u540c\u7684\u9810\u5b58\u7a0b\u5e8f\u597d \u524d\u8005\u5beb\u5f97\u5feb\u4f46\u96e3\u7dad\u8b77\uff0c\u5f8c\u8005\u6162\u4e00\u4e9b\u4e9b\u4f46\u53ef\u7dad\u8b77\u6027\u537b\u63d0\u5347\u4e86\u4e0d\u5c11 \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014 \u6211\u53cd\u554f\u4e00\u53e5\uff1a \u5982\u679c\u662f\u5927\u7d04\uff11\uff15\u5e74\u524d\uff0c\u4f60\u662f\u9280\u884c\u7684Tech Lead\uff0c\u4f60\u6703\u6253\u7b97\u7528\u4ec0\u9ebcprogramming language\u53bb\u5beb\u4f60\u7684business logic\uff1f \uff11\u3000PHP\uff1f\u5225\u9b27\u597d\u55ce\uff0cweak typed language\u5c11\u4e86compiler\u4fbf\u5c11\u4e86\u591a\u4e00\u4efd\u984d\u5916\u7684\u6aa2\u67e5\u3002\u9280\u884c\u7684\u5e33\u76ee\u932f\u4e00\u4e0b\u90fd\u662f\u88ab\u653f\u5e9c\u6293\u53bb\u62b1\u8336\u7684 \uff12\u3000Java\uff1f\u525b\u51fa\u4e16\uff0c\u9084\u6c92\u6210\u719f \uff13\u3000ASP .NET\uff1f\u672a\u767c\u660e\uff0c886 \uff14\u3000ASP\uff1a\u9664\u4e86MS MVP\u4e4b\u5916\u6c92\u4eba\u8b9a\u597d\u7684\u8a9e\u8a00 \u90a3\u6642\u7a7a\u4e0b\uff0c\u4e00\u5806\u73fe\u4ee3\u7684\u8a9e\u8a00\u6839\u672c\u9084\u672a\u51fa\u4f86\uff0f\u6210\u719f\u3002\u6240\u4ee5\u7528\u90a3\u6642\u7a7a\u4e0b\u76f8\u5c0d\u5df2\u7d93\u6210\u719f\u7684stored procedure\u662f\u4e00\u500b\u5408\u7406\u9078\u64c7\u3002 \u800c\u9280\u884c\u7cfb\u7d71\uff0c\u4e00\u5411\u90fd\u662f\u6c92\u4e8b\u5c31\u4e0d\u6703\u8f15\u6613\u6539\u52d5\uff0f\u5347\u7d1a\u7684\u3002 \uff08\u73fe\u5be6\u554f\u984c\uff1a\u6709\u4eba\u78b0\u904e\u7684source code\u4fbf\u6709\u5e36\u5165\u65b0bug\u7684\u98a8\u96aa\u2026\u2026\uff09 \u6240\u4ee5\uff0c\u4e00\u5806\u5beb\u4e0b\u4f86\u7684stored procedure\u5230\u4eca\u5929\u9084\u6c92\u88ab\u66ff\u4ee3\u6389\u4e5f\u662f\u5f88\u6b63\u5e38\u7684\u3002 \u6700\u5f8c\u4e00\u53e5\uff1a\u9664\u4e86\u6975\u5c11\u6578\u7279\u6b8a\u5834\u5408\uff0c2019\u7684\u4eca\u5929\u4e0d\u61c9\u8a72\u518d\u628abusiness logic\u653e\u5728stored procedure\u5167 Triggers \u6211\u89ba\u5f97\u9019\u6771\u897f\u4e5f\u4e0d\u8a72\u5b58\u5728 \u67e5\u8a62 information_schema \u8868\u683c\u540d\u7a31 \u8aaa\u660e CHARACTER_SETS MySQL\u8cc7\u6599\u5eab\u652f\u63f4\u7684\u5b57\u5143\u96c6 COLLATIONS MySQL\u8cc7\u6599\u5eab\u652f\u63f4\u7684collation COLLATION_CHARACTER_SET_APPLICABILITY \u5b57\u5143\u96c6\u8207collation\u5c0d\u61c9\u8cc7\u8a0a COLUMNS \u6b04\u4f4d\u8cc7\u8a0a COLUMN_PRIVILEGES \u6b04\u4f4d\u6388\u6b0a\u8cc7\u8a0a KEY_COLUMN_USAGE \u7d22\u5f15\u6b04\u4f4d\u7684\u9650\u5236\u8cc7\u8a0a ENGINES MySQL\u8cc7\u6599\u5eab\u652f\u63f4\u7684\u5132\u5b58\u5f15\u64ce GLOBAL_STATUS MySQL\u8cc7\u6599\u5eab\u4f3a\u670d\u5668\u72c0\u614b\u8cc7\u8a0a GLOBAL_VARIABLES MySQL\u8cc7\u6599\u5eab\u4f3a\u670d\u5668\u8b8a\u6578\u8cc7\u8a0a KEY_COLUMN_USAGE \u7d22\u5f15\u9375\u8cc7\u8a0a ROUTINES Stored routines\u8cc7\u8a0a SCHEMATA \u8cc7\u6599\u5eab\u8cc7\u8a0a SESSION_STATUS \u7528\u6236\u7aef\u9023\u7dda\u72c0\u614b\u8cc7\u8a0a SESSION_VARIABLES \u7528\u6236\u7aef\u9023\u7dda\u8b8a\u6578\u8cc7\u8a0a STATISTICS \u8868\u683c\u7d22\u5f15\u8cc7\u8a0a TABLES \u8868\u683c\u8cc7\u8a0a TABLE_CONSTRAINTS \u8868\u683c\u9650\u5236\u8cc7\u8a0a TABLE_PRIVILEGES \u8868\u683c\u6388\u6b0a\u8cc7\u8a0a TRIGGERS Triggers\u8cc7\u8a0a USER_PRIVILEGES \u4f7f\u7528\u8005\u6388\u6b0a\u8cc7\u8a0a VIEWS Views\u8cc7\u8a0a \u300cinformation_schema\u300d\u8cc7\u6599\u5eab\u7a31\u70ba\u300cdatabase metadata\u300d\uff0c\u5305\u542b\u8cc7\u6599\u5eab\u5143\u4ef6\u8207\u4f3a\u670d\u5668\u904b\u4f5c\u7684\u5b8c\u6574\u8cc7\u8a0a\u90fd\u5132\u5b58\u5728\u9019\u500b\u8cc7\u6599\u5eab\u4e2d\u3002\u4f60\u4e0d\u9808\u8981\u81ea\u5df1\u5efa\u7acb\u8207\u7dad\u8b77\u300cinformation_schema\u300d\u8cc7\u6599\u5eab\uff0c\u5b83\u662f\u7531MySQL\u8cc7\u6599\u5eab\u4f3a\u670d\u5668\u8ca0\u8cac\u5efa\u7acb\u8207\u7dad\u8b77\u7684\u3002\u4f60\u53ea\u80fd\u5920\u5728\u9700\u8981\u7684\u6642\u5019\uff0c\u4f7f\u7528\u300cSELECT\u300d\u6558\u8ff0\u4f86\u67e5\u8a62\u5132\u5b58\u5728\u88e1\u9762\u7684\u8cc7\u6599\u3002 SHOW\u6307\u4ee4 \u9664\u4e86\u4f7f\u7528\u67e5\u8a62\u6558\u8ff0\u76f4\u63a5\u67e5\u8a62\u300cinformation_schema\u300d\u8cc7\u6599\u5eab\u4e2d\u7684\u8cc7\u8a0a\u5916\uff0cMySQL\u8cc7\u6599\u5eab\u4f3a\u670d\u5668\u4f9b\u6709\u8a31\u591a\u4e0d\u540c\u7528\u6cd5\u7684\u300cSHOW\u300d\u6307\u4ee4\uff0c\u540c\u6a23\u53ef\u4ee5\u67e5\u8a62\u8cc7\u6599\u5eab\u8cc7\u8a0a\u3002\u300cSHOW\u300d\u6307\u4ee4\u662fMySQL\u8cc7\u6599\u5eab\u4f3a\u670d\u5668\u5c08\u7528\u7684\u6307\u4ee4\uff0c\u4e26\u4e0d\u662f\u6a19\u6e96\u7684SQL\u6558\u8ff0\u3002 \u67e5\u8a62MySQL\u8cc7\u6599\u5eab\u4f3a\u670d\u5668\u4e2d\u7684\u8cc7\u6599\u5eab\u8cc7\u8a0a\uff1a SHOW {DATABASES | SCHEMAS} [LIKE '\u6a23\u7248'] \u67e5\u8a62MySQL\u8cc7\u6599\u5eab\u4f3a\u670d\u5668\u4e2d\u7684\u8868\u683c\u8cc7\u8a0a\uff1a SHOW TABLES [FROM \u8cc7\u6599\u5eab\u540d\u7a31] [LIKE '\u6a23\u7248'] SHOW TABLES STATUS [FROM \u8cc7\u6599\u5eab\u540d\u7a31] [LIKE '\u6a23\u7248' | WHERE \u689d\u4ef6] \u67e5\u8a62MySQL\u8cc7\u6599\u5eab\u4f3a\u670d\u5668\u4e2d\u7684\u6b04\u4f4d\u8cc7\u8a0a\uff1a SHOW [FULL] COLUMNS FROM \u8868\u683c\u540d\u7a31 [FROM \u8cc7\u6599\u5eab\u540d\u7a31] [LIKE '\u6a23\u7248' | WHERE \u689d\u4ef6] \u67e5\u8a62MySQL\u8cc7\u6599\u5eab\u4f3a\u670d\u5668\u4e2d\u7684\u7d22\u5f15\u8cc7\u8a0a\uff1a SHOW INDEX FROM \u8868\u683c\u540d\u7a31 [FROM \u8cc7\u6599\u5eab\u540d\u7a31] [WHERE \u689d\u4ef6] \u67e5\u8a62MySQL\u8cc7\u6599\u5eab\u4f3a\u670d\u5668\u4e2d\u7684trigger\u8cc7\u8a0a\uff1a SHOW TRIGGERS [FROM \u8cc7\u6599\u5eab\u540d\u7a31] [LIKE '\u6a23\u7248' | WHERE \u689d\u4ef6] \u67e5\u8a62MySQL\u8cc7\u6599\u5eab\u4f3a\u670d\u5668\u4e2d\u7684\u5b57\u5143\u96c6\u8207collation\u8cc7\u8a0a\uff1a SHOW CHARACTER SET [LIKE '\u6a23\u7248' | WHERE \u689d\u4ef6] SHOW COLLATION [LIKE '\u6a23\u7248' | WHERE \u689d\u4ef6] \u67e5\u8a62MySQL\u8cc7\u6599\u5eab\u4f3a\u670d\u5668\u4e2d\u652f\u63f4\u7684\u5132\u5b58\u5f15\u64ce\u8cc7\u8a0a\uff1a SHOW [STORAGE] ENGINE \u67e5\u8a62MySQL\u8cc7\u6599\u5eab\u4f3a\u670d\u5668\u72c0\u614b\u8207\u7cfb\u7d71\u8b8a\u6578\u8cc7\u8a0a\uff1a SHOW [GLOBAL | SESSION] STATUS [LIKE '\u6a23\u7248 | WHERE \u689d\u4ef6] SHOW [GLOBAL | SESSION] VARIABLES [LIKE '\u6a23\u7248 | WHERE \u689d\u4ef6] \u67e5\u8a62MySQL\u8cc7\u6599\u5eab\u4f3a\u670d\u5668\u4e2d\u8207\u5b57\u5143\u96c6\u76f8\u95dc\u7684\u8b8a\u6578\u8cc7\u8a0a\uff1a SHOW GLOBAL VARIABLE LIKE 'character%` \u5efa\u7acb\u5143\u4ef6\u8cc7\u8a0a \u4e0b\u5217\u7684\u300cSHOW\u300d\u6307\u4ee4\u8a9e\u6cd5\u53ef\u4ee5\u67e5\u8a62MySQL\u8cc7\u6599\u5eab\u4f3a\u670d\u5668\u4e2d\u5efa\u7acb\u5404\u7a2e\u5143\u4ef6\u7684\u8a73\u7d30\u8cc7\u8a0a\uff1a \u6307\u4ee4 \u8aaa\u660e SHOW CREATE DATABASE \u8cc7\u6599\u5eab\u540d\u7a31 \u67e5\u8a62\u5efa\u7acb\u8cc7\u6599\u5eab\u7684\u8a73\u7d30\u8cc7\u8a0a SHOW CREATE TABLE \u8868\u683c\u540d\u7a31 \u67e5\u8a62\u5efa\u7acb\u8868\u683c\u7684\u8a73\u7d30\u8cc7\u8a0a SHOW CREATE FUNCTION \u540d\u7a31 \u67e5\u8a62\u5efa\u7acbFunction\u7684\u8a73\u7d30\u8cc7\u8a0a SHOW CREATE PROCEDURE \u540d\u7a31 \u67e5\u8a62\u5efa\u7acbProcedure\u7684\u8a73\u7d30\u8cc7\u8a0a SHOW CREATE VIEW \u540d\u7a31 \u67e5\u8a62\u5efa\u7acbView\u7684\u8a73\u7d30\u8cc7\u8a0a DESCRIBE\u6307\u4ee4 \u300cDESCRIBE\u300d\u662fMySQL\u8cc7\u6599\u5eab\u4f3a\u670d\u5668\u63d0\u4f9b\u7684\u7279\u6b8a\u6307\u4ee4\uff0c\u4e26\u4e0d\u662f\u6a19\u6e96\u7684SQL\u6558\u8ff0\u3002\u5b83\u53ef\u4ee5\u67e5\u8a62\u6307\u5b9a\u8868\u683c\u7684\u6b04\u4f4d\u8cc7\u8a0a\uff1a {DESCRIBE | DESC} \u8868\u683c\u540d\u7a31 [\u6b04\u4f4d\u540d\u7a31 | '\u6a23\u7248'] mysqlshow MySQL\u8cc7\u6599\u5eab\u4f3a\u670d\u5668\u63d0\u4f9b\u4e00\u500b\u53ef\u4ee5\u5728\u547d\u4ee4\u63d0\u793a\u5b57\u5143\u4e0b\u57f7\u884c\u7684\u5de5\u5177\u7a0b\u5f0f\u300cmysqlshow\u300d\uff1a mysqlshow -h \u8cc7\u6599\u5eab\u4f3a\u670d\u5668 -u \u5e33\u865f -p\u5bc6\u78bc \u5bc6\u78bc\u8ddf-p\u4e4b\u9593\u4e0d\u80fd\u6709\u7a7a\u683c \u932f\u8aa4\u8655\u7406\u8207\u67e5\u8a62 MySQL\u8cc7\u6599\u5eab\u74b0\u5883\u4e2d\uff0c\u53ef\u4ee5\u4f7f\u7528\u300csql_mode\u300d\u7cfb\u7d71\u8b8a\u6578\u8a2d\u5b9a\u8cc7\u6599\u5eab\u5c0d\u65bc\u6aa2\u67e5\u932f\u8aa4\u8cc7\u6599\u7684\u300c\u56b4\u683c\u300d\u7a0b\u5ea6\uff0c\u5206\u70ba\u300cstrict\u300d\u8207\u300cnon-strict\u300d\u5169\u7a2e\u6a21\u5f0f\u3002\u5728strict\u6a21\u5f0f\u4e0b\uff0c\u8cc7\u6599\u5eab\u6703\u56b4\u683c\u7684\u6aa2\u67e5\u8207\u767c\u73fe\u932f\u8aa4\u7684\u8cc7\u6599\uff0c\u800c\u4e14\u4e0d\u6703\u5132\u5b58\u932f\u8aa4\u7684\u8cc7\u6599\uff1b\u5728non-strict\u6a21\u5f0f\u4e0b\uff0c\u8cc7\u6599\u5eab\u540c\u6a23\u6703\u6aa2\u67e5\u8207\u767c\u73fe\u932f\u8aa4\u7684\u8cc7\u6599\uff0c\u4e0d\u904e\u5b83\u6703\u5118\u91cf\u8a66\u8457\u8655\u7406\u9019\u4e9b\u932f\u8aa4\u7684\u8cc7\u6599\uff0c\u518d\u628a\u8cc7\u6599\u5132\u5b58\u8d77\u4f86\u3002 \u4f60\u53ef\u4ee5\u4f9d\u7167\u81ea\u5df1\u7684\u9700\u6c42\u8a2d\u5b9a\u300csql_mode\u300d\u7cfb\u7d71\u8b8a\u6578\uff0c\u4e0b\u5217\u7684\u6307\u4ee4\u53ef\u4ee5\u8a2d\u5b9a\u70ba\u300cnon-strict\u300d\u6a21\u5f0f\uff1a SET sql_mode = '' \u4e0b\u5217\u7684\u6558\u8ff0\u8a2d\u5b9a\u70ba\u300cstrict\u300d\u6a21\u5f0f\uff1a SET sql_mode = 'STRICT_TRANS_TABLES' SET sql_mode = 'STRICT_ALL_TABLES' Non-Strict\u6a21\u5f0f SET [SESSION | GLOBAL] sql_mode = '[\u8a2d\u5b9a[,...]]' \u5982\u679c\u8cc7\u6599\u5eab\u767c\u73fe\u4e0d\u7b26\u5408\u6b04\u4f4d\u898f\u5b9a\u7684\u8cc7\u6599\uff0c\u5b83\u6703\u5118\u91cf\u8a66\u8457\u8655\u7406\u9019\u4e9b\u932f\u8aa4\u7684\u8cc7\u6599\uff0c\u518d\u628a\u8cc7\u6599\u5132\u5b58\u8d77\u4f86\uff0c\u7136\u5f8c\u4f7f\u7528\u8b66\u544a\u8a0a\u606f\u901a\u77e5\u4f60\u3002 \u5728non-strict\u6a21\u5f0f\u904b\u4f5c\u6642\uff0c\u4e0b\u5217\u5e7e\u7a2e\u60c5\u5f62\u90fd\u6709\u53ef\u80fd\u6703\u555f\u52d5\u81ea\u52d5\u4fee\u6b63\u8cc7\u6599\u7684\u529f\u80fd\uff1a \u57f7\u884c\u65b0\u589e\u6216\u4fee\u6539\u6558\u8ff0\uff0c\u5305\u542bINSERT\u3001REPLACE\u3001UPDATE\u8207LOAD DATA INFILE \u4f7f\u7528ALTER TABLE\u4fee\u6539\u8868\u683c\u7684\u6b04\u4f4d\u5b9a\u7fa9 \u5728\u6b04\u4f4d\u5b9a\u7fa9\u4e2d\u4f7f\u7528\u300cDEFAULT\u300d\u6307\u5b9a\u6b04\u4f4d\u7684\u9810\u8a2d\u503c Strict\u6a21\u5f0f\u8207IGNORE\u95dc\u9375\u5b57 \u4f60\u4e5f\u53ef\u4ee5\u5c07\u8cc7\u6599\u5eab\u8a2d\u5b9a\u70ba\u300cstrict\u300d\u6a21\u5f0f\uff0c\u5728\u9019\u500b\u6a21\u5f0f\u4e0b\uff0c\u53ea\u6709\u5728\u5132\u5b58\u5b57\u4e32\u8cc7\u6599\u5230\u975e\u5b57\u4e32\u578b\u614b\u7684\u6b04\u4f4d\u6642\uff0c\u8cc7\u6599\u5eab\u6703\u5617\u8a66\u5e6b\u4f60\u6307\u5b9a\u7684\u5b57\u4e32\u8f49\u63db\u70ba\u6b04\u4f4d\u578b\u614b\uff1b\u5176\u5b83\u4efb\u4f55\u9055\u53cd\u8cc7\u6599\u578b\u614b\u7684\u554f\u984c\uff0c\u8cc7\u6599\u5eab\u4e0d\u6703\u5132\u5b58\u932f\u8aa4\u7684\u8cc7\u6599\uff0c\u800c\u4e14\u6703\u7522\u751f\u932f\u8aa4\u8a0a\u606f\u3002 \u5728\u300cstrict\u300d\u6a21\u5f0f\u6a21\u5f0f\u4e0b\u57f7\u884c\u65b0\u589e\u8207\u4fee\u6539\u6642\uff0c\u53ef\u4ee5\u4f9d\u7167\u9700\u6c42\u52a0\u5165\u300cIGNORE\u300d\u95dc\u9375\u5b57\u57f7\u884cnon-strict\u6a21\u5f0f\uff1a INSERT [IGNORE] [INTO] \u8868\u683c\u540d\u7a31 ... UPDATE [IGNORE] \u8868\u683c\u540d\u7a31 ... \u5176\u5b83\u8a2d\u5b9a \u300csql_mode\u300d\u8b8a\u6578\u8a2d\u5b9a\u70ba\u300cnon-strict\u300d\u6216\u300cstrict\u300d\u6a21\u5f0f\u5f8c\uff0c\u9084\u53ef\u4ee5\u4f9d\u7167\u81ea\u5df1\u7684\u9700\u6c42\u52a0\u5165\u984d\u5916\u7684\u8a2d\u5b9a\uff1a \u8a2d\u5b9a\u503c \u8aaa\u660e ALLOW_INVALID_DATES \u5141\u8a31\u932f\u8aa4\u7684\u65e5\u671f\u8cc7\u6599 NO_ZERO_DATE \u4e0d\u5141\u8a31\u5168\u90e8\u662f0\u7684\u65e5\u671f\u8cc7\u6599 NO_ZERO_IN_DATE \u65e5\u671f\u8cc7\u6599\u4e2d\u4e0d\u53ef\u4ee5\u67090 ERROR_FOR_DIVISION_BY_ZERO \u9664\u4ee50\u6642\u7522\u751f\u932f\u8aa4\uff0c\u800c\u4e0d\u662f\u7522\u751fNULL\u503c \u6709\u4e00\u4e9bdefault\u7684sql_mode\u53ef\u4ee5\u8a2d\u5b9a\uff0c\u4f8b\u5982 MSSQL , ORACLE \u7b49\u3002 \u67e5\u8a62\u932f\u8aa4\u8207\u8b66\u544a \u5728\u57f7\u884cSQL\u6558\u8ff0\u5f8c\uff0c\u5982\u679c\u767c\u751f\u8b66\u544a\u6216\u932f\u8aa4\uff0c\u4f60\u53ef\u80fd\u9700\u8981\u6839\u64da\u9019\u4e9b\u8a0a\u606f\u4f86\u57f7\u884c\u4e00\u4e9b\u88dc\u6551\u5de5\u4f5c\u3002MySQL\u63d0\u4f9b\u7684\u300cSHOW\u300d\u6307\u4ee4\u53ef\u4ee5\u67e5\u8a62\u9019\u4e9b\u8a0a\u606f\uff1a SHOW WARNINGS [LIMIT [\u5ffd\u7565\u6578\u91cf,] \u6578\u91cf] SHOW ERRORS [LIMIT [\u5ffd\u7565\u6578\u91cf,] \u6578\u91cf] \u5982\u679c\u662f\u56e0\u70ba\u57f7\u884cSQL\u6558\u8ff0\uff0c\u5c0e\u81f4\u8cc7\u6599\u5eab\u7522\u751f\u7684\u8b66\u544a\u6216\u932f\u8aa4\uff0c\u90fd\u53ef\u4ee5\u4f7f\u7528\u300cSHOW WARNINGS\u300d\u6216\u300cSHOW ERRORS\u300d\u67e5\u8a62\uff1b\u4e0d\u904e\u4e5f\u6709\u53ef\u80fd\u662f\u56e0\u70ba\u4f5c\u696d\u7cfb\u7d71\u767c\u751f\u554f\u984c\uff0c\u5982\u679c\u767c\u751f\u9019\u985e\u7684\u932f\u8aa4\uff0c\u8a73\u7d30\u7684\u932f\u8aa4\u8a0a\u606f\u8981\u5728\u547d\u4ee4\u63d0\u793a\u5b57\u5143\u4e0b\uff0c\u4f7f\u7528\u300cperror\u300d\u7a0b\u5f0f\u4f86\u67e5\u8a62\uff1a shell> perror [Errorcode] \u532f\u5165\u8207\u532f\u51fa\u8cc7\u6599 \u4f60\u53ef\u4ee5\u4f7f\u7528SQL\u6558\u8ff0\u6216MySQL\u63d0\u4f9b\u7684\u7528\u6236\u7aef\u7a0b\u5f0f\uff0c\u57f7\u884c\u532f\u51fa\u8207\u532f\u5165\u7684\u5de5\u4f5c\u3002\u532f\u51fa\u8cc7\u6599\u53ef\u4ee5\u4f7f\u7528\u300cSELECT INTO OUTFILE\u300d\u6558\u8ff0\uff0c\u6216\u662f\u300cmysqldump\u300d\u7528\u6236\u7aef\u7a0b\u5f0f\uff0c\u5b83\u5011\u90fd\u53ef\u4ee5\u5c07\u6307\u5b9a\u7684\u8cc7\u6599\u5132\u5b58\u70ba\u6a94\u6848\u4fdd\u5b58\u8d77\u4f86\uff1b\u532f\u5165\u8cc7\u6599\u53ef\u4ee5\u4f7f\u7528\u300cLOAD DATA INFILE\u300d\u6558\u8ff0\uff0c\u6216\u662f\u300cmysqlimport\u300d\u7528\u6236\u7aef\u7a0b\u5f0f\uff0c\u5b83\u5011\u90fd\u53ef\u4ee5\u5c07\u6307\u5b9a\u6a94\u6848\u4e2d\u7684\u8cc7\u6599\u65b0\u589e\u5230\u8cc7\u6599\u5eab\u4e2d\u3002 \u4f7f\u7528SQL\u6558\u8ff0\u532f\u51fa\u8cc7\u6599 SELECT ... INTO OUTFILE `\u6a94\u6848\u540d\u7a31` [FIELDS [TERMINATED BY '\u5b57\u4e32'] [[OPTIONALLY] ENCLOSED BY '\u5b57\u5143'] [ESCAPED BY '\u5b57\u5143'] ] [LINES [STARTING BY '\u5b57\u4e32'] [TERMINATED BY '\u5b57\u4e32'] ] FROM ... \u4f7f\u7528\u300cFIELDS TERMINATED BY\u300d\u5b50\u53e5\u8a2d\u5b9a\u65b0\u7684\u5206\u9694\u5b57\u5143 \u4f7f\u7528\u300cFIELDS ESCAPED BY\u300d\u5b50\u53e5\u8a2d\u5b9a\u65b0\u7684\u8df3\u812b\u5b57\u5143\u7b26\u865f \u4f7f\u7528\u300cFIELDS ENCLOSED BY\u300d\u5b50\u53e5\u53ef\u4ee5\u8a2d\u5b9a\u5305\u570d\u6b04\u4f4d\u8cc7\u6599\u7684\u5b57\u5143\u7b26\u865f \u532f\u51fa\u7684\u8cc7\u6599\u5982\u679c\u9047\u5230\u300cNULL\u300d\u503c\u7684\u6642\u5019\uff0cMySQL\u6703\u4f7f\u7528\u300c\\N\u300d\u5132\u5b58\u5728\u6a94\u6848\u4e2d \u4f7f\u7528\u300cLINES STARTING BY\u300d\u8207\u300cTERMINATED BY\u300d\u5b50\u53e5\u53ef\u4ee5\u8a2d\u5b9a\u6bcf\u4e00\u5217\u8cc7\u6599\u958b\u59cb\u8207\u7d50\u675f\u5b57\u4e32 \u53ef\u4ee5\u7528\u4e0a\u9762\u9019\u4e9b\u8a2d\u5b9a\u515c\u51faCSV\u683c\u5f0f \u4f7f\u7528SQL\u6558\u8ff0\u532f\u5165\u8cc7\u6599 LOAD DATA [LOCAL] INFILE '\u6a94\u6848\u540d\u7a31' [IGNORE | REPLACE] INTO TABLE \u8868\u683c\u540d\u7a31 [FIELDS [TERMINATED BY '\u5b57\u4e32'] [[OPTIONALLY] ENCLOSED BY '\u5b57\u5143'] [ESCAPED BY '\u5b57\u5143'] ] [LINES [STARTING BY '\u5b57\u4e32'] [TERMINATED BY '\u5b57\u4e32'] ] [IGNORE \u6578\u503c LINES] [({\u6b04\u4f4d\u540d\u7a31 | \u4f7f\u7528\u8005\u8b8a\u6578}[,...])] [SET (\u6b04\u4f4d=\u904b\u7b97\u5f0f[,...])] default\u532f\u5165\u683c\u5f0f\u662ftab+\\N \u5728\u65b0\u589e\u3001\u4fee\u6539\u6216\u532f\u5165\u8cc7\u6599\u5230\u8cc7\u6599\u5eab\u7684\u6642\u5019\uff0c\u90fd\u6709\u53ef\u80fd\u767c\u751f\u7d22\u5f15\u503c\u91cd\u8907\u7684\u932f\u8aa4\uff0c\u5728\u4f7f\u7528\u300cLOAD DATA INFILE\u300d\u532f\u5165\u8cc7\u6599\u7684\u6642\u5019\uff0c\u5982\u679c\u767c\u751f\u7d22\u5f15\u503c\u91cd\u8907\u7684\u60c5\u6cc1\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u300cIGNORE\u300d\u6216\u300cREPLACE\u300d\u4f86\u6c7a\u5b9a\u8cc7\u6599\u5eab\u8a72\u4f5c\u4ec0\u9ebc\u8655\u7406 \u5728\u57f7\u884c\u532f\u5165\u8cc7\u6599\u7684\u6558\u8ff0\u4ee5\u5f8c\uff0c\u4f60\u61c9\u8a72\u6703\u60f3\u8981\u77e5\u9053\u6709\u591a\u5c11\u8cc7\u6599\u532f\u5165\u5230\u8cc7\u6599\u5eab\u4e2d\u3002\u5982\u679c\u4f60\u5728\u300cMySQL Query Browser\u300d\u5de5\u5177\u4e2d\u57f7\u884c\u300cLOAD DATA INFILE\u300d\u6558\u8ff0\u7684\u8a71\uff0c\u5b83\u6703\u544a\u8a34\u4f60\u7e3d\u5171\u5f71\u97ff\u4e86\u5e7e\u7b46\u8cc7\u6599\uff0c\u5305\u542b\u65b0\u589e\u8207\u4fee\u6539\uff1b\u5982\u679c\u4f60\u5728\u547d\u4ee4\u63d0\u793a\u5b57\u5143\u4e2d\u57f7\u884c\u300cLOAD DATA INFILE\u300d\u6558\u8ff0\u7684\u8a71\uff0c\u9664\u4e86\u5f71\u97ff\u7684\u8cc7\u6599\u6578\u91cf\u4ee5\u5916\uff0c\u9084\u6703\u544a\u8a34\u4f60\u6bd4\u8f03\u5b8c\u6574\u7684\u532f\u5165\u8cc7\u8a0a \u4f7f\u7528mysqldump\u7a0b\u5f0f\u532f\u51fa\u8cc7\u6599 MySQL\u63d0\u4f9b\u8a31\u591a\u4e0d\u540c\u61c9\u7528\u7684\u5de5\u5177\u7a0b\u5f0f\uff0c\u8b93\u4f60\u53ef\u4ee5\u5728\u547d\u4ee4\u63d0\u793a\u5b57\u5143\u4e2d\u57f7\u884c\uff0c\u9019\u4e9b\u5de5\u5177\u7a0b\u5f0f\u90fd\u662fMySQL\u624d\u6709\u7684\uff0c\u800c\u4e14\u5b83\u5011\u4e26\u4e0d\u662fSQL\u6558\u8ff0\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528\u300cmysqldump\u300d\u5de5\u5177\u7a0b\u5f0f\u532f\u51fa\u8cc7\u6599\u3002 mysqldump [\u9078\u9805] \u8cc7\u6599\u5eab\u540d\u7a31 [\u8868\u683c\u540d\u7a31...] \u4f7f\u7528mysqlimport\u7a0b\u5f0f\u532f\u5165\u8cc7\u6599 mysqlimport [\u9078\u9805] \u8cc7\u6599\u5eab\u540d\u7a31 \u6a94\u6848\u540d\u7a31[,...] \u5728\u6307\u5b9a\u8cc7\u6599\u6a94\u6848\u7684\u540d\u7a31\u6642\uff0c\u8981\u7279\u5225\u6ce8\u610f\u4e0b\u5217\u5169\u500b\u91cd\u9ede\uff1a \u8cc7\u6599\u6a94\u6848\u4e2d\u4e0d\u53ef\u4ee5\u5305\u542bSQL\u6558\u8ff0 \u6a94\u6848\u540d\u7a31\u6703\u6c7a\u5b9a\u532f\u5165\u8cc7\u6599\u5eab\u4e2d\u7684\u54ea\u500b\u8868\u683c\uff0cMySQL\u6703\u4f7f\u7528\u53bb\u9664\u9644\u52a0\u6a94\u540d\u5f8c\u7684\u540d\u7a31\u3002\u4f8b\u5982\u300cdept.dat\u300d\u70ba\u300cdept\u300d\u8868\u683c\uff1b\u300cdept.txt.dat\u300d\u540c\u6a23\u70ba\u300cdept\u300d\u8868\u683c \u6548\u7387 \u7d22\u5f15 \u4e3b\u7d22\u5f15\u9375\u7684\u61c9\u7528\u5f88\u5e38\u898b\uff0c\u800c\u4e14\u4e00\u500b\u8868\u683c\u901a\u5e38\u6703\u6709\u4e00\u500b\uff0c\u800c\u4e14\u53ea\u80fd\u6709\u4e00\u500b\u3002\u5728\u4e00\u500b\u8868\u683c\u4e2d\uff0c\u8a2d\u5b9a\u70ba\u4e3b\u7d22\u5f15\u9375\u7684\u6b04\u4f4d\u503c\u4e0d\u53ef\u4ee5\u91cd\u8907\uff0c\u800c\u4e14\u4e0d\u53ef\u4ee5\u5132\u5b58\u300cNULL\u300d\u503c\u3002\u56e0\u70ba\u9019\u6a23\u7684\u9650\u5236\uff0c\u6240\u4ee5\u5f88\u9069\u5408\u4f7f\u7528\u5728\u985e\u4f3c\u7de8\u78bc\u3001\u4ee3\u865f\u6216\u8eab\u4efd\u8b49\u5b57\u865f\u9019\u985e\u6b04\u4f4d\u3002 \u552f\u4e00\u7d22\u5f15\u4e5f\u7a31\u70ba\u300c\u4e0d\u53ef\u91cd\u8907\u7d22\u5f15\u300d\uff0c\u5728\u4e00\u500b\u8868\u683c\u4e2d\uff0c\u8a2d\u5b9a\u70ba\u552f\u4e00\u7d22\u5f15\u7684\u6b04\u4f4d\u503c\u4e0d\u53ef\u4ee5\u91cd\u8907\uff0c\u4f46\u662f\u53ef\u4ee5\u5132\u5b58\u300cNULL\u300d\u503c\u3002\u9019\u7a2e\u7d22\u5f15\u9069\u5408\u7528\u5728\u985e\u4f3c\u54e1\u5de5\u8cc7\u6599\u8868\u683c\u4e2d\u5132\u5b58\u96fb\u5b50\u90f5\u4ef6\u5e33\u865f\u7684\u6b04\u4f4d\uff0c\u56e0\u70ba\u54e1\u5de5\u4e0d\u4e00\u5b9a\u6709\u96fb\u5b50\u90f5\u4ef6\u5e33\u865f\uff0c\u6240\u4ee5\u5141\u8a31\u5132\u5b58\u300cNULL\u300d\u503c\uff0c\u53ef\u4ee5\u6bcf\u4e00\u500b\u54e1\u5de5\u7684\u96fb\u5b50\u90f5\u4ef6\u5e33\u865f\u90fd\u4e0d\u53ef\u4ee5\u91cd\u8907\u3002 \u975e\u552f\u4e00\u7d22\u5f15\u7528\u4f86\u589e\u52a0\u67e5\u8a62\u8207\u7dad\u8b77\u8cc7\u6599\u6548\u7387\u7684\u7d22\u5f15\u3002\u8a2d\u5b9a\u70ba\u975e\u552f\u4e00\u7d22\u5f15\u7684\u6b04\u4f4d\u503c\u53ef\u4ee5\u91cd\u8907\uff0c\u4e5f\u53ef\u4ee5\u5132\u5b58\u300cNULL\u300d\u503c\u3002 \u300cFULLTEXT\u300d\u7d22\u5f15\u53ea\u80fd\u7528\u5728\u300cCHAR\u300d\u3001\u300cVARCHAR\u300d\u8207\u300cTEXT\u300d\u578b\u614b\u7684\u6b04\u4f4d\uff0c\u800c\u4e14\u8868\u683c\u4f7f\u7528\u7684\u5132\u5b58\u5f15\u64ce\u5fc5\u9808\u662f\u300cMyISAM\u300d\uff0c\u4e00\u822c\u6703\u7a31\u70ba\u300c\u5168\u6587\u6aa2\u7d22\u300d\uff0c\u53ef\u4ee5\u63d0\u9ad8\u641c\u5c0b\u5927\u91cf\u6587\u5b57\u7684\u6548\u7387\u3002 \u300cSPATIAL\u300d\u7d22\u5f15\u662f\u300cSPATIAL\u300d\u578b\u614b\u6b04\u4f4d\u5c08\u7528\u7684\uff0c\u800c\u4e14\u8868\u683c\u4f7f\u7528\u7684\u5132\u5b58\u5f15\u64ce\u5fc5\u9808\u662f\u300cMyISAM\u300d\u3002\u300cFULLTEXT\u300d\u8207\u300cSPATIAL\u9019\u5169\u7a2e\u7d22\u5f15\u4e0d\u6703\u5728\u9019\u88e1\u8a0e\u8ad6\u3002 \u7d22\u5f15\u6709\u5169\u500b\u4e3b\u8981\u7684\u7528\u9014\uff1a \u4e3b\u7d22\u5f15\u9375\u8207\u552f\u4e00\u7d22\u5f15\u53ef\u4ee5\u907f\u514d\u91cd\u8907\u7684\u8cc7\u6599 \u4e3b\u7d22\u5f15\u9375\u3001\u552f\u4e00\u7d22\u5f15\u8207\u975e\u552f\u4e00\u7d22\u5f15\u90fd\u53ef\u4ee5\u589e\u52a0\u8cc7\u6599\u5eab\u7684\u6548\u7387 \u5982\u679c\u60f3\u8981\u70ba\u4e86\u589e\u52a0\u6548\u7387\u800c\u5efa\u7acb\u7d22\u5f15\u7684\u8a71\uff0c\u4f60\u61c9\u8a72\u8981\u8003\u616e\u4e0b\u5217\u5e7e\u9ede\uff1a \u6700\u91cd\u8981\u7684\uff0c\u7576\u7136\u662f\u4e0d\u8981\u5efa\u7acb\u6c92\u6709\u5fc5\u8981\u7684\u7d22\u5f15\uff0c\u4f8b\u5982\u4e0a\u5217\u8a0e\u8ad6\u7684\u60c5\u6cc1 \u7d22\u5f15\u7684\u6b04\u4f4d\u5118\u91cf\u4e0d\u8981\u6709\u300cNULL\u300d\u503c \u96d6\u7136\u67d0\u500b\u6b04\u4f4d\u5f88\u5e38\u4f7f\u7528\u5728\u300cWHERE\u300d\u3001\u300cORDER BY\u300d\u6216\u300cGROUP BY\u300d\u5b50\u53e5\u4e2d\uff0c\u4e5f\u4e0d\u4e00\u5b9a\u8981\u5efa\u7acb\u7d22\u5f15\u3002\u4f8b\u5982\u6027\u5225\u6b04\u4f4d\u7684\u503c\u53ea\u6709\u5169\u7a2e(\u4f7f\u7528ENUM(\u2018M\u2019, \u2018F\u2019)\u578b\u614b)\uff0c\u5efa\u7acb\u7d22\u5f15\u6240\u589e\u52a0\u7684\u6548\u7387\u4e5f\u4e0d\u591a \u4e3b\u7d22\u5f15\u9375\u8207\u552f\u4e00\u7d22\u5f15\u7684\u6548\u7387\u6703\u6bd4\u975e\u552f\u4e00\u7d22\u5f15\u597d \u53ef\u4ee5\u53ea\u62ff\u90e8\u5206\u5167\u5bb9\u4f86\u5efa\u7acb\u7d22\u5f15\uff0c\u9019\u6642\u5019\u8981\u6ce8\u610f\u5efa\u7acb\u7d22\u5f15\u7684\u6b04\u4f4d\u503c\u4e0d\u61c9\u8a72\u6709\u592a\u591a\u91cd\u8907\u7684\u503c\uff0c\u53ef\u4ee5\u7528DISTINCT\u4f86\u6aa2\u67e5\u3002 \u5224\u65b7\u689d\u4ef6\u7684\u8a2d\u5b9a \u5982\u679c\u60f3\u8981\u67e5\u8a62\u4e00\u500b\u8868\u683c\u6240\u6709\u7684\u8cc7\u6599\uff0c\u4f60\u5c31\u4e0d\u6703\u4f7f\u7528\u300cWHERE\u300d\u8a2d\u5b9a\u67e5\u8a62\u689d\u4ef6\uff0c\u90a3\u5c31\u53ea\u80fd\u8acb\u8cc7\u6599\u5eab\u8b80\u53d6\u8868\u683c\u4e2d\u6240\u6709\u7684\u8cc7\u6599\u5f8c\u50b3\u56de\u4f86\uff0c\u6709\u6c92\u6709\u7d22\u5f15\u5c31\u4e0d\u6703\u6709\u6548\u7387\u4e0a\u7684\u5f71\u97ff\u3002\u4e0d\u904e\u5982\u679c\u4f7f\u7528\u300cWHERE\u300d\u5b50\u53e5\u8a2d\u5b9a\u67e5\u8a62\u689d\u4ef6\u7684\u8a71\uff0c\u5c31\u8981\u5118\u91cf\u4f7f\u7528\u7d22\u5f15\u4f86\u589e\u52a0\u67e5\u8a62\u7684\u6548\u7387\u3002 \u5982\u679c\u7d22\u5f15\u6b04\u4f4d\u5728WHERE\u689d\u4ef6\u7684\u51fd\u5f0f\u88e1\u9762\u4e5f\u6703\u6c92\u6709\u7d22\u5f15\u6548\u679c\u3002 SELECT * FROM test2 WHERE YEAR(birthdate) = 1990 \u4e0b\u9762\u6bd4\u4e0a\u9762\u6548\u7387\u597d SELECT * FROM test2 WHERE birthdate >= '1990-1-1' AND birthdate <= '1990-12-31' \u96d6\u7136\u5728\u7b97\u8853\u904b\u7b97\u7684\u6642\u5019\u7d66\u5b57\u4e32MySQL\u6703\u81ea\u52d5\u5e6b\u4f60\u8f49\u63db\uff0c\u4f46\u6703\u6709\u984d\u5916\u6548\u80fd\u8017\u640d\uff0c\u6240\u4ee5\u4e5f\u61c9\u8a72\u907f\u514d\u3002 \u7d50\u5408\u67e5\u8a62\u662f\u4e00\u7a2e\u5f88\u6c92\u6709\u6548\u7387\u7684\u67e5\u8a62\uff0c\u56e0\u70ba\u8cc7\u6599\u5eab\u8981\u6bd4\u5c0d\u5169\u500b\u8868\u683c\u4e2d\uff0c\u7d50\u5408\u689d\u4ef6\u6240\u8a2d\u5b9a\u7684\u6b04\u4f4d\u503c\uff0c\u5982\u679c\u8cc7\u6599\u6578\u91cf\u5f88\u591a\u7684\u8a71\uff0c\u9019\u6a23\u7684\u6bd4\u5c0d\u5de5\u4f5c\u5c31\u6703\u82b1\u5f88\u591a\u6642\u9593\u3002\u6240\u4ee5\u4f60\u901a\u5e38\u6703\u5e6b\u7d50\u5408\u689d\u4ef6\u4e2d\u7684\u6b04\u4f4d\u5efa\u7acb\u7d22\u5f15\u3002 \u5728\u67e5\u8a62\u7684\u689d\u4ef6\u4e2d\uff0c\u5982\u679c\u8ddf\u591a\u500b\u6b04\u4f4d\u7684\u7d22\u5f15\u6709\u95dc\u7684\u8a71\uff0cMySQL\u6703\u4f9d\u7167\u7d22\u5f15\u6b04\u4f4d\u7684\u9806\u5e8f\u4f86\u6c7a\u5b9a\u662f\u5426\u4f7f\u7528\u7d22\u5f15\u3002 EXPLAIN\u8207\u67e5\u8a62\u6558\u8ff0 MySQL\u8cc7\u6599\u5eab\u63d0\u4f9b\u300cEXMPLIN\u300d\u6307\u4ee4\uff0c\u53ef\u4ee5\u8b93\u4f60\u5206\u6790\u4e00\u500b\u67e5\u8a62\u6558\u8ff0\u3002 EXPLAIN SELECT * FROM country WHERE GNP < 10000 type\u5982\u679c\u662f ALL \uff0c\u8868\u793a\u9019\u500b\u67e5\u8a62\u767c\u751f\u300cfull table scan\u300d\u3002 type\u5982\u80a1\u662f const \uff0c\u8868\u793a\u53ea\u6709\u8b80\u53d6\u4e00\u7b46\u8cc7\u6599\u3002 \u300cpossible_keys\u300d\u662fMySQL\u7528\u4f86\u627e\u5230\u8cc7\u6599\u6240\u4f7f\u7528\u7684\u7d22\u5f15\uff0cNULL\u8868\u793a\u9019\u500b\u67e5\u8a62\u6c92\u6709\u4f7f\u7528\u7d22\u5f15\u3002 \u8cc7\u6599\u7dad\u8b77 \u7576\u4f60\u4f7f\u7528\u300cINSERT\u300d\u3001\u300cUPDATE\u300d\u6216\u300cDELETE\u300d\u6558\u8ff0\u57f7\u884c\u8cc7\u6599\u7dad\u8b77\u7684\u5de5\u4f5c\u6642\uff0c\u4e5f\u8981\u6ce8\u610f\u6548\u7387\u4e0a\u7684\u554f\u984c\u3002\u5728\u57f7\u884c\u4fee\u6539\u6216\u522a\u9664\u8cc7\u6599\u7684\u6642\u5019\uff0c\u9664\u4e86\u8981\u4fee\u6539\u6216\u522a\u9664\u8868\u683c\u4e2d\u6240\u6709\u7684\u8cc7\u6599\u4ee5\u5916\uff0c\u4f60\u90fd\u6703\u52a0\u5165\u689d\u4ef6\u7684\u8a2d\u5b9a\u3002\u5728\u300cUPDATE\u300d\u548c\u300cDELETE\u300d\u6558\u8ff0\u4e2d\u4f7f\u7528\u300cWHERE\u300d\u5b50\u53e5\u8a2d\u5b9a\u689d\u4ef6\u6642\uff0c\u8ddf\u67e5\u8a62\u6642\u5019\u8a72\u6ce8\u610f\u7684\u5730\u65b9\u90fd\u4e00\u6a23\uff0c\u9664\u4e86\u5118\u91cf\u4f7f\u7528\u7d22\u5f15\u4f86\u589e\u52a0\u57f7\u884c\u7684\u6548\u7387\uff0c\u4e5f\u8981\u907f\u514d\u4e0d\u5fc5\u8981\u7684\u8cc7\u6599\u8f49\u63db\u3002 MySQL\u63d0\u4f9b\u7684\u300cEXPLAIN\u300d\u6558\u8ff0\uff0c\u53ea\u53ef\u4ee5\u70ba\u4f60\u5206\u6790\u4e00\u500b\u67e5\u8a62\u6558\u8ff0\uff0c\u5b83\u4e0d\u53ef\u4ee5\u4f7f\u7528\u5728\u300cSELECT\u300d\u4ee5\u5916\u7684\u6558\u8ff0\u3002\u4e0d\u904e\u4f60\u53ef\u628a\u5b83\u6539\u70ba\u67e5\u8a62\u6558\u8ff0( SELECT * )\u518d\u300cEXPLAIN\u300d\u3002 LIMIT\u5b50\u53e5 \u5728\u67e5\u8a62\u548c\u7dad\u8b77\u8cc7\u6599\u7684\u6642\u5019\uff0c\u90fd\u6709\u53ef\u80fd\u6703\u4f7f\u7528\u300cLIMIT\u300d\u5b50\u53e5\u8a2d\u5b9a\u67e5\u8a62\u6216\u7dad\u8b77\u8cc7\u6599\u7684\u6578\u91cf\u3002\u300cLIMIT\u300d\u5b50\u53e5\u5728\u67d0\u4e9b\u61c9\u7528\u4e0a\u662f\u975e\u5e38\u65b9\u4fbf\u7684\uff0c\u4e0d\u904e\u8981\u7279\u5225\u6ce8\u610f\u5728\u6548\u7387\u4e0a\u7684\u554f\u984c\u3002 \u4f7f\u7528\u66ab\u6642\u8868\u683c \u5982\u679c\u5728\u67e5\u8a62\u5de5\u4f5c\u4e2d\uff0c\u5f88\u5e38\u4f7f\u7528\u4e00\u500b\u67e5\u8a62\u7684\u7d50\u679c\uff0c\u518d\u52a0\u4e0a\u4e0d\u540c\u7684\u689d\u4ef6\u6216\u7d50\u5408\uff0c\u4f60\u5c31\u53ef\u4ee5\u8003\u616e\u4f7f\u7528\u66ab\u6642\u8868\u683c\u3002 \u5132\u5b58\u5f15\u64ce MySQL\u8cc7\u6599\u5eab\u662f\u4e00\u7a2e\u5141\u8a31\u591a\u500b\u7528\u6236\u7aef\u540c\u6642\u4f7f\u7528\u7684\u8cc7\u6599\u5eab\u7ba1\u7406\u7cfb\u7d71\uff0c\u5728\u591a\u7528\u6236\u7aef\u7684\u7684\u904b\u4f5c\u74b0\u5883\u4e0b\uff0c\u8cc7\u6599\u5eab\u5c31\u4f7f\u7528\u300c\u9396\u5b9a\u3001Locking\u300d\u4f86\u907f\u514d\u8cc7\u6599\u7684\u6df7\u4e82\u3002 MySQL\u63d0\u4f9b\u7684\u300cMyISAM\u300d\u548c\u300cInnoDB\u300d\u5169\u7a2e\u5132\u5b58\u5f15\u64ce\uff0c\u4f7f\u7528\u4e0d\u540c\u7684\u9396\u5b9a\u65b9\u5f0f\u4f86\u8655\u7406\u4e0a\u5217\u7684\u60c5\u6cc1\u3002MyISAM\u4f7f\u7528\u7684\u662f\u300ctable-level\u300d\u7684\u9396\u5b9a\u65b9\u5f0f\uff1a MyISAM\u5132\u5b58\u5f15\u64ce\u4f7f\u7528\u7684\u300ctable-level\u300d\u9396\u5b9a\u65b9\u5f0f\uff0c\u9069\u5408\u4f7f\u7528\u5728\u67e5\u8a62\u5de5\u4f5c\u975e\u5e38\u591a\uff0c\u8cc7\u6599\u7dad\u8b77\u6bd4\u8f03\u5c11\u7684\u8cc7\u6599\u5eab\uff0c\u9019\u6a23\u7684\u8cc7\u6599\u5eab\u904b\u4f5c\u8d77\u4f86\u7684\u6548\u7387\u6703\u6bd4\u8f03\u597d\u3002 InnoDB\u5132\u5b58\u5f15\u64ce\u4f7f\u7528\u7684\u662f\u300crow-level\u300d\u7684\u9396\u5b9a\u65b9\u5f0f\uff0cInnoDB\u5132\u5b58\u5f15\u64ce\u4f7f\u7528\u7684\u300crow-level\u300d\u9396\u5b9a\u65b9\u5f0f\uff0c\u9069\u5408\u4f7f\u7528\u5728\u67e5\u8a62\u8207\u8cc7\u6599\u7dad\u8b77\u5de5\u4f5c\u90fd\u5dee\u4e0d\u591a\u7684\u8cc7\u6599\u5eab\uff0c\u9019\u6a23\u7684\u8cc7\u6599\u5eab\u904b\u4f5c\u8d77\u4f86\u7684\u6548\u7387\u6703\u6bd4\u8f03\u597d\u3002","title":"MySQL \u8d85\u65b0\u624b\u5165\u9580"},{"location":"Database/MySQL%20%E8%B6%85%E6%96%B0%E6%89%8B%E5%85%A5%E9%96%80/#mysql","text":"MySQL \u8d85\u65b0\u624b\u5165\u9580","title":"MySQL \u8d85\u65b0\u624b\u5165\u9580"},{"location":"Database/MySQL%20%E8%B6%85%E6%96%B0%E6%89%8B%E5%85%A5%E9%96%80/#select","text":"\u67e5\u8a62\u5b50\u53e5\u9806\u5e8f SELECT FROM WHERE GROUP BY HAVING ORDER BY LIMIT \u6307\u5b9a\u4f7f\u7528\u4e2d\u8cc7\u6599\u5eab: USE \uff0c\u5982\u679c\u4f7f\u7528UI\u901a\u5e38\u7528\u4e0d\u5230\u9019\u6307\u4ee4 \u4e0d\u7528 USE \u53ef\u4ee5\u7528 DatabaseName.TableName SELECT \u55ae\u7368\u4f7f\u7528\u53ef\u4ee5\u7576print\u4f7f\u7528 \u53ef\u4ee5\u4f7f\u7528\u5225\u540d\u5728SELECT\u4e4b\u5f8c\uff0c\u4f7f\u7528 AS \u6216 \u7a7a\u683c \u63a5\u4e0a\u60f3\u8981\u53d6\u7684\u540d\u7a31 \u4e00\u4e9b\u7279\u6b8a\u5be6\u7528\u7684\u7684\u689d\u4ef6\u904b\u7b97\u5b50\uff1a BETWEEN...AND... , IN(...) , IS BETWEEN...AND... \u662f\u5305\u542b(>=,<=) NULL\u8981\u7528 IS \u6216 <=> \u5224\u65b7\u4e0d\u80fd\u76f4\u63a5\u4f7f\u7528 = \uff0c\u4e0d\u7b49\u65bc\u4f7f\u7528 IS NOT LIKE \u5c08\u9580\u8655\u7406\u5b57\u4e32\uff0c\u5f8c\u9762\u63a5 %\uff1a0\u5230\u591a\u500b\u4efb\u4f55\u5b57\u5143 _ \uff1a\u4e00\u500b\u4efb\u4f55\u5b57\u5143 LIMIT \u9664\u4e86\u56de\u50b3\u9650\u5236\u5916\u53ef\u4ee5\u7d66\u5169\u500b\u6578\u5b57\u7b2c\u4e00\u500b\u4ee3\u8868\u8df3\u904e\u5e7e\u7b46","title":"SELECT \u57fa\u790e\u67e5\u8a62"},{"location":"Database/MySQL%20%E8%B6%85%E6%96%B0%E6%89%8B%E5%85%A5%E9%96%80/#_1","text":"","title":"\u904b\u7b97\u5f0f\u8207\u51fd\u5f0f"},{"location":"Database/MySQL%20%E8%B6%85%E6%96%B0%E6%89%8B%E5%85%A5%E9%96%80/#_2","text":"\u6578\u503c\uff1a\u53ef\u4ee5\u7528\u4f86\u57f7\u884c\u7b97\u6578\u904b\u7b97\u7684\u6578\u503c\uff0c\u5305\u542b\u6574\u6578\u8207\u5c0f\u6578\uff0c\u5206\u70ba\u7cbe\u78ba\u503c\u8207\u8fd1\u4f3c\u503c\u5169\u7a2e \u5b57\u4e32\uff1a\u4f7f\u7528\u55ae\u5f15\u865f\u6216\u96d9\u5f15\u865f\u5305\u570d\u7684\u6587\u5b57 \u65e5\u671f/\u6642\u9593\uff1a\u4f7f\u7528\u55ae\u5f15\u865f\u6216\u96d9\u5f15\u865f\u5305\u570d\u7684\u65e5\u671f\u6216\u6642\u9593 \u7a7a\u503c\uff1a\u4f7f\u7528\u300cNULL\u300d\u8868\u793a\u7684\u503c \u5e03\u6797\u503c\uff1a\u300cTRUE\u300d\u6216\u300c1\u300d\u8868\u793a\u300c\u771f\u300d\uff0c\u300cFALSE\u300d\u6216\u300c0\u300d\u8868\u793a\u300c\u5047\u300d \u5982\u679c\u4f60\u62ff\u5b57\u4e32\u4f86\u57f7\u884c\u7b97\u6578\u904b\u7b97\u7684\u8a71\uff0cMySQL\u6703\u5148\u628a\u5b57\u4e32\u4e2d\u7684\u5167\u5bb9\u8f49\u63db\u70ba\u6578\u5b57\uff0c\u7136\u5f8c\u518d\u57f7\u884c\u7b97\u6578\u904b\u7b97 \u65e5\u671f\u53ef\u4ee5\u7528\u95dc\u9375\u5b57 INTERVAL \u904b\u7b97 NULL\u503c\u8207\u5176\u5b83\u4efb\u4f55\u503c\u90fd\u4e0d\u4e00\u6a23\uff0c\u5305\u542bNULL\u81ea\u5df1 \u770b\u5230 () \u4ed6\u5c31\u662f\u51fd\u5f0f \u5b57\u4e32\u8655\u7406\uff1a\u5927\u5c0f\u5beb\u3001\u4e32\u63a5\u3001TRIM\u3001REPLACE... \u6578\u5b78\uff1aROUND\u3001CEIL\u3001FLOOR... \u65e5\u671f\u6642\u9593\uff1a\u76ee\u524d\u65e5\u671f\u3001\u5e74\u6708\u65e5\u3001\u52a0\u6e1b\u4e58\u9664... \u6d41\u7a0b\u63a7\u5236\uff1a IF(\u689d\u4ef6, \u904b\u7b97\u5f0f1, \u904b\u7b97\u5f0f2) \u8ddf\u4e09\u5143\u904b\u7b97\u5b50\u670987%\u50cf CASE WHEN THEN \u4e00\u500b\u689d\u4ef6\u4e0d\u7528\u5920\u7528\u7684\u6642\u5019...(\u7136\u5f8c\u9019\u8ddfswitch\u670987%\u50cf) \u5176\u4ed6\uff1aIFNULL()\u3001ISNULL","title":"\u503c\u8207\u904b\u7b97\u5f0f"},{"location":"Database/MySQL%20%E8%B6%85%E6%96%B0%E6%89%8B%E5%85%A5%E9%96%80/#_3","text":"\u7fa4\u7d44\u51fd\u5f0f\uff1a MAX(\u904b\u7b97\u5f0f)\uff1a\u6700\u5927\u503c MIN(\u904b\u7b97\u5f0f)\uff1a\u6700\u5c0f\u503c SUM(\u904b\u7b97\u5f0f)\uff1a\u5408\u8a08 AVG(\u904b\u7b97\u5f0f)\uff1a\u5e73\u5747 COUNT([DISTINCT]*|\u904b\u7b97\u5f0f)\uff1a\u4f7f\u7528\u300cDISTINCT\u300d\u6642\uff0c\u91cd\u8907\u7684\u8cc7\u6599\u4e0d\u6703\u8a08\u7b97\uff1b\u4f7f\u7528[*]\u6642\uff0c\u8a08\u7b97\u8868\u683c\u7d00\u9304\u7684\u6578\u91cf\uff1a\u4f7f\u7528[\u904b\u7b97\u5f0f]\u6642\uff0c\u8a08\u7b97\u7684\u6578\u91cf\u4e0d\u6703\u5305\u542b\u300cNULL\u300d\u503c COUNT() \u88e1\u9762\u585e\u6b04\u4f4d\u540d\u7a31\u7684\u8a71\uff0cNULL\u4e0d\u6703\u88ab\u8a08\u7b97 GROUP_CONCAT \u662f\u7528\u4f86\u4e32\u63a5\u5b57\u4e32\u8cc7\u6599\u7684\u51fd\u5f0f GROUP_CONCAT( [DISTINCT] \u904b\u7b97\u5f0f [\u6392\u5e8f\u8a2d\u5b9a] [SEPARATOR \u904b\u7b97\u5f0f] )","title":"\u7fa4\u7d44\u67e5\u8a62"},{"location":"Database/MySQL%20%E8%B6%85%E6%96%B0%E6%89%8B%E5%85%A5%E9%96%80/#group-byhaving","text":"\u5728\u4e0a\u5217\u4f7f\u7528\u7fa4\u7d44\u51fd\u5f0f\u7684\u6240\u6709\u7bc4\u4f8b\u4e2d\uff0c\u90fd\u662f\u5c07\u300cFROM\u300d\u5b50\u53e5\u4e2d\u6307\u5b9a\u7684\u8868\u683c\u7576\u6210\u662f\u4e00\u6574\u500b\u300c\u7fa4\u7d44\u300d\uff0c\u7fa4\u7d44\u51fd\u5f0f\u6240\u8655\u7406\u7684\u8cc7\u6599\u662f\u8868\u683c\u4e2d\u6240\u6709\u7684\u7d00\u9304\u3002\u5982\u679c\u5e0c\u671b\u4f9d\u7167\u6307\u5b9a\u7684\u8cc7\u6599\u4f86\u8a08\u7b97\u5206\u7d44\u7d71\u8a08\u8207\u5206\u6790\u8cc7\u8a0a\uff0c\u4f7f\u7528 GROUP BY GROUP BY {\u6b04\u4f4d|\u904b\u7b97\u5f0f|\u4f4d\u7f6e\u7de8\u865f} [ASC|DESC] [WITH ROLLUP] [,...] HAVING \u5206\u7d44\u689d\u4ef6 \u53ef\u4ee5GROUP BY\u591a\u500b\u6b04\u4f4d\uff0c\u610f\u601d\u662f\u7167\u9806\u5e8f\u5206\u7d44 \u4f7f\u7528\u300cGROUP BY\u300d\u6307\u5b9a\u7fa4\u7d44\u7684\u8a2d\u5b9a\u4ee5\u5f8c\uff0c\u56de\u50b3\u7684\u7fa4\u7d44\u67e5\u8a62\u8cc7\u6599\u90fd\u6703\u4f9d\u7167\u6307\u5b9a\u7684\u7fa4\u7d44\u6392\u5e8f\uff0c\u9810\u8a2d\u5b9a\u6392\u5e8f\u65b9\u5f0f\u662f\u905e\u589e\u6392\u5e8f\uff0c\u4f7f\u7528\u300cDESC\u300d\u95dc\u9375\u5b57\u53ef\u4ee5\u6307\u5b9a\u6392\u5e8f\u7684\u65b9\u5f0f\u70ba\u905e\u6e1b\u6392\u5e8f \u4f7f\u7528\u300cGROUP BY\u300d\u5b50\u53e5\u7684\u6642\u5019\u53ef\u4ee5\u642d\u914d\u300cWITH ROLLUP\u300d\uff0c\u6548\u679c\u6703\u4f5c\u7528\u5728\u67e5\u8a62\u4e2d\u7684\u6bcf\u4e00\u500b\u7fa4\u7d44\u51fd\u5f0f\uff0c\u529f\u7528\u5f0f\u7d71\u8a08\u6240\u6709\u6578\u91cf \u5728\u300cGROUP BY\u300d\u5b50\u53e5\u4e2d\u6709\u591a\u500b\u7fa4\u7d44\u8a2d\u5b9a\u7684\u6642\u5019\uff0c\u4f60\u53ef\u4ee5\u5728\u6700\u5f8c\u9762\u52a0\u5165\u300cWITH ROLLUP\u300d \u5305\u542b\u7fa4\u7d44\u51fd\u5f0f\u7684\u689d\u4ef6\u8a2d\u5b9a\u5c31\u4e00\u5b9a\u8981\u653e\u5728\u300cHAVING\u300d\u5b50\u53e5\u4e2d SELECT\u4e86\u6c92\u6709\u51fa\u73fe\u5728GROUP BY\u7684\u6b04\u4f4d\u884c\u70ba\u6703\u5f88\u5947\u602a\uff0c\u4f46MySQL\u4e0d\u6703\u5831\u932f\uff0c\u6709\u8a2d\u5b9a\u53ef\u4ee5\u8a2d ONLY_FULL_GROUP_BY \u5f37\u5236\u6c92\u6709\u4f7f\u7528\u7fa4\u7d44\u51fd\u5f0f\u7684\u6b04\u4f4d\u4e00\u5b9a\u8981\u5168\u90e8\u51fa\u73fe\u5728GROUP BY\u4e2d\uff0c\u4e0d\u7136\u6703\u5831\u932f","title":"GROUP BY\u8207HAVING\u5b50\u53e5"},{"location":"Database/MySQL%20%E8%B6%85%E6%96%B0%E6%89%8B%E5%85%A5%E9%96%80/#join-union","text":"","title":"JOIN \u8207 UNION \u67e5\u8a62"},{"location":"Database/MySQL%20%E8%B6%85%E6%96%B0%E6%89%8B%E5%85%A5%E9%96%80/#inner-join","text":"SELECT \u8868\u500b\u540d\u7a31.\u6b04\u4f4d\u540d\u7a31[,\u8868\u500b\u540d\u7a31.\u6b04\u4f4d\u540d\u7a31...] FROM \u8868\u500b\u540d\u7a31 [AS] [\u8868\u683c\u5225\u540d][,\u8868\u500b\u540d\u7a31 [AS] [\u8868\u683c\u5225\u540d]...] WHERE \u7d50\u5408\u689d\u4ef6 \u61f6\u4eba\u5beb\u6cd5 SELECT \u8868\u500b\u540d\u7a31.\u6b04\u4f4d\u540d\u7a31[,\u8868\u500b\u540d\u7a31.\u6b04\u4f4d\u540d\u7a31...] FROM \u8868\u500b\u540d\u7a31 [INNER] JOIN \u8868\u500b\u540d\u7a31 ON \u7d50\u5408\u689d\u4ef6 \u7576\u4e0d\u540cTable\u800c\u6b04\u4f4d\u540d\u7a31\u4e00\u6a23\u6642\u53ef\u4ee5\u66f4\u61f6 SELECT \u8868\u500b\u540d\u7a31.\u6b04\u4f4d\u540d\u7a31[,\u8868\u500b\u540d\u7a31.\u6b04\u4f4d\u540d\u7a31...] FROM \u8868\u500b\u540d\u7a31 [INNER] JOIN \u8868\u500b\u540d\u7a31 USING (\u7d50\u5408\u6b04\u4f4d...)","title":"Inner Join"},{"location":"Database/MySQL%20%E8%B6%85%E6%96%B0%E6%89%8B%E5%85%A5%E9%96%80/#outer-join","text":"SELECT \u8868\u683c\u540d\u7a31.\u6b04\u4f4d\u540d\u7a31[,\u8868\u683c\u540d\u7a31.\u6b04\u4f4d\u540d\u7a31...] FROM \u8868\u683c\u540d\u7a31 {LEFT | RIGHT} [OUTER] JOIN \u8868\u683c\u540d\u7a31 {ON \u7d50\u5408\u689d\u4ef6 | USING (\u7d50\u5408\u6b04\u4f4d...)} right or left join\u5c31\u662f\u770b\u54ea\u908a\u9700\u8981 \u53e6\u4e00\u908a \u6c92\u503c\u5f97\u6642\u5019\u4e5f\u51fa\u73fe","title":"Outer Join"},{"location":"Database/MySQL%20%E8%B6%85%E6%96%B0%E6%89%8B%E5%85%A5%E9%96%80/#union","text":"join\u662f\u4e00\u500b\u67e5\u8a62\u4f7f\u7528\u591a\u500btable\uff0c\u800cunion\u5c31\u662f\u628a\u4e00\u500b\u4ee5\u4e0a\u7684\u67e5\u8a62\u5408\u4f75\uff0c\u807d\u8d77\u4f86\u5c31\u4e0d\u662f\u500b\u597d\u4e3b\u610f \u6b04\u4f4d\u540d\u7a31\u548c\u6578\u91cf\u8981\u4e00\u6a23(\u7684\u6a23\u5b50?)","title":"Union"},{"location":"Database/MySQL%20%E8%B6%85%E6%96%B0%E6%89%8B%E5%85%A5%E9%96%80/#crud","text":"DESCRIBE \u6216 DESC \u662f\u5c08\u5c6c\u65bcMySQL\u7684\u6307\u4ee4\uff0c\u53d6\u5f97Table\u7d50\u69cb\u8cc7\u8a0a \u6b04\u4f4d\u662f\u6709\u9806\u5e8f\u7684\uff0c DESC \u73a9\u7531\u4e0a\u81f3\u4e0b\u5c31\u662f\u4ed6\u7684\u6b04\u4f4d\u9806\u5e8f","title":"CRUD \u8207\u8cc7\u6599\u7dad\u8b77"},{"location":"Database/MySQL%20%E8%B6%85%E6%96%B0%E6%89%8B%E5%85%A5%E9%96%80/#_4","text":"","title":"\u65b0\u589e"},{"location":"Database/MySQL%20%E8%B6%85%E6%96%B0%E6%89%8B%E5%85%A5%E9%96%80/#_5","text":"\u6309\u6b04\u4f4d\u9806\u5e8f\u5728\u8868\u683c\u65b0\u589e\u4e00\u7b46\u8cc7\u6599 INSERT [INTO] \u8868\u683c\u540d\u7a31 VALUES ( \u904b\u7b97\u5f0f | DEFAULT,...) \u7576\u4f60\u5fd8\u8a18\u9806\u5e8f\u7684\u6642\u5019\u53ef\u4ee5\u7528\uff0c\u6b64\u7a2e\u65b9\u5f0f\u6c92\u6709\u5beb\u51fa\u7684\u6b04\u4f4d\u6703\u4f7f\u7528default INSERT [INTO] \u8868\u683c\u540d\u7a31 [(\u6b04\u4f4d\u540d\u7a31,...)] VALUES ( \u904b\u7b97\u5f0f | DEFAULT,...) \u5168\u6b04\u4f4ddefault INSERT [INTO] \u8868\u683c\u540d\u7a31 () VALUES () \u53e6\u4e00\u7a2e\u5beb\u6cd5\uff0c\u611f\u89ba\u6bd4\u8f03\u597d\u8b80 INSERT [INTO] \u8868\u683c\u540d\u7a31 SET \u6b04\u4f4d\u540d\u7a31 = \u904b\u7b97\u5f0f|DEFAULT [,...] \u4e00\u6b21\u65b0\u589e\u591a\u7b46\uff0c\u7c21\u55ae\u4f86\u8aaa\u5c31\u662f VALUES \u5f8c\u9762\u52a0\u4e0a,() INSERT [INTO] \u8868\u683c\u540d\u7a31 [(\u6b04\u4f4d\u540d\u7a31,...)] VALUES ( \u904b\u7b97\u5f0f | DEFAULT,...)[,...]","title":"\u57fa\u790e\u65b0\u589e\u6558\u8ff0"},{"location":"Database/MySQL%20%E8%B6%85%E6%96%B0%E6%89%8B%E5%85%A5%E9%96%80/#primary-key","text":"\u5728\u8a2d\u8a08\u8868\u683c\u7684\u6642\u5019\uff0c\u901a\u5e38\u6703\u8996\u9700\u8981\u6307\u5b9a\u8868\u683c\u4e2d\u7684\u67d0\u4e00\u500b\u6b04\u4f4d\u70ba\u300c\u4e3b\u7d22\u5f15\u300d\u6b04\u4f4d \u4f60\u53ef\u4ee5\u5728\u4f7f\u7528 INSERT \u6558\u8ff0\u7684\u6642\u5019\uff0c\u52a0\u5165 IGNORE \u95dc\u9375\u5b57\uff0c\u5b83\u53ef\u4ee5\u5728\u57f7\u884c\u4e00\u500b\u9055\u53cd\u4e3b\u7d22\u5f15\u898f\u5b9a\u7684\u65b0\u589e\u6558\u8ff0\u6642\uff0c\u81ea\u52d5\u5ffd\u7565\u65b0\u589e\u7684\u52d5\u4f5c\uff0c\u9019\u6a23\u5c31\u4e0d\u6703\u7522\u751f\u932f\u8aa4\u8a0a\u606f","title":"Primary Key"},{"location":"Database/MySQL%20%E8%B6%85%E6%96%B0%E6%89%8B%E5%85%A5%E9%96%80/#on-duplicate-key-update","text":"\u4f7f\u7528 INSERT \u6558\u8ff0\u65b0\u589e\u7d00\u9304\u7684\u6642\u5019\uff0c\u9084\u53ef\u4ee5\u8996\u9700\u8981\u5728\u6700\u5f8c\u642d\u914d\u4e00\u4e32\u95dc\u9375\u5b57 ON DUPLICATE KEY UPDATE \uff0c\u5b83\u53ef\u4ee5\u7528\u4f86\u6307\u5b9a\u5728\u9055\u53cd\u91cd\u8907\u7d22\u5f15\u503c\u7684\u898f\u5b9a\u6642\u8981\u57f7\u884c\u7684\u4fee\u6539 INSERT ... ON DUPLICATE KEY UPDATE \u6b04\u4f4d=\u904b\u7b97\u5f0f[,...]","title":"ON DUPLICATE KEY UPDATE"},{"location":"Database/MySQL%20%E8%B6%85%E6%96%B0%E6%89%8B%E5%85%A5%E9%96%80/#replace","text":"\u9664\u4e86\u4f7f\u7528\u300cINSERT\u300d\u6558\u8ff0\u65b0\u589e\u7d00\u9304\u5916\uff0c\u300cREPLACE\u300d\u6558\u8ff0\u540c\u6a23\u53ef\u4ee5\u65b0\u589e\u7d00\u9304\uff0c\u5b83\u5011\u7684\u8a9e\u6cd5\u5e7e\u4e4e\u76f8\u540c\uff1a REPLACE [INTO] \u8868\u683c\u540d\u7a31 [(\u6b04\u4f4d\u540d\u7a31,...)] VALUES ( \u904b\u7b97\u5f0f | DEFAULT,...) REPLACE [INTO] \u8868\u683c\u540d\u7a31 SET \u6b04\u4f4d\u540d\u7a31 = \u904b\u7b97\u5f0f|DEFAULT [,...] \u5c31\u662f\u7576Key\u4e00\u6a23\u6642\u76f4\u63a5\u53d6\u4ee3","title":"\u300cREPLACE\u300d\u6558\u8ff0"},{"location":"Database/MySQL%20%E8%B6%85%E6%96%B0%E6%89%8B%E5%85%A5%E9%96%80/#_6","text":"UPDATE [IGNORE] \u8868\u683c\u540d\u7a31 SET \u6b04\u4f4d\u540d\u7a31 = \u904b\u7b97\u5f0f|DEFAULT [,...] [WHERE \u689d\u4ef6] [ORDER BY \u6392\u5e8f] [LIMIT \u9650\u5236] \u4e00\u5b9a\u8981\u6ce8\u610f\u6c92\u4e0bwhere\u5c31\u6703\u8b8a\u6210\u5168\u6b04\u4f4d... \u4e00\u6a23\u53ef\u4e0b IGNORE \u5ffd\u7565\u7d22\u5f15\u9375\u932f\u8aa4 \u5982\u679c IGNORE \u5ffd\u7565\u7684\u662f\u8f49\u578b\u932f\u8aa4\u6703\u6709\u610f\u60f3\u4e0d\u5230\u7684\u9a5a\u559c(\u96f7\u7206) \u642d\u914d ORDER BY \u8207 LIMIT \u7bc4\u4f8b\uff1a\u5e6b\u85aa\u6c34\u6700\u4f4e\u7684\u4e09\u500b\u6708\u516c\u52a0\u85aa","title":"\u4fee\u6539"},{"location":"Database/MySQL%20%E8%B6%85%E6%96%B0%E6%89%8B%E5%85%A5%E9%96%80/#_7","text":"DELETE [IGNORE] FROM \u8868\u683c\u540d\u7a31 [WHERE \u689d\u4ef6] [ORDER BY \u6392\u5e8f] [LIMIT \u9650\u5236] \u300cTRUNCATE\u300d\u6558\u8ff0\u5728\u57f7\u884c\u522a\u9664\u7d00\u9304\u7684\u6642\u5019\uff0c\u6703\u6bd4\u4f7f\u7528\u300cDELETE\u300d\u6558\u8ff0\u7684\u6548\u7387\u597d\u4e00\u4e9b\uff0c\u5c24\u5176\u662f\u8868\u683c\u4e2d\u7684\u7d00\u9304\u975e\u5e38\u591a\u7684\u6642\u5019\u6703\u66f4\u660e\u986f\u3002 TRUNCATE [TABLE] \u8868\u683c\u540d\u7a31 \u300cTRUNCATE\u300d\u6558\u8ff0\u5728\u57f7\u884c\u522a\u9664\u7d00\u9304\u7684\u6642\u5019\uff0c\u6703\u6bd4\u4f7f\u7528\u300cDELETE\u300d\u6558\u8ff0\u7684\u6548\u7387\u597d\u4e00\u4e9b\uff0c\u5c24\u5176\u662f\u8868\u683c\u4e2d\u7684\u7d00\u9304\u975e\u5e38\u591a\u7684\u6642\u5019\u6703\u66f4\u660e\u986f\u3002","title":"\u522a\u9664"},{"location":"Database/MySQL%20%E8%B6%85%E6%96%B0%E6%89%8B%E5%85%A5%E9%96%80/#_8","text":"","title":"\u5b57\u5143\u96c6\u8207\u8cc7\u6599\u5eab"},{"location":"Database/MySQL%20%E8%B6%85%E6%96%B0%E6%89%8B%E5%85%A5%E9%96%80/#character-setcollation","text":"Character Set(\u5b57\u5143\u96c6)\u5c31\u662f\u7de8\u78bc Collation(or binary collation)\u662f\u5b57\u5143\u5927\u5c0f\u6392\u5e8f\u898f\u5247 \u53ef\u4ee5\u770b\u8cc7\u6599\u5eab\u652f\u63f4\u7684\u5b57\u5143\u96c6 SHOW CHARACTER SET \u6bcf\u7a2e\u5b57\u5143\u96c6\u53ef\u4ee5\u642d\u914d\u4e0d\u540c\u7684Collation\uff0c\u540c\u6a23\uff1a SHOW COLLATION","title":"Character Set\u8207Collation"},{"location":"Database/MySQL%20%E8%B6%85%E6%96%B0%E6%89%8B%E5%85%A5%E9%96%80/#_9","text":"\u6bcf\u500b\u8cc7\u6599\u5eab\u90fd\u6703\u628a\u8cc7\u6599\u5b58\u5728 \u8cc7\u6599\u5eab\u8cc7\u6599\u593e \u4e2d \u96d6\u7136MySQL\u5c0d\u65bc\u8cc7\u6599\u5eab\u7684\u6578\u91cf\u4e26\u6c92\u6709\u9650\u5236\uff0c\u53ef\u662f\u4f60\u8981\u6ce8\u610fMySQL\u8cc7\u6599\u5eab\u4f3a\u670d\u5668\u8edf\u9ad4\u6240\u5b89\u88dd\u7684\u4f5c\u696d\u7cfb\u7d71\uff0c\u5b83\u5c0d\u65bc\u8cc7\u6599\u593e\u8207\u6a94\u6848\u5927\u5c0f\u7684\u9650\u5236\u3002 MySQL\u4f7f\u7528\u8cc7\u6599\u5eab\u540d\u7a31\u4f5c\u70ba\u8cc7\u6599\u5eab\u8cc7\u6599\u593e\u7684\u540d\u7a31\uff0c\u6240\u4ee5\u4f60\u8981\u7279\u5225\u6ce8\u610f\u5927\u5c0f\u5beb\u7684\u554f\u984c\u3002\u5728\u8cc7\u6599\u593e\u540d\u7a31\u4e0d\u5206\u5927\u5c0f\u5beb\u7684\u4f5c\u696d\u7cfb\u7d71(\u4f8b\u5982Windows)\uff0c\u8cc7\u6599\u5eab\u540d\u7a31\u300cMyDB\u300d\u548c\u300cmydb\u300d\u662f\u4e00\u6a23\u7684\uff1b\u53ef\u662f\u5728\u8cc7\u6599\u593e\u540d\u7a31\u6703\u5340\u5206\u5927\u5c0f\u5beb\u7684\u4f5c\u696d\u7cfb\u7d71(\u4f8b\u5982Linux)\uff0c\u8cc7\u6599\u5eab\u540d\u7a31\u300cMyDB\u300d\u548c\u300cmydb\u300d\u5c31\u4e0d\u4e00\u6a23\u4e86\u3002 \u6bcf\u4e00\u500b\u8cc7\u6599\u5eab\u8cc7\u6599\u593e\u4e2d\u90fd\u6709\u4e00\u500b\u7279\u5225\u7684\u6a94\u6848\uff0c\u6a94\u6848\u540d\u7a31\u662f\u300cdb.opt\u300d\uff0c\u9019\u500b\u6a94\u6848\u7684\u5167\u5bb9\u662f\u8cc7\u6599\u5eab\u7684\u5b57\u5143\u96c6\u8207collation\u8a2d\u5b9a\u3002 \u8a3b\uff1aMySQL\u628a\u300cDATABASE\u300d\u8207\u300cSCHEMA\u300d\u7576\u6210\u662f\u4e00\u6a23\u7684\uff0c\u6240\u6709\u4f60\u5728\u5f8c\u7e8c\u4f7f\u7528\u7684\u6307\u4ee4\uff0c\u90fd\u53ef\u4ee5\u628a\u300cDATABASE\u300d\u63db\u6210\u300cSCHEMA\u300d\u3002 \u5efa\u7acb\u53ef\u4ee5\u7528 IF NOT EXISTS \u6aa2\u67e5\uff0c\u522a\u9664\u53ef\u4ee5\u7528 IF EXISTS \u6aa2\u67e5 \u5efa\u7acb\u8cc7\u6599\u5eab\u6642\u53ef\u4ee5\u540c\u6642\u6307\u5b9a\u5b57\u5143\u96c6\u8207collation\uff0c\u4e5f\u53ef\u4ee5\u90fd\u4e0d\u6307\u5b9a\u6216\u53ea\u6307\u5b9a\u4e00\u500b\uff0c\u6c92\u88ab\u6307\u5b9a\u7684\u6703\u4f7f\u7528default\u3002 \u5efa\u7acb\u4e86\u4e4b\u5f8c\u9084\u662f\u53ef\u4ee5\u4fee\u6539\u5b57\u5143\u96c6\u6216\u662fcollation\uff0c\u4f46\u4e0d\u6703\u5f71\u97ff\u5df2\u7d93\u5b58\u5728\u7684table \u522a\u9664\u6703\u76f4\u63a5\u63b0\u63b0\uff0c\u4e0d\u6703\u518d\u554f\u4f60\u8981\u4e0d\u8981\u522a\u9664\uff0c\u6a94\u6848\u4e5f\u6703\u63b0 \u53d6\u5f97\u6240\u6709\u8cc7\u6599\u5eab\u540d\u7a31\uff1a SHOW DATABASE \u6216 SHOW SCHEMAS \u53d6\u5f97\u5efa\u7acb\u8cc7\u6599\u5eab\u7684sql\uff1a SHOW CREATE DATABASE mydb MySQL\u8cc7\u6599\u5eab\u4f3a\u670d\u5668\u6709\u4e00\u500b\u5f88\u91cd\u8981\u7684\u8cc7\u6599\u5eab\uff0c\u540d\u7a31\u70ba\u300cinformation_schema\u300d\uff0c\u9019\u500b\u8cc7\u6599\u5eab\u901a\u5e38\u6703\u628a\u5b83\u7a31\u70ba\u300c\u7cfb\u7d71\u8cc7\u6599\u5eab\u300d\uff0c\u8cc7\u6599\u5eab\u4e2d\u5132\u5b58\u4f3a\u670d\u5668\u6240\u6709\u91cd\u8981\u7684\u8cc7\u8a0a\u3002\u8ddf\u8cc7\u6599\u5eab\u76f8\u95dc\u7684\u8cc7\u8a0a\u5132\u5b58\u5728\u300cSCHEMATA\u300d\u8868\u683c\u4e2d\uff0c\u6240\u4ee5\u4f60\u53ef\u4ee5\u4f7f\u7528\u67e5\u8a62\u6558\u8ff0\u53d6\u5f97\u6240\u6709\u8cc7\u6599\u5eab\u7684\u76f8\u95dc\u8cc7\u8a0a\uff1a SELECT * FROM information_schema.SCHEMATA","title":"\u8cc7\u6599\u5eab"},{"location":"Database/MySQL%20%E8%B6%85%E6%96%B0%E6%89%8B%E5%85%A5%E9%96%80/#_10","text":"","title":"\u5132\u5b58\u5f15\u64ce\u8207\u8cc7\u6599\u578b\u614b"},{"location":"Database/MySQL%20%E8%B6%85%E6%96%B0%E6%89%8B%E5%85%A5%E9%96%80/#_11","text":"\u8cc7\u6599\u5eab\u8cc7\u6599\u593e\u88e1\u9762\u6703\u5728\u4f9d\u7167table\u5206\u8cc7\u6599\u593e\u5132\u5b58 \u300cStorage engine\u3001\u5132\u5b58\u5f15\u64ce\u300d\u662fMySQL\u7528\u4f86\u5132\u5b58\u8cc7\u6599\u7684\u6280\u8853\uff0c\u70ba\u4e86\u8cc7\u6599\u5eab\u591a\u6a23\u5316\u7684\u61c9\u7528\uff0c\u4f60\u53ef\u4ee5\u5728\u5efa\u7acb\u8868\u683c\u7684\u6642\u5019\uff0c\u4f9d\u7167\u81ea\u5df1\u7684\u9700\u6c42\u6307\u5b9a\u4e00\u7a2e\u5132\u5b58\u5f15\u64ce MyISAM\uff1aMySQL\u9810\u8a2d\u7684\u5132\u5b58\u5f15\u64ce\uff0c\u96d6\u7136\u5b83\u652f\u63f4\u7684\u529f\u80fd\u4e26\u6c92\u6709\u50cf\u4e00\u822c\u7684\u8cc7\u6599\u5eab\u90a3\u9ebc\u591a(\u4f8b\u5982\u4ea4\u6613\u3001transaction)\uff1b\u4e0d\u904e\u4e5f\u56e0\u70ba\u5b83\u6bd4\u8f03\u7c21\u55ae\uff0c\u6240\u4ee5\u904b\u4f5c\u7684\u6548\u7387\u76f8\u5c0d\u4e5f\u6bd4\u8f03\u597d InnoDB\uff1a\u9019\u7a2e\u5132\u5b58\u5f15\u64ce\u6240\u63d0\u4f9b\u7684\u529f\u80fd\u5df2\u7d93\u8ddf\u5927\u578b\u7684\u5546\u7528\u8cc7\u6599\u5eab\u8edf\u9ad4\u4e00\u6a23\u4e86\uff0c\u50cf\u662f\u4ea4\u6613(transaction)\u3001\u7d00\u9304\u9396\u5b9a(row-level locking) \u8207\u81ea\u52d5\u56de\u5fa9(auto-recovery)\u3002 MEMORY\uff1a\u9019\u662f\u4e00\u500b\u6bd4\u8f03\u7279\u6b8a\u7684\u5132\u5b58\u5f15\u64ce\uff0c\u5b83\u628a\u8cc7\u6599\u5132\u5b58\u5728\u7d00\u61b6\u9ad4\u4e2d\uff0c\u6240\u4ee5\u904b\u4f5c\u7684\u6548\u7387\u662f\u6700\u5feb\u7684\uff1b\u4e0d\u904e\u53ea\u8981MySQL\u4f3a\u670d\u5668\u95dc\u9589\u5f8c\uff0c\u5132\u5b58\u7684\u8cc7\u6599\u5c31\u5168\u90e8\u4e0d\u898b\u4e86\u3002 MyISAM vs InnoDB MyISAM\u53ef\u4ee5\u7528\u8907\u88fd\u6a94\u6848\u7684\u65b9\u5f0f\u642c\u79fbtable \u76f8\u8f03\u65bcMyISAM\u6bcf\u500btable\u6709\u5404\u81ea\u7684\u5132\u5b58\u7a7a\u9593\uff0cInnoDB\u5171\u7528\u4e00\u500b\u7a7a\u9593\u5132\u5b58\u6240\u6709\u8868\u683c","title":"\u8868\u683c\u8207\u5132\u5b58\u5f15\u64ce"},{"location":"Database/MySQL%20%E8%B6%85%E6%96%B0%E6%89%8B%E5%85%A5%E9%96%80/#_12","text":"","title":"\u6b04\u4f4d\u8cc7\u6599\u578b\u614b"},{"location":"Database/MySQL%20%E8%B6%85%E6%96%B0%E6%89%8B%E5%85%A5%E9%96%80/#_13","text":"\u6574\u6578\u53ef\u4ee5\u8a2d\u5b9a\u9577\u5ea6\u9650\u5236\uff0c\u6211\u4e0d\u77e5\u9053\u5e79\u5565\u7528 \u6d6e\u9ede\u6578\u53ef\u4ee5\u8a2d\u5b9a\u9577\u5ea6\u8ddf\u5c0f\u6578\u9577\u5ea6\u9650\u5236\uff0c\u5c0f\u6578\u592a\u9577\u6703\u56db\u6368\u4e94\u5165\uff0c\u6574\u6578\u90e8\u5206\u8d85\u904e\u6703\u932f\u8aa4 \u628afloat\u585e\u9032int\u4e0d\u6703\u51fa\u932f\uff0c\u6703\u5e6b\u4f60\u56db\u6368\u4e94\u5165 MySQL\u7684\u6578\u503c\u578b\u614b\uff0c\u5305\u542b\u6574\u6578\u8207\u6d6e\u9ede\u6578\u90fd\u53ef\u4ee5\u8a2d\u5b9a\u70ba\u300c\u53ea\u80fd\u5132\u5b58\u6b63\u6578\u300d \u300cZEROFILL\u300d\u7684\u8a2d\u5b9a\u8868\u793a\u5728\u67e5\u8a62\u9019\u4e9b\u6b04\u4f4d\u7684\u6642\u5019\uff0c\u56de\u50b3\u7684\u8cc7\u6599\u6703\u5728\u5de6\u5074\u6839\u64da\u9577\u5ea6\u7684\u8a2d\u5b9a\u586b\u6eff\u300c0\u300d \u5132\u5b58bit\u578b\u614b\u53ef\u4ee5\u7528\u6574\u6578\u4e5f\u53ef\u4ee5\u7528\u4e8c\u9032\u4f4d\u8868\u793a(b'xxx')","title":"\u6578\u503c\u8207\u4f4d\u5143"},{"location":"Database/MySQL%20%E8%B6%85%E6%96%B0%E6%89%8B%E5%85%A5%E9%96%80/#_14","text":"MySQL\u628a\u5b57\u4e32\u578b\u614b\u5206\u70ba\u5169\u5927\u985e\uff1a\u300c\u975e\u4e8c\u9032\u4f4d\u5236\u3001non-binary\u300d\u8207\u300c\u4e8c\u9032\u4f4d\u5236\u3001binary\u300d\u3002\u975e\u4e8c\u9032\u4f4d\u5236\u5c31\u662f\u5132\u5b58\u4e00\u822c\u6587\u5b57\u7684\u5b57\u4e32\uff0c\u6703\u6709\u7279\u5b9a\u7684\u5b57\u5143\u96c6\u8207collation\uff1b\u4e8c\u9032\u4f4d\u5236\u4f7f\u7528\u4f4d\u5143\u7d44\u5132\u5b58\u8cc7\u6599\uff0c\u4e0d\u5305\u542b\u5b57\u5143\u96c6\u8207collation\uff0c\u6240\u4ee5\u5927\u591a\u7528\u4f86\u5132\u5b58\u5716\u7247\u6216\u97f3\u6a02\u9019\u985e\u8cc7\u6599\u3002 \u53ea\u6709char\u662f\u56fa\u5b9a\u9577\u5ea6\u5b57\u4e32\uff0c\u9577\u5ea6\u4e0d\u5920\u6703\u7528\u7a7a\u767d\u88dc\u6eff \u56fa\u5b9a\u9577\u5ea6\u8207\u8b8a\u52d5\u9577\u5ea6\u7684\u5169\u7a2e\u5b57\u4e32\u578b\u614b\u90fd\u53ef\u4ee5\u5132\u5b58\u5b57\u4e32\uff0c\u5dee\u7570\u5728\u5132\u5b58\u7684\u6587\u5b57\u500b\u6578\u5c0f\u65bc\u578b\u614b\u6307\u5b9a\u7684\u9577\u5ea6\u6642\uff0c\u8b8a\u52d5\u9577\u5ea6\u5be6\u969b\u5132\u5b58\u7684\u7a7a\u9593\u6703\u5c0f\u4e00\u4e9b \u6bcf\u7a2e\u5b57\u5143\u96c6\u4f54\u7528\u7a7a\u9593\u9577\u5ea6\u4e0d\u4e00\uff0c\u53ef\u4ee5\u67e5\u8a62MySQL\u8cc7\u6599\u5eab\u652f\u63f4\u7684\u5b57\u5143\u96c6\u7279\u6027\uff0c\u300cMAXLEN\u300d\u6b04\u4f4d\u662f\u95dc\u65bc\u5132\u5b58\u7a7a\u9593\u7684\u8cc7\u8a0a \u4f7f\u7528\u5728\u300cLENGTH\u300d\u51fd\u5f0f\u4f86\u67e5\u8a62\u5132\u5b58\u5728\u9019\u500b\u8868\u683c\u4e2d\u7684\u5b57\u4e32\u8cc7\u6599\uff0c\u5c31\u53ef\u4ee5\u5f88\u660e\u986f\u7684\u770b\u51fa\u4e0d\u540c\u7684\u5b57\u5143\u96c6\uff0c\u5728\u5132\u5b58\u5b57\u5143\u6642\u4f7f\u7528\u7684\u5132\u5b58\u7a7a\u9593 \u300cLENGTH\u300d\u51fd\u5f0f\u6703\u50b3\u56de\u5b57\u4e32\u8cc7\u6599\u5be6\u969b\u7684\u5132\u5b58\u9577\u5ea6(byte)\uff1b\u5982\u679c\u4f60\u8981\u67e5\u8a62\u5b57\u4e32\u7684\u5b57\u5143\u6578\u91cf\u7684\u8a71\uff0c\u5c31\u8981\u4f7f\u7528\u300cCHAR_LENGTH\u300d\u51fd\u5f0f Collation\u9664\u4e86\u5f71\u97ff\u6392\u5e8f\u5916\uff0c\u5176\u4e2d\u7684\u300cci\u300d(case insensitive)\u9084\u6703\u5f71\u97ff\u6bd4\u8f03","title":"\u5b57\u4e32"},{"location":"Database/MySQL%20%E8%B6%85%E6%96%B0%E6%89%8B%E5%85%A5%E9%96%80/#_15","text":"ENUM\u5c31\u662f\u6703\u5e6b\u4f60\u505a\u6aa2\u67e5\u7684VARCHAR\u62c9 \u5217\u8209(ENUM)\u578b\u614b\u6b04\u4f4d\u9664\u4e86\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u5b57\u4e32\u503c\u4f86\u65b0\u589e\u8207\u66f4\u65b0\u8cc7\u6599\u5916\uff0c\u9084\u53ef\u4ee5\u4f7f\u7528\u6578\u503c\u8cc7\u6599\u7684\u7de8\u865f\u4f86\u4ee3\u66ff\uff0c\u4efb\u4f55\u4e00\u500b\u5217\u8209\u578b\u614b\u4e2d\u7684\u6210\u54e1\uff0cMySQL\u90fd\u6703\u5e6b\u5b83\u5011\u7de8\u4e00\u500b\u865f\u78bc \u96d6\u7136\u5728\u67e5\u8a62\u5217\u8209\u578b\u614b\u6b04\u4f4d\u8cc7\u6599\u7684\u6642\u5019\uff0c\u6240\u5f97\u5230\u7684\u7d50\u679c\u90fd\u662f\u6210\u54e1\u7684\u5b57\u4e32\u503c\uff1b\u4e0d\u904e\u771f\u6b63\u5132\u5b58\u5728\u8cc7\u6599\u5eab\u4e2d\u7684\u8cc7\u6599\u537b\u662f\u6210\u54e1\u7684\u7de8\u865f\uff0c\u6240\u4ee5\u6307\u5b9a\u5217\u8209\u578b\u614b\u6b04\u4f4d\u70ba\u6392\u5e8f\u6b04\u4f4d\u7684\u6642\u5019\uff0c\u8cc7\u6599\u5eab\u6703\u4f7f\u7528\u7de8\u865f\u4f86\u6392\u5e8f\uff0c\u800c\u4e0d\u662f\u4ee5\u6210\u54e1\u7684\u5b57\u4e32\u503c \u5728\u6307\u5b9a\u5217\u8209\u578b\u614b\u6b04\u4f4d\u7684\u67e5\u8a62\u689d\u4ef6\u6642\uff0c\u53ef\u4ee5\u4f7f\u7528\u6210\u54e1\u7684\u5b57\u4e32\u503c\u6216\u7de8\u865f \u96c6\u5408(SET)\u578b\u614b\u540c\u6a23\u53ef\u4ee5\u8a2d\u5b9a\u4e00\u7d44\u6210\u54e1\uff0c\u4e0d\u904e\u5b83\u53ef\u4ee5\u5132\u5b58\u591a\u500b\u6210\u54e1\u8cc7\u6599\uff0c\u4e00\u6a23\u5177\u6709\u9a57\u8b49\u529f\u80fd \u96c6\u5408\u7684\u6210\u54e1\u7de8\u865f\u662f\u7528bit flag\u65b9\u5f0f\u5132\u5b58(0,2,4,8,16...) \u5217\u8209\u8207\u96c6\u5408\u578b\u614b\u90fd\u53ef\u4ee5\u8a2d\u5b9a\u9700\u8981\u7684\u5b57\u5143\u96c6\u8207collation\uff0ccollation\u7684\u5927\u5c0f\u5beb\u6703\u5f71\u97ff\u9a57\u8b49","title":"\u5217\u8209\u8207\u96c6\u5408"},{"location":"Database/MySQL%20%E8%B6%85%E6%96%B0%E6%89%8B%E5%85%A5%E9%96%80/#_16","text":"\u65e5\u671f(DATE)\u578b\u614b\u6b04\u4f4d\u53ef\u4ee5\u5132\u5b58\u5e74\u3001\u6708\u3001\u65e5\u7684\u8cc7\u6599\uff0c\u7bc4\u570d\u5f9e\u300c1000-01-01\u300d\u5230\u300c9999-12-31\u300d\uff0c\u4f60\u7684\u65e5\u671f\u8cc7\u6599\u4e0d\u53ef\u4ee5\u8d85\u904e\u300c9999-12-31\u300d\uff0c\u53ef\u662f\u4f60\u53ef\u4ee5\u5132\u5b58\u300c1000-01-01\u300d\u4ee5\u524d\u7684\u65e5\u671f\uff0c\u4e0d\u904eMySQL\u5efa\u8b70\u4f60\u6700\u597d\u4e0d\u8981\u9019\u9ebc\u4f5c\uff0c\u4e0d\u7136\u53ef\u80fd\u6703\u9020\u6210\u4e00\u4e9b\u5947\u602a\u7684\u554f\u984c\u3002 \u6642\u9593(TIME)\u578b\u614b\u53ef\u4ee5\u5132\u5b58\u6642\u3001\u5206\u3001\u79d2\u7684\u8cc7\u6599\uff0c\u7bc4\u570d\u5f9e\u300c-838:59:59\u300d\u5230\u300c838:59:59\u300d,MySQL\u7684\u6642\u9593\u578b\u614b\u6b04\u4f4d\u53ef\u4ee5\u8b93\u4f60\u5132\u5b58\u985e\u4f3c\u300c\u7d93\u904e\u7684\u6642\u9593\u300d\u9019\u6a23\u7684\u8cc7\u6599 \u5728\u6307\u5b9a\u4e00\u500b\u6642\u9593\u8cc7\u6599\u7684\u6642\u5019\uff0c\u4f60\u53ef\u4ee5\u7701\u7565\u79d2\u6216\u5206\uff0c\u7701\u7565\u7684\u90e8\u4efd\uff0cMySQL\u90fd\u6703\u5e6b\u4f60\u8a2d\u5b9a\u70ba\u300c0\u300d \u65e5\u671f\u8207\u6642\u9593(DATETIME)\u578b\u614b\u53ef\u4ee5\u5132\u5b58\u5b8c\u6574\u7684\u5e74\u3001\u6708\u3001\u65e5\u8207\u6642\u3001\u5206\u3001\u79d2\u8cc7\u6599\uff0c\u7bc4\u570d\u5f9e\u300c1000-01-01 00:00:00\u300d\u5230\u300c9999-12-31 23:59:59\u300d\u3002 \u5982\u679c\u53ea\u9700\u8981\u5132\u5b58\u5e74\u4efd\u8cc7\u6599\u7684\u8a71\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u897f\u5143\u5e74(YEAR)\u578b\u614b\uff0c\u9019\u6a23\u6703\u7bc0\u7701\u5f88\u591a\u5132\u5b58\u7a7a\u9593\u3002 \u300cTIMESTAMP\u300d\u578b\u614b\u7684\u683c\u5f0f\u8207\u300cDATETIME\u300d\u4e00\u6a23\uff0c\u90fd\u5305\u542b\u5b8c\u6574\u7684\u5e74\u3001\u6708\u3001\u65e5\u8207\u6642\u3001\u5206\u3001\u79d2\u8cc7\u6599\uff0c\u4e0d\u904e\u5b83\u4f7f\u7528\u7684\u5132\u5b58\u7a7a\u9593\u53ea\u67094bytes\uff0c\u662f\u300cDATETIME\u300d\u578b\u614b\u7684\u4e00\u534a\u3002 \u300cTIMESTAMP\u300d\u4e5f\u662fMySQL\u65e5\u671f\u8207\u6642\u9593\u578b\u614b\u4e2d\u5177\u6709\u300c\u6642\u5340\u300d\u7279\u6027\u7684\u578b\u614b\u3002\u5b83\u53ef\u4ee5\u5132\u5b58\u5f9e\u300c1970-01-01 00:00:00\u300d\u5230\u76ee\u524d\u7d93\u904e\u7684\u79d2\u6578\u3002\u9019\u500b\u8d77\u59cb\u65e5\u671f\u8207\u6642\u9593\u4f7f\u7528\u300cCoordinated Universal Time\u3001UTC\u300d\u4e16\u754c\u6a19\u6e96\u6642\u9593\u70ba\u5132\u5b58\u8cc7\u6599\u7684\u4f9d\u64da\uff0c\u5b83\u8207\u300cGreenwich Mean Time\u3001GMT\u300d\u683c\u6797\u5a01\u6cbb\u6a19\u6e96\u6642\u9593\u662f\u4e00\u6a23\u7684\u3002 MySQL\u8cc7\u6599\u5eab\u63a1\u7528\u8207\u4f5c\u696d\u7cfb\u7d71\u540c\u6a23\u7684\u6642\u5340\u8a2d\u5b9a\uff0c\u6240\u4ee5\u5728\u5132\u5b58\u300cTIMESTAMP\u300d\u578b\u614b\u6b04\u4f4d\u7684\u8cc7\u6599\u6642\uff0c\u904e\u7a0b\u4e2d\u6703\u6709\u4e00\u4e9b\u8a08\u7b97\u7684\u52d5\u4f5c","title":"\u65e5\u671f\u8207\u6642\u9593"},{"location":"Database/MySQL%20%E8%B6%85%E6%96%B0%E6%89%8B%E5%85%A5%E9%96%80/#_17","text":"","title":"\u8868\u683c\u8207\u7d22\u5f15"},{"location":"Database/MySQL%20%E8%B6%85%E6%96%B0%E6%89%8B%E5%85%A5%E9%96%80/#_18","text":"CREATE TABLE [IF NOT EXISTS] \u8868\u683c\u540d\u7a31 (\u6b04\u4f4d\u5b9a\u7fa9,...) [{ENGINE | TYPE} [=] \u5132\u5b58\u5f15\u64ce\u540d\u7a31] [CHARACTER SET [=] \u5b57\u5143\u96c6\u540d\u7a31] [COLLATE [=] collation\u540d\u7a31] \u6b04\u4f4d\u5b9a\u7fa9 \u6b04\u4f4d\u540d\u7a31 \u6b04\u4f4d\u578b\u614b [\u6b04\u4f4d\u5c6c\u6027],... \u67e5\u8a62\u5f15\u64ce SHOW ENGINES \u4fee\u6539\u8a2d\u5b9a\u6a94\uff1aMySQL\u8cc7\u6599\u5eab\u4f3a\u670d\u5668\u5728\u555f\u52d5\u6642\u6703\u8b80\u53d6\u4e00\u500b\u540d\u7a31\u70ba\u300cmy.ini\u300d\u7684\u8a2d\u5b9a\u6a94\uff0c\u6a94\u6848\u4e2d\u6709\u8a31\u591a\u555f\u52d5\u8cc7\u6599\u5eab\u4f3a\u670d\u5668\u6642\u9700\u8981\u7684\u8cc7\u8a0a\u3002\u5176\u4e2d\u5c31\u5305\u542b\u9810\u8a2d\u7684\u5132\u5b58\u5f15\u64ce\u8a2d\u5b9a\uff0c\u4f60\u53ef\u4ee5\u4fee\u6539\u9019\u500b\u8a2d\u5b9a\u5f8c\u518d\u91cd\u65b0\u555f\u52d5\u8cc7\u6599\u5eab\u4f3a\u670d\u5668\uff0c\u8b93\u65b0\u7684\u8a2d\u5b9a\u751f\u6548\uff1a default-storage-engine=InnoDB \u8a2d\u5b9a\u5132\u5b58\u5f15\u64ce\uff1a\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528\u300cSET\u300d\u6558\u8ff0\u8a2d\u5b9a\u9810\u8a2d\u7684\u5132\u5b58\u5f15\u64ce\uff1a SET GLOBAL storage_engine = \u5132\u5b58\u5f15\u64ce \u55ae\u6b21\u751f\u6548\uff1a SET SESSION storage_engine = \u5132\u5b58\u5f15\u64ce SET storage_engine = \u5132\u5b58\u5f15\u64ce \u53ef\u4ee5\u53ea\u91dd\u5c0d\u55ae\u4e00\u6b04\u4f4d\u6307\u5b9a\u5b57\u5143\u96c6\u8207collation\uff0c\u6c92\u6307\u5b9a\u7684\u5c31\u4f7f\u7528default \u6578\u503c\u578b\u614b\u6b04\u4f4d\u5c08\u7528\u7684\u5c6c\u6027\u8a2d\u5b9a\u6709\u300cUNSIGNED\u300d\u3001\u300cZEROFILL\u300d\u8207\u300cAUTO_INCREMENT\u300d \u9664\u4e86\u5b57\u4e32\u8207\u6578\u503c\u5169\u7a2e\u6b04\u4f4d\u5c08\u7528\u7684\u6b04\u4f4d\u5c6c\u6027\u8a2d\u5b9a\u5916\uff0c\u9084\u6709\u300cNULL\u300d\u3001\u300cNOT NULL\u300d \u5982\u679c\u4f60\u6c92\u6709\u70ba\u6b04\u4f4d\u4f7f\u7528\u300cDEFAULT\u300d\u95dc\u9375\u5b57\u8a2d\u5b9a\u9810\u8a2d\u503c\uff0c\u800c\u4e14\u4e5f\u6c92\u6709\u8a2d\u5b9a\u70ba\u300cNOT NULL\u300d\uff0cMySQL\u6703\u81ea\u52d5\u70ba\u4f60\u52a0\u5165\u9810\u8a2d\u503c\u7684\u8a2d\u5b9a\u300cDEFAULT NULL\u300d","title":"\u5efa\u7acb\u8868\u683c"},{"location":"Database/MySQL%20%E8%B6%85%E6%96%B0%E6%89%8B%E5%85%A5%E9%96%80/#timestamp","text":"\u5728\u8868\u683c\u4e2d\u4f7f\u7528\u300cTIMESTAMP\u300d\u578b\u614b\u7684\u6b04\u4f4d\u6642\uff0c\u5982\u679c\u4f60\u6c92\u6709\u8a2d\u5b9a\u5b83\u5011\u7684\u6b04\u4f4d\u5c6c\u6027\uff0cMySQL\u6703\u81ea\u52d5\u5e6b\u4f60\u5728\u7b2c\u4e00\u500b\u300cTIMESTAMP\u300d\u6b04\u4f4d\u52a0\u5165\u300cNOT NULL\u300d\u3001\u300cDEFAULT\u300d\u548c\u300cON UPDATE\u300d\u4e09\u500b\u6b04\u4f4d\u5c6c\u6027\u7684\u8a2d\u5b9a\u3002\u5176\u5b83\u6c92\u6709\u8a2d\u5b9a\u6b04\u4f4d\u5c6c\u6027\u7684\u300cTIMESTAMP\u300d\u6b04\u4f4d\uff0cMySQL\u6703\u5e6b\u4f60\u52a0\u5165\u300cNOT NULL\u300d\u8207\u300cDEFAULT\u300d\u5169\u500b\u6b04\u4f4d\u5c6c\u6027\u3002 \u300cNOT NULL\u300d\u4e0d\u5141\u8a31\u4f60\u5132\u5b58\u300cNULL\u300d\u503c \u300cDEFAULT CURRENT_TIMESTAMP\u300d\u8a2d\u5b9a\u9810\u8a2d\u503c\u70ba\u76ee\u524d\u7684\u65e5\u671f\u6642\u9593\u3002\u5728\u6240\u6709\u6b04\u4f4d\u578b\u614b\u4e2d\uff0c\u53ea\u6709\u300cTIMESTAMP\u300d\u53ef\u4ee5\u4f7f\u7528\u300cCURRENT_TIMESTAMP\u300d\u6307\u5b9a\u9810\u8a2d\u503c\uff1b\u5176\u5b83\u7684\u6b04\u4f4d\u578b\u614b\uff0c\u5728\u6307\u5b9a\u9810\u8a2d\u503c\u53ea\u80fd\u662f\u300c\u4e00\u500b\u660e\u78ba\u7684\u503c\u300d \u300cON UPDATE\u300d\u53ef\u4ee5\u6307\u5b9a\u5728\u4fee\u6539\u7d00\u9304\u7684\u6642\u5019\uff0cMySQL\u81ea\u52d5\u5e6b\u4f60\u586b\u5165\u7684\u8cc7\u6599 \u5728\u4e00\u500b\u8868\u683c\u4e2d\uff0cMySQL\u9650\u5236\u300cCURRENT_TIMESTAMP\u300d\u53ea\u80fd\u5728\u4e00\u500b\u6b04\u4f4d\u51fa\u73fe\u3002 \u5132\u5b58\u5efa\u7acb\u7d00\u9304\u7684\u6642\u9593\u6b04\u4f4d\u4f7f\u7528\u300c0\u300d\u4ee3\u66ff\u300cCURRENT_TIMESTAMP\u300d\uff0c\u7576\u6b04\u4f4d\u7684\u503c\u70ba\u300cNULL\u300d\u7684\u6642\u5019\uff0cMySQL\u6703\u81ea\u52d5\u70ba\u4f60\u586b\u5165\u76ee\u524d\u7684\u65e5\u671f\u8207\u6642\u9593\u3002(\u8d85\u5947\u602a...)","title":"TIMESTAMP"},{"location":"Database/MySQL%20%E8%B6%85%E6%96%B0%E6%89%8B%E5%85%A5%E9%96%80/#_19","text":"\u53ef\u4ee5\u4f7f\u7528CREATE TABLE\u642d\u914d\u67e5\u8a62\u8a9e\u6cd5\u76f4\u63a5\u628a\u67e5\u8a62\u7d50\u679c\u5efa\u6210\u8868\u683c MySQL\u4f7f\u7528\u67e5\u8a62\u7d50\u679c\u7684\u6b04\u4f4d\u540d\u7a31\u8207\u578b\u614b\u4f86\u5efa\u7acb\u65b0\u7684\u8868\u683c \u5982\u679c\u6c92\u6709\u6307\u5b9a\u5132\u5b58\u5f15\u64ce\u3001\u5b57\u5143\u96c6\u6216collation\u7684\u8a71\uff0c\u5efa\u7acb\u7684\u65b0\u8868\u683c\u4f7f\u7528\u8cc7\u6599\u5eab\u9810\u8a2d\u7684\u5132\u5b58\u5f15\u64ce\u3001\u5b57\u5143\u96c6\u8207collation \u67e5\u8a62\u8868\u683c\u4e2d\uff0c\u6b04\u4f4d\u7684\u7d22\u5f15\u8207\u300cAUTO_INCREMENT\u300d\u8a2d\u5b9a\u90fd\u6703\u88ab\u5ffd\u7565 \u53ea\u5efaSchema CREATE TABLE [IF NOT EXISTS] \u8868\u683c\u540d\u7a31 { LIKE \u8868\u683c\u540d\u7a31 | (LIKE \u8868\u683c\u540d\u7a31)} \u4f7f\u7528\u9019\u7a2e\u8a9e\u6cd5\u5efa\u7acb\u7684\u65b0\u8868\u683c\uff0c\u4e26\u4e0d\u6703\u65b0\u589e\u7d00\u9304\u5230\u65b0\u8868\u683c\u4e2d\uff0c\u53ef\u662f\u5305\u542b\u7d22\u5f15\u8207\u300cAUTO_INCREMENT\u300d\u8a2d\u5b9a\u90fd\u6703\u5957\u7528\u5728\u65b0\u8868\u683c\uff0c\u9664\u4e86\u4e0b\u5217\u5169\u500b\u4f8b\u5916\uff1a \u4f7f\u7528\u300cMyISAM\u300d\u5132\u5b58\u5f15\u64ce\u6642\uff0c\u4f60\u53ef\u4ee5\u5728\u5efa\u7acb\u8868\u683c\u7684\u6642\u5019\u4f7f\u7528\u300cDATA DIRECTORY\u300d\u8207\u300cINDEX DIRECTORY\u300d\u6307\u5b9a\u8cc7\u6599\u8207\u7d22\u5f15\u6a94\u6848\u7684\u8cc7\u6599\u593e\u4f4d\u7f6e\uff1b\u5efa\u7acb\u7684\u65b0\u8868\u683c\u6703\u5ffd\u7565\u9019\u4e9b\u8a2d\u5b9a\uff0c\u800c\u4f7f\u7528\u8cc7\u6599\u5eab\u9810\u8a2d\u7684\u8cc7\u6599\u593e \u6b04\u4f4d\u7684\u300cFOREIGN KEY\u300d\u8207\u8868\u683c\u7684\u300cREFERENCES\u300d\u5c6c\u6027\u8a2d\u5b9a\u90fd\u6703\u88ab\u5ffd\u7565 \u4e0a\u5217\u8a0e\u8ad6\u7684\u5efa\u7acb\u8868\u683c\u65b9\u5f0f\uff0c\u90fd\u53ef\u4ee5\u5728\u5efa\u7acb\u8868\u683c\u7684\u6642\u5019\uff0c\u4f9d\u7167\u9700\u8981\u52a0\u5165\u300cTEMPORARY\u300d\u95dc\u9375\u5b57\uff0c\u6307\u5b9a\u9019\u500b\u65b0\u5efa\u7acb\u7684\u8868\u683c\u70ba\u300c\u7528\u6236\u7aef\u66ab\u6642\u5b58\u5728\u300d\u7684\u8868\u683c\uff1a","title":"\u7528\u5176\u4ed6\u8868\u683c\u5efa\u65b0\u8868\u683c"},{"location":"Database/MySQL%20%E8%B6%85%E6%96%B0%E6%89%8B%E5%85%A5%E9%96%80/#_20","text":"CREATE [TEMPORARY] TABLE [IF NOT EXISTS] \u8868\u683c\u540d\u7a31 \u300cTEMPORARY\u300d\u8868\u683c\u6709\u4e0b\u5217\u91cd\u9ede\uff1a \u300cTEMPORARY\u300d\u8868\u683c\u662f\u6bcf\u4e00\u500b\u7528\u6236\u7aef\u5c08\u5c6c\u7684\u8868\u683c\uff0c\u7528\u6236\u7aef\u96e2\u7dda\u5f8c\uff0cMySQL\u5c31\u6703\u81ea\u52d5\u522a\u9664\u9019\u4e9b\u8868\u683c \u56e0\u70ba\u300cTEMPORARY\u300d\u8868\u683c\u662f\u7528\u6236\u7aef\u5c08\u5c6c\u7684\u8868\u683c\uff0c\u5176\u5b83\u7528\u6236\u7aef\u4e0d\u80fd\u4f7f\u7528\uff0c\u6240\u4ee5\u4e0d\u540c\u7684\u7528\u6236\u7aef\uff0c\u4f7f\u7528\u540c\u6a23\u540d\u7a31\u5efa\u7acb\u300cTEMPORARY\u300d\u8868\u683c\u4e5f\u6c92\u6709\u95dc\u4fc2 \u300cTEMPORARY\u300d\u8868\u683c\u540d\u7a31\u53ef\u4ee5\u8ddf\u8cc7\u6599\u5eab\u4e2d\u7684\u8868\u683c\u540d\u7a31\u4e00\u6a23\uff0c\u4e0d\u904e\u5728\u300cTEMPORARY\u300d\u8868\u683c\u5b58\u5728\u7684\u6642\u5019\uff0c\u8cc7\u6599\u5eab\u4e2d\u7684\u8868\u683c\u6703\u88ab\u96b1\u85cf\u8d77\u4f86 \u53ef\u4ee5\u4f7f\u7528\u300cALTER TABLE\u300d\u4fee\u6539\u300cTEMPORARY\u300d\u8868\u683c\u540d\u7a31\uff0c\u4e0d\u53ef\u4ee5\u4f7f\u7528\u300cRENAME TABLE\u300d\u4fee\u6539\u300cTEMPORARY\u300d\u8868\u683c\u540d\u7a31","title":"\u5efa\u7acb\u66ab\u5b58\u8868\u683c"},{"location":"Database/MySQL%20%E8%B6%85%E6%96%B0%E6%89%8B%E5%85%A5%E9%96%80/#_21","text":"ALTER TABLE \u8868\u683c\u540d\u7a31 \u4fee\u6539\u5b9a\u7fa9[,...] \u65b0\u589e ADD [COLUMN] \u6b04\u4f4d\u5b9a\u7fa9 [FIRST | AFTER \u6b04\u4f4d\u540d\u7a31] #\u589e\u52a0\u6b04\u4f4d\u6307\u5b9a\u4f4d\u7f6e ADD [COLUMN] (\u6b04\u4f4d\u5b9a\u7fa9[,...]) #\u589e\u52a0\u591a\u500b\u65b0\u6b04\u4f4d \u4fee\u6539 CHANGE [COLUMN] \u820a\u6b04\u4f4d\u540d\u7a31 \u65b0\u7684\u6b04\u4f4d\u5b9a\u7fa9 [FIRST | AFTER \u6b04\u4f4d\u540d\u7a31] #\u6539\u540d\u7a31\u3001\u5b9a\u7fa9\u8207\u4f4d\u7f6e MODIFY [COLUMN] \u6b04\u4f4d\u5b9a\u7fa9 [FIRST | AFTER \u6b04\u4f4d\u540d\u7a31] #\u6539\u5b9a\u7fa9\u8207\u4f4d\u7f6e \u522a\u9664 DROP [COLUMN] \u6b04\u4f4d\u540d\u7a31 \u4fee\u6539\u8868\u683c\u540d\u7a31 ALTER TABLE \u820a\u8868\u683c\u540d\u7a31 RENAME [TO] \u65b0\u8868\u683c\u540d\u7a31 RENAME TABLE \u820a\u8868\u683c\u540d\u7a31 TO \u65b0\u8868\u683c\u540d\u7a31[,...] #\u53ef\u4ee5\u4e00\u6b21\u6539\u591a\u500b \u522a\u9664\u8868\u683c DROP TABLE [IF EXISTS] \u8868\u683c\u540d\u7a31[,...] MySQL\u4e0d\u6703\u8ddf\u4f60\u78ba\u8a8d","title":"\u4fee\u6539\u8868\u683c"},{"location":"Database/MySQL%20%E8%B6%85%E6%96%B0%E6%89%8B%E5%85%A5%E9%96%80/#_22","text":"\u7d22\u5f15\u5206\u70ba\u4e3b\u7d22\u5f15\u9375(primary key)\u3001\u552f\u4e00\u7d22\u5f15(unique index)\u8207\u975e\u552f\u4e00\u7d22\u5f15(non-unique index)\u4e09\u7a2e\u3002 \u4e3b\u7d22\u5f15\u9375\u7684\u61c9\u7528\u5f88\u5e38\u898b\uff0c\u800c\u4e14\u4e00\u500b\u8868\u683c\u901a\u5e38\u6703\u6709\u4e00\u500b\uff0c\u800c\u4e14\u53ea\u80fd\u6709\u4e00\u500b\u3002\u5728\u4e00\u500b\u8868\u683c\u4e2d\uff0c\u8a2d\u5b9a\u70ba\u4e3b\u7d22\u5f15\u9375\u7684\u6b04\u4f4d\u503c\u4e0d\u53ef\u4ee5\u91cd\u8907\uff0c\u800c\u4e14\u4e0d\u53ef\u4ee5\u5132\u5b58\u300cNULL\u300d\u503c\u3002\u56e0\u70ba\u9019\u6a23\u7684\u9650\u5236\uff0c\u6240\u4ee5\u5f88\u9069\u5408\u4f7f\u7528\u5728\u985e\u4f3c\u7de8\u78bc\u3001\u4ee3\u865f\u6216\u8eab\u4efd\u8b49\u5b57\u865f\u9019\u985e\u6b04\u4f4d\u3002 \u552f\u4e00\u7d22\u5f15\u4e5f\u7a31\u70ba\u300c\u4e0d\u53ef\u91cd\u8907\u7d22\u5f15\u300d\uff0c\u5728\u4e00\u500b\u8868\u683c\u4e2d\uff0c\u8a2d\u5b9a\u70ba\u552f\u4e00\u7d22\u5f15\u7684\u6b04\u4f4d\u503c\u4e0d\u53ef\u4ee5\u91cd\u8907\uff0c\u4f46\u662f\u53ef\u4ee5\u5132\u5b58\u300cNULL\u300d\u503c\u3002\u9019\u7a2e\u7d22\u5f15\u9069\u5408\u7528\u5728\u985e\u4f3c\u54e1\u5de5\u8cc7\u6599\u8868\u683c\u4e2d\u5132\u5b58\u96fb\u5b50\u90f5\u4ef6\u5e33\u865f\u7684\u6b04\u4f4d\uff0c\u56e0\u70ba\u54e1\u5de5\u4e0d\u4e00\u5b9a\u6709\u96fb\u5b50\u90f5\u4ef6\u5e33\u865f\uff0c\u6240\u4ee5\u5141\u8a31\u5132\u5b58\u300cNULL\u300d\u503c\uff0c\u53ef\u4ee5\u6bcf\u4e00\u500b\u54e1\u5de5\u7684\u96fb\u5b50\u90f5\u4ef6\u5e33\u865f\u90fd\u4e0d\u53ef\u4ee5\u91cd\u8907\u3002 \u4e0a\u5217\u5169\u7a2e\u7d22\u5f15\u90fd\u53ef\u4ee5\u9810\u9632\u5132\u5b58\u7684\u8cc7\u6599\u767c\u751f\u91cd\u8907\u7684\u554f\u984c\uff0c\u4e5f\u53ef\u4ee5\u589e\u52a0\u67e5\u8a62\u8207\u7dad\u8b77\u8cc7\u6599\u7684\u6548\u7387\u3002\u975e\u552f\u4e00\u7d22\u5f15\u5c31\u53ea\u662f\u7528\u4f86\u589e\u52a0\u67e5\u8a62\u8207\u7dad\u8b77\u8cc7\u6599\u6548\u7387\u7684\u7d22\u5f15\u3002\u8a2d\u5b9a\u70ba\u975e\u552f\u4e00\u7d22\u5f15\u7684\u6b04\u4f4d\u503c\u53ef\u4ee5\u91cd\u8907\uff0c\u4e5f\u53ef\u4ee5\u5132\u5b58\u300cNULL\u300d\u503c\u3002 CREATE TABLE \u8868\u683c\u540d\u7a31( \u6b04\u4f4d\u5b9a\u7fa9 [UNIQUE] [KEY] | [PRIMARY [KEY]] ) \u9810\u8a2d\u7684\u300cHASH\u300d\u6f14\u7b97\u6cd5\u9069\u5408\u7528\u5728\u4e3b\u7d22\u5f15\u9375\u548c\u552f\u4e00\u7d22\u5f15\uff0c\u9019\u7a2e\u6f14\u7b97\u6cd5\u5728\u641c\u5c0b\u4e0d\u80fd\u91cd\u8907\u7684\u8cc7\u6599\u6642\uff0c\u6548\u7387\u6703\u6bd4\u8f03\u597d\uff1b\u800c\u300cBTREE\u300d\u6f14\u7b97\u6cd5\u9069\u5408\u7528\u5728\u53ef\u4ee5\u5141\u8a31\u91cd\u8907\u8cc7\u6599\u7684\u4e00\u822c\u7d22\u5f15\uff0c\u5728\u641c\u5c0b\u4e0a\u6703\u6bd4\u300cHASH\u300d\u6709\u66f4\u597d\u7684\u6548\u7387\u3002 \u8a3b\uff1a\u300cFULLTEXT\u300d\u7d22\u5f15\u53ea\u80fd\u7528\u5728\u300cCHAR\u300d\u3001\u300cVARCHAR\u300d\u8207\u300cTEXT\u300d\u578b\u614b\u7684\u6b04\u4f4d\uff0c\u800c\u4e14\u8868\u683c\u4f7f\u7528\u7684\u5132\u5b58\u5f15\u64ce\u5fc5\u9808\u662f\u300cMyISAM\u300d\u3002\u300cSPATIAL\u300d\u7d22\u5f15\u662f\u300cSPATIAL\u300d\u578b\u614b\u6b04\u4f4d\u5c08\u7528\u7684\uff0c\u800c\u4e14\u8868\u683c\u4f7f\u7528\u7684\u5132\u5b58\u5f15\u64ce\u5fc5\u9808\u662f\u300cMyISAM\u300d\u3002\u9019\u5169\u7a2e\u7d22\u5f15\u4e0d\u6703\u5728\u9019\u88e1\u8a0e\u8ad6\u3002","title":"\u7d22\u5f15\u4ecb\u7d39"},{"location":"Database/MySQL%20%E8%B6%85%E6%96%B0%E6%89%8B%E5%85%A5%E9%96%80/#auto_increment","text":"\u81ea\u52d5\u905e\u589e \u53ea\u6709\u6574\u6578\u578b\u614b\u624d\u53ef\u4ee5\u4f7f\u7528\u300cAUTO_INCREMENT\u300d\u6b04\u4f4d\u5c6c\u6027\uff0c\u4f60\u53ef\u4ee5\u6839\u64da\u7de8\u865f\u5927\u5c0f\u7684\u9700\u6c42\uff0c\u9078\u64c7\u4f7f\u7528\u300cTINYINT\u300d\u3001\u300cSMALLINT\u300d\u3001\u300cMEDIUMINT\u300d\u3001\u300cINT\u300d\u6216\u300cBIGINT\u300d\uff0c\u800c\u4e14\u56e0\u70ba\u53ea\u6703\u4f7f\u7528\u5230\u6b63\u6578\uff0c\u6240\u4ee5\u4f60\u53ef\u4ee5\u52a0\u5165\u300cUNSIGNED\u300d\u4f86\u589e\u52a0\u7de8\u865f\u7684\u7bc4\u570d NOT NULL \u4e00\u500b\u8868\u683c\u53ea\u80fd\u6709\u4e00\u500b\u300cAUTO_INCREMENT\u300d\u6b04\u4f4d\uff0c\u800c\u4e14\u8981\u70ba\u5b83\u5efa\u7acb\u4e00\u500b\u7d22\u5f15\uff0c\u800c\u4e14\u901a\u5e38\u662f\u5efa\u7acb\u4e3b\u7d22\u5f15\u9375\u6216\u552f\u4e00\u7d22\u5f15\uff0c\u9019\u6a23\u53ef\u4ee5\u9632\u6b62\u91cd\u8907\u7684\u7de8\u865f\uff1b\u4e0d\u904eMySQL\u4e5f\u5141\u8a31\u4f60\u5efa\u7acb\u53ef\u91cd\u8907\u7684\u7d22\u5f15 \u53ef\u4f7f\u7528LAST_INSERT_ID()\u53d6\u7684\u6700\u65b0\u4e00\u7b46\uff0c\u4f46\u81ea\u5df1\u6307\u5b9aAUTO_INCREMENT\u6b04\u4f4d\u7684\u8a71\u9019\u529f\u80fd\u6703\u6709\u554f\u984c \u4f7f\u7528\u300cTRUNCATE TABLE\u300d\u6558\u8ff0\u522a\u9664\u5305\u542b\u300cAUTO_INCREMENT\u300d\u6b04\u4f4d\u8868\u683c\u7684\u6240\u6709\u7d00\u9304\uff0c\u7de8\u865f\u6703\u91cd\u65b0\u5f9e\u982d\u958b\u59cb\u3002 \u4e0d\u8981\u6307\u5b9a\u503c\uff0c\u6216\u662f\u6307\u5b9a\u300cNULL\u300d\u503c\u7d66\u300cAUTO_INCREMENT\u300d\u6b04\u4f4d\uff0c\u90fd\u53ef\u4ee5\u8b93MySQL\u70ba\u4f60\u81ea\u52d5\u7de8\u88fd\u4e00\u500b\u6d41\u6c34\u865f\uff0c\u4e26\u5132\u5b58\u5230\u7d00\u9304\u4e2d\uff0c\u9019\u5169\u7a2e\u4e5f\u662f\u6bd4\u8f03\u597d\u7684\u65b9\u5f0f \u5982\u679c\u7de8\u865f\u5df2\u7d93\u5230\u6b04\u4f4d\u578b\u614b\u7684\u6700\u5927\u7bc4\u570d\uff0c\u4f8b\u5982\u4e00\u500b\u300cSMALLINT\u300d\u578b\u614b\uff0c\u800c\u4e14\u662f\u6307\u5b9a\u70ba\u300cUNSIGNED\u300d\u7684\u300cAUTO_INCREMENT\u300d\u6b04\u4f4d\uff0c\u7de8\u865f\u5df2\u7d93\u5230\u300c65535\u300d\u4e86\uff0c\u5982\u679c\u518d\u57f7\u884c\u65b0\u589e\u7684\u6558\u8ff0\uff0c\u5c31\u6703\u9020\u6210\u300cDuplicate entry \u201965535\u2032 for key \u2018\u6b04\u4f4d\u540d\u7a31\u2019\u300d\u7684\u932f\u8aa4","title":"AUTO_INCREMENT"},{"location":"Database/MySQL%20%E8%B6%85%E6%96%B0%E6%89%8B%E5%85%A5%E9%96%80/#_23","text":"MySQL\u8cc7\u6599\u5eab\u5728\u555f\u52d5\u4ee5\u5f8c\uff0c\u6703\u6709\u4e00\u500b\u5f88\u7279\u5225\u7684\u8cc7\u6599\u5eab\uff0c\u540d\u7a31\u662f\u300cinformation_schema\u300d\uff0c\u9019\u500b\u8cc7\u6599\u5eab\u901a\u5e38\u6703\u7a31\u70ba\u300c\u7cfb\u7d71\u8cc7\u8a0a\u8cc7\u6599\u5eab\u300d\u3002\u9019\u500b\u8cc7\u6599\u5eab\u4e2d\u6709\u4e00\u500b\u8868\u683c\u53eb\u4f5c\u300cTABLES\u300d\uff0c\u5b83\u5132\u5b58\u6240\u6709MySQL\u8cc7\u6599\u5eab\u4e2d\u7684\u8868\u683c\u76f8\u95dc\u8cc7\u8a0a\u3002","title":"\u67e5\u8a62\u8868\u683c\u8207\u7d22\u5f15\u8cc7\u8a0a"},{"location":"Database/MySQL%20%E8%B6%85%E6%96%B0%E6%89%8B%E5%85%A5%E9%96%80/#_24","text":"\u5b50\u67e5\u8a62(subquery)\u662f\u4e00\u7a2e\u5f88\u5e38\u898b\u7684\u61c9\u7528\uff0c\u4e0d\u8ad6\u662f\u67e5\u8a62\u3001\u65b0\u589e\u3001\u4fee\u6539\u6216\u522a\u9664\u90fd\u6709\u53ef\u80fd\u51fa\u73fe\u3002\u5b50\u67e5\u8a62\u662f\u4e00\u500b\u653e\u5728\u5de6\u53f3\u522e\u865f\u4e2d\u7684\u300cSELECT\u300d\u6558\u8ff0\uff0c\u800c\u9019\u500b\u67e5\u8a62\u6558\u8ff0\u6703\u653e\u5728\u53e6\u4e00\u500bSQL\u6558\u8ff0\u4e2d\u3002\u5728\u57f7\u884c\u4e00\u4e9b\u5de5\u4f5c\u7684\u6642\u5019\uff0c\u4f7f\u7528\u5b50\u67e5\u8a62\u53ef\u4ee5\u7c21\u5316SQL\u6558\u8ff0\u3002 SELECT Code, Population FROM country WHERE Population > ( SELECT Population FROM country WHERE Code = 'USA' ) \u5b50\u67e5\u8a62\u5927\u90e8\u4efd\u4f7f\u7528\u5728\u63d0\u4f9b\u5224\u65b7\u689d\u4ef6\u7528\u7684\u8cc7\u6599\uff0c\u5728\u300cWHERE\u300d\u548c\u300cHAVING\u300d\u5b50\u53e5\u4e2d\uff0c\u90fd\u53ef\u80fd\u51fa\u73fe\u5b50\u67e5\u8a62","title":"\u5b50\u67e5\u8a62"},{"location":"Database/MySQL%20%E8%B6%85%E6%96%B0%E6%89%8B%E5%85%A5%E9%96%80/#_25","text":"WHERE \u904b\u7b97\u5f0f == (\u5b50\u67e5\u8a62) HAVING <> < <= > >= \u6ce8\u610f\u56de\u50b3\u4e0d\u53ef\u8d85\u904e\u4e00\u500b\u6b04\u4f4d\u7684\u8cc7\u6599\u4e5f\u4e0d\u80fd\u8d85\u904e\u4e00\u7b46\u4ee5\u4e0a\u7684\u8cc7\u6599","title":"\u6bd4\u8f03\u904b\u7b97\u5b50"},{"location":"Database/MySQL%20%E8%B6%85%E6%96%B0%E6%89%8B%E5%85%A5%E9%96%80/#in","text":"WHERE \u904b\u7b97\u5f0f [NOT] IN (\u5b50\u67e5\u8a62) HAVING \u56e0\u70ba\u662f\u300cIN\u300d\u53ef\u4ee5\u6709\u591a\u7b46(\u4f46\u9084\u662f\u53ea\u80fd\u4e00\u6b04\u4f4d)","title":"\u300cIN\u300d\u904b\u7b97\u5b50"},{"location":"Database/MySQL%20%E8%B6%85%E6%96%B0%E6%89%8B%E5%85%A5%E9%96%80/#_26","text":"WHERE \u904b\u7b97\u5f0f == ALL (\u5b50\u67e5\u8a62) HAVING <> Any < SOME <= > >= \u5728MySQL\u4e2d\uff0c\u300cANY\u300d\u8207\u300cSOME\u300d\u904b\u7b97\u5b50\u7684\u6548\u679c\u662f\u4e00\u6a23\u7684 \u300c<> ALL\u300d\u6548\u679c\u5176\u5be6\u8ddf\u300cNOT IN\u300d\u662f\u4e00\u6a23\u7684 \u300c= ANY\u300d\u904b\u7b97\u5b50\u7684\u6548\u679c\u8ddf\u300cIN\u300d\u662f\u4e00\u6a23\u7684","title":"\u5176\u4ed6\u904b\u7b97\u5b50"},{"location":"Database/MySQL%20%E8%B6%85%E6%96%B0%E6%89%8B%E5%85%A5%E9%96%80/#_27","text":"\u591a\u6b04\u4f4d\u6bd4\u8f03 SELECT Name, GNP FROM country WHERE ( Continent, GovernmentForm ) = ( 'Asia', 'Replublic' ) \u642d\u914d\u5b50\u67e5\u8a62 SELECT Name FROM country WHERE (Region, GovernmentForm) = ( SELECT Region, GovernmentForm From country WHERE Name = 'Iraq') = \u540c\u6a23\u53ef\u4ee5\u6539\u6210 IN \u7684\u65b9\u5f0f\u67e5\u8a62","title":"\u591a\u6b04\u4f4d\u5b50\u67e5\u8a62"},{"location":"Database/MySQL%20%E8%B6%85%E6%96%B0%E6%89%8B%E5%85%A5%E9%96%80/#select_1","text":"\u5982\u679c\u9700\u8981\u7684\u8a71\uff0c\u5b50\u67e5\u8a62\u4e5f\u53ef\u4ee5\u4f7f\u7528\u5728\u300cSELECT\u300d\u5b50\u53e5\u4e2d \u611f\u89ba\u6c92\u5565\u5c41\u7528?","title":"SELECT\u5b50\u53e5\u8207\u5b50\u67e5\u8a62"},{"location":"Database/MySQL%20%E8%B6%85%E6%96%B0%E6%89%8B%E5%85%A5%E9%96%80/#from","text":"\u628a\u5b50\u67e5\u8a62\u7684\u56de\u50b3\u7576\u8868\u683c\u4f7f\u7528\uff0c\u4e00\u5b9a\u8981\u52a0 AS \u611f\u89ba\u4e5f\u6c92\u5565\u5c41\u7528","title":"FROM\u5b50\u53e5\u8207\u5b50\u67e5\u8a62"},{"location":"Database/MySQL%20%E8%B6%85%E6%96%B0%E6%89%8B%E5%85%A5%E9%96%80/#_28","text":"\u5728\u4f7f\u7528\u300cINSERT\u300d\u3001\u300cUPDATE\u300d\u8207\u300cDELETE\u300d\u6558\u8ff0\u57f7\u884c\u65b0\u589e\u3001\u4fee\u6539\u8207\u522a\u9664\u8cc7\u6599\u6642\uff0c\u4e5f\u53ef\u4ee5\u4f9d\u7167\u9700\u8981\u4f7f\u7528\u5b50\u67e5\u8a62\u4f86\u7c21\u5316\u8cc7\u6599\u7dad\u8b77\u7684\u6558\u8ff0\u3002 INSERT:\u7576\u6210\u585e\u5165\u7684\u8cc7\u6599 UPDATE\u3001DELETE:\u653e\u5728WHERE\u88e1\u7576\u689d\u4ef6 MySQL\u7684UPDATE\u3001DELETE\u4fee\u6539\u548c\u5b50\u67e5\u8a62\u4e0d\u53ef\u4ee5\u51fa\u73fe\u76f8\u540c\u7684\u8868\u683c","title":"\u8cc7\u6599\u7dad\u8b77\u8207\u5b50\u67e5\u8a62"},{"location":"Database/MySQL%20%E8%B6%85%E6%96%B0%E6%89%8B%E5%85%A5%E9%96%80/#_29","text":"\u5728\u4f7f\u7528\u5b50\u67e5\u8a62\u7684\u7684\u6642\u5019\uff0c\u901a\u5e38\u4e0d\u6703\u8ddf\u5916\u5c64\u67e5\u8a62\u6709\u76f4\u63a5\u7684\u95dc\u4fc2\uff0c\u4e5f\u5c31\u662f\u5b50\u67e5\u8a62\u4e0d\u6703\u4f7f\u7528\u5916\u5c64\u67e5\u8a62\u7684\u8cc7\u6599\uff1b\u4e0d\u904e\u9047\u5230\u4e00\u4e9b\u6bd4\u8f03\u7279\u6b8a\u7684\u9700\u6c42\u6642\uff0c\u5728\u300cWHERE\u300d\u6216\u300cHAVING\u300d\u5b50\u53e5\u4e2d\u7684\u5b50\u67e5\u8a62\uff0c\u4e5f\u9700\u8981\u4f7f\u7528\u5916\u5c64\u67e5\u8a62\u7684\u8cc7\u6599\u4f86\u57f7\u884c\u5224\u65b7\u7684\u5de5\u4f5c\uff0c\u9019\u6a23\u7684\u6558\u8ff0\u7a31\u70ba\u300c\u95dc\u806f\u5b50\u67e5\u8a62\u3001correlated subqueries\u300d\uff0c\u4f7f\u7528\u5225\u540d\u4f86\u9054\u6210 \u5728\u300cWHERE\u300d\u6216\u300cHAVING\u300d\u5b50\u53e5\u4e2d\u7528\u4f86\u8a2d\u5b9a\u689d\u4ef6\u7684\u5b50\u67e5\u8a62\uff0c\u53ef\u4ee5\u4f9d\u7167\u9700\u6c42\u4f7f\u7528\u50cf\u300cIN\u300d\u3001\u300cANY\u300d\u9019\u4e9b\u904b\u7b97\u5b50\u4f86\u5224\u65b7\u689d\u4ef6\u662f\u5426\u7b26\u5408\u3002\u9664\u4e86\u4e0a\u5217\u4ee5\u7d93\u8a0e\u8ad6\u7684\u6bd4\u8f03\u904b\u7b97\u5b50\u5916\uff0c\u9084\u6709\u4e00\u500b\u300cEXISTS\u300d\u904b\u7b97\u5b50\uff0c\u300cEXISTS\u300d\u904b\u7b97\u5b50\u5224\u65b7\u689d\u4ef6\u662f\u5426\u6210\u7acb\u7684\u4f9d\u64da\u6bd4\u8f03\u4e0d\u4e00\u6a23\uff0c\u5982\u679c\u5b50\u67e5\u8a62\u6709\u4efb\u4f55\u7d00\u9304\u8cc7\u6599\u56de\u50b3\uff0c\u689d\u4ef6\u5c31\u7b97\u6210\u7acb\uff0c\u6240\u4ee5SELECT\u5f8c\u9762\u63a5\u751a\u9ebc\u90fd\u4e00\u6a23(*, 1, NULL, 'Hello'...) WHERE \u904b\u7b97\u5f0f [NOT] EXISTS (\u5b50\u67e5\u8a62) HAVING","title":"\u95dc\u806f\u5b50\u67e5\u8a62"},{"location":"Database/MySQL%20%E8%B6%85%E6%96%B0%E6%89%8B%E5%85%A5%E9%96%80/#_30","text":"\u6709\u4e9b\u6642\u5019\u53ef\u4ee5\u4f7f\u7528\u7d50\u5408\u67e5\u8a62\u5c31\u597d SELECT Name FROM city WHERE ID NOT IN ( SELECT Captial FROM country WHERE Captial IS NOT NULL) \u5148left join\u518d\u628anot null\u53bb\u6389\u9054\u6210\u8ddf\u4e0a\u9762\u76f8\u540c\u6548\u679c SELECT city.Name, country,Capital FROM city LEFT JOIN country ON city.ID = country.Capital WHERE country.Capital IS NULL","title":"\u5b50\u67e5\u8a62\u8207\u7d50\u5408\u67e5\u8a62"},{"location":"Database/MySQL%20%E8%B6%85%E6%96%B0%E6%89%8B%E5%85%A5%E9%96%80/#views","text":"\u5982\u679c\u5728\u8cc7\u6599\u5eab\u7684\u61c9\u7528\u4e2d\uff0c\u51fa\u73fe\u5f88\u5e38\u57f7\u884c\u7684\u67e5\u8a62\u6558\u8ff0\u6642\uff0c\u4f60\u53ef\u4ee5\u5728MySQL\u8cc7\u6599\u5eab\u4e2d\u5efa\u7acb\u4e00\u7a2e\u300cView\u300d\u5143\u4ef6\uff0cView\u5143\u4ef6\u7528\u4f86\u4fdd\u5b58\u4e00\u6bb5\u4f60\u6307\u5b9a\u7684\u67e5\u8a62\u6558\u8ff0\u3002 \u4e5f\u6709\u5f88\u591a\u4eba\u7a31\u300cView\u300d\u5143\u4ef6\u662f\u4e00\u7a2e\u300c\u865b\u64ec\u8868\u683c\u300d\uff0c\u56e0\u70ba\u5b83\u4e0d\u662f\u4e00\u500b\u771f\u6b63\u5132\u5b58\u7d00\u9304\u8cc7\u6599\u7684\u8868\u683c\uff0c\u53ef\u662f\u5b83\u53c8\u8ddf\u8868\u683c\u7684\u7528\u6cd5\u985e\u4f3c\u3002 CREATE [OR REPLACE] VIEW \u540d\u7a31 \u5982\u679c\u9700\u8981\u4fee\u6539\u4e00\u500b\u5df2\u7d93\u5efa\u7acb\u597d\u7684View\u5143\u4ef6\uff0c\u4f60\u5c31\u8981\u52a0\u5165\u300cOR REPLACE\u300d\u7684\u8a2d\u5b9a \u5982\u679c\u60f3\u8981\u67e5\u8a62\u4e00\u500bView\u5143\u4ef6\u4e2d\u6703\u50b3\u56de\u54ea\u4e9b\u6b04\u4f4d\u7684\u8cc7\u6599\uff0c\u53ef\u4ee5\u4f7f\u7528\u300cDESCRIBE\u300d\u6216\u662f\u6bd4\u8f03\u7c21\u77ed\u7684\u300cDESC\u300d\u6307\u4ee4 \u4e0b\u5217\u662fMySQL\u95dc\u65bcView\u5143\u4ef6\u7684\u898f\u5b9a\u8207\u9650\u5236\uff1a \u5728\u540c\u4e00\u500b\u8cc7\u6599\u5eab\u4e2d\uff0cView\u7684\u540d\u7a31\u4e0d\u53ef\u4ee5\u91cd\u8907\uff0c\u4e5f\u4e0d\u53ef\u4ee5\u8ddf\u8868\u683c\u540d\u7a31\u4e00\u6a23 View\u4e0d\u53ef\u4ee5\u8ddfTriggers\u5efa\u7acb\u806f\u7d50 \u5132\u5b58\u5728View\u4e2d\u7684\u67e5\u8a62\u6558\u8ff0\u4e5f\u6709\u4e0b\u5217\u7684\u898f\u5b9a\uff1a \u67e5\u8a62\u6558\u8ff0\u4e2d\u53ea\u80fd\u4f7f\u7528\u5230\u5df2\u5b58\u5728\u7684\u8868\u683c\u6216View \u300cFROM\u300d\u5b50\u53e5\u4e2d\u4e0d\u53ef\u4ee5\u4f7f\u7528\u5b50\u67e5\u8a62 \u4e0d\u53ef\u4ee5\u4f7f\u7528\u300cTEMPORARY\u300d\u8868\u683c \u4e0d\u53ef\u4ee5\u4f7f\u7528\u81ea\u884c\u5b9a\u7fa9\u7684\u8b8a\u6578\u3001Procedure\u8207Prepared statement\u53c3\u6578 \u89e3\u6c7a\u6b04\u4f4d\u540d\u7a31\u4e00\u6a23\u7684\u65b9\u6cd5\u9664\u4e86\u4f7f\u7528\u5225\u540d\u5916\uff0c\u4e5f\u53ef\u4ee5\u6307\u5b9aView\u5143\u4ef6\u6b04\u4f4d\u540d\u7a31\uff1a CREATE [OR REPLACE] VIEW \u540d\u7a31 [(\u6b04\u4f4d\u540d\u7a31[,...])] AS \u67e5\u8a62\u6558\u8ff0 \u4f7f\u7528\u300cALTER VIEW\u300d\u6558\u8ff0\uff0c\u53ef\u4ee5\u8b93\u4f60\u4fee\u6539\u4e00\u500b\u5df2\u7d93\u5efa\u7acb\u597d\u7684View\u5143\u4ef6 \u5982\u679c\u4ee5\u4fee\u6539View\u5143\u4ef6\u7684\u5de5\u4f5c\u4f86\u8aaa\uff0c\u4f7f\u7528\u300cALTER VIEW\u300d\u6216\u300cCREATE OR REPLACE VIEW\u300d\u6558\u8ff0\u7684\u6548\u679c\u662f\u5b8c\u5168\u4e00\u6a23\u7684\u3002\u552f\u4e00\u7684\u5dee\u7570\u662f\u8981\u4fee\u6539View\u5143\u4ef6\u5982\u679c\u4e0d\u5b58\u5728\u7684\u8a71\uff0c\u300cCREATE OR REPLACE VIEW\u300d\u6558\u8ff0\u6703\u76f4\u63a5\u5efa\u7acb\u65b0\u7684View\u5143\u4ef6 \u4f7f\u7528\u300cDROP VIEW\u300d\u522a\u9664\u4e00\u500b\u4e0d\u9700\u8981\u7684View\u5143\u4ef6 \u5c0dView\u505a\u300cINSERT\u300d\u3001\u300cUPDATE\u300d\u548c\u300cDELETE\u300d\u90fd\u6703\u76f4\u63a5\u5f71\u97ff\u4f86\u6e90\u8cc7\u6599 \u52a0\u5165\u300cWITH CHECK OPTION\u300d\u8a2d\u5b9a\u7684View\u5143\u4ef6\uff0c\u5728\u57f7\u884c\u8cc7\u6599\u7dad\u8b77\u5de5\u4f5c\u6642\uff0c\u6703\u5148\u57f7\u884c\u6aa2\u67e5\u7684\u5de5\u4f5c\uff0c\u898f\u5247\u662f\u4e00\u5b9a\u8981\u7b26\u5408\u300cView\u5143\u4ef6\u4e2dWHERE\u8a2d\u5b9a\u7684\u689d\u4ef6\u300d View\u5143\u4ef6\u4e2d\u7684\u300cWITH CHECK OPTION\u300d\u8a2d\u5b9a\uff0c\u9084\u6709\u984d\u5916\u7684\u300cCASCADE\u300d\u548c\u300cLOCAL\u300d\u5169\u500b\u63a7\u5236\u6aa2\u67e5\u7bc4\u570d\u7684\u8a2d\u5b9a\uff0c\u6aa2\u67e5\u7bc4\u570d\u8a2d\u5b9a\u70ba\u300cLOCAL\u300d\u7684View\u5143\u4ef6\uff0c\u5728\u57f7\u884c\u8cc7\u6599\u7dad\u8b77\u7684\u6642\u5019\uff0c\u53ea\u6703\u6aa2\u67e5\u662f\u5426\u7b26\u5408\u81ea\u5df1\u7684\u689d\u4ef6\u8a2d\u5b9a\uff1b\u6aa2\u67e5\u7bc4\u570d\u8a2d\u5b9a\u70ba\u300cCASCADE\u300d\u7684View\u5143\u4ef6\uff0c\u5728\u57f7\u884c\u8cc7\u6599\u7dad\u8b77\u7684\u6642\u5019\uff0c\u5c31\u4e0d\u80fd\u9055\u53cd\u6240\u6709VIew\u5143\u4ef6\u7684\u689d\u4ef6\u8a2d\u5b9a View\u5143\u4ef6\u53ef\u4ee5\u63d0\u4f9b\u66f4\u65b9\u4fbf\u7684\u8cc7\u6599\u67e5\u8a62\u8207\u7dad\u8b77\u65b9\u5f0f\uff0c\u5728\u4f60\u5efa\u7acbView\u5143\u4ef6\u7684\u6642\u5019\uff0c\u9664\u4e86\u6307\u5b9a\u7684\u67e5\u8a62\u6558\u8ff0\u8981\u7b26\u5408\u898f\u5b9a\uff0c\u9084\u53ef\u4ee5\u6307\u5b9a\u8cc7\u6599\u5eab\u57f7\u884cView\u5143\u4ef6\u6642\u6240\u4f7f\u7528\u7684\u300c\u6f14\u7b97\u6cd5\u3001algorithm\u300d \u53ef\u4f7f\u7528\u6aa2\u67e5\u8868\u683c\u6216View\u5143\u4ef6\u7684\u6558\u8ff0\u300cCHECK TABLE\u300d\u6aa2\u67e5View\u5143\u4ef6\u5305\u542b\u7684\u67e5\u8a62\u6558\u8ff0\u662f\u5426\u6b63\u78ba MySQL\u8cc7\u6599\u5eab\u5728\u555f\u52d5\u4ee5\u5f8c\uff0c\u6703\u6709\u4e00\u500b\u5f88\u7279\u5225\u7684\u8cc7\u6599\u5eab\uff0c\u540d\u7a31\u662f\u300cinformation_schema\u300d\uff0c\u9019\u500b\u8cc7\u6599\u5eab\u901a\u5e38\u6703\u7a31\u70ba\u300c\u7cfb\u7d71\u8cc7\u8a0a\u8cc7\u6599\u5eab\u300d\u3002\u9019\u500b\u8cc7\u6599\u5eab\u4e2d\u6709\u4e00\u500b\u8868\u683c\u53eb\u4f5c\u300cVIEWS\u300d\uff0c\u5b83\u5132\u5b58\u6240\u6709MySQL\u8cc7\u6599\u5eab\u4e2dView\u5143\u4ef6\u7684\u76f8\u95dc\u8cc7\u8a0a","title":"Views"},{"location":"Database/MySQL%20%E8%B6%85%E6%96%B0%E6%89%8B%E5%85%A5%E9%96%80/#prepared-statement","text":"","title":"Prepared Statement"},{"location":"Database/MySQL%20%E8%B6%85%E6%96%B0%E6%89%8B%E5%85%A5%E9%96%80/#_31","text":"MySQL\u8cc7\u6599\u5eab\u4f3a\u670d\u5668\u63d0\u4f9b\u4e00\u7a2e\u7c21\u6613\u7684\u5132\u5b58\u8cc7\u6599\u65b9\u5f0f\uff0c\u7a31\u70ba\u300c\u4f7f\u7528\u8005\u8b8a\u6578\u3001user variables\u300d\u3002\u4f7f\u7528\u8005\u8b8a\u6578\u5132\u5b58\u4e00\u4e9b\u7c21\u55ae\u7684\u8cc7\u6599\uff0c\u4f8b\u5982\u6578\u5b57\u6216\u5b57\u4e32\uff0c\u5b83\u5011\u53ef\u4ee5\u5728\u5f8c\u7e8c\u7684\u64cd\u4f5c\u4e2d\u4f7f\u7528\u3002 SET @\u8b8a\u6578\u540d\u7a31 {= | := } \u503c [\u3121] select\u9806\u4fbf\u8a2d\u5b9a\u8b8a\u6578(\u53ea\u80fd\u4f7f\u7528 := )\uff1a SELECT @\u8b8a\u6578\u540d\u7a31 := \u503c [,...]","title":"\u4f7f\u7528\u8005\u8b8a\u6578"},{"location":"Database/MySQL%20%E8%B6%85%E6%96%B0%E6%89%8B%E5%85%A5%E9%96%80/#prepared-statements","text":"\u5982\u679c\u6709\u300c\u8a31\u591a\u8981\u57f7\u884c\u7684\u6558\u8ff0\uff0c\u53ef\u662f\u5167\u5bb9\u537b\u76f8\u4f3c\u300d\u7684\u60c5\u6cc1\uff0c\u53ef\u4ee5\u4f7f\u7528\u300cPrepared statements\u300d\u6539\u5584\u8cc7\u6599\u5eab\u7684\u6548\u7387\u3002 \u4e00\u822c\uff1a \u6aa2\u67e5->\u89e3\u6790->\u57f7\u884c->\u56de\u50b3 SELECT Code, Name, GNP FROM country WHERE Code = 'USA' \u4f7f\u7528prepared statement \u6aa2\u67e5->\u89e3\u6790->\u4fdd\u5b58 PREPARE my_country FROM `SELECT Code, Name, GNP FROM country WHERE Code = ?' \u57f7\u884c->\u56de\u50b3 SET @my_code = 'USA' EXECUTE my_country USING @my_code \u5efa\u7acb PREPARE \u540d\u7a31 FROM '\u6558\u8ff0` \u57f7\u884c EXECUTE \u540d\u7a31 [USING @\u8b8a\u6578\u540d\u7a31[,...]] \u522a\u9664 { DEALLOCATE | DROP } PREPARE \u540d\u7a31 prepared statement\u4f7f\u7528?\u4f86\u4ee3\u8868\u9700\u8981\u7684\u53c3\u6578\uff0c\u50b3\u5165\u7684\u6642\u5019\u6703\u4f9d\u7167\u9806\u5e8f\u5e36\u5165\uff0c\u6578\u91cf\u4e0d\u5c0d\u6703\u7522\u751f\u932f\u8aa4\uff1b\u5982\u679c\u50b3\u5165\u7684\u8b8a\u6578\u4e0d\u5b58\u5728\u6703\u8b8a\u6210NULL\u3002 \u6240\u6709\u4f7f\u7528\u8005\u8b8a\u6578\u8207prepared statements\u90fd\u662f\u67d0\u4e00\u500b\u7528\u6236\u7aef\u5c08\u5c6c\u7684\uff0c\u5982\u679c\u7528\u6236\u7aef\u96e2\u7dda\u4ee5\u5f8c\uff0c\u4ed6\u6240\u8a2d\u5b9a\u7684\u4f7f\u7528\u8005\u8b8a\u6578\u8207prepared statements\u90fd\u6703\u88ab\u6e05\u9664\uff0c\u6240\u4ee5\u5efa\u7acbprepared statements\u6642\uff0c\u4e0d\u53ef\u4ee5\u6307\u5b9a\u5b83\u662f\u5c6c\u65bc\u54ea\u4e00\u500b\u8cc7\u6599\u5eab\uff0c\u5426\u5247\u6703\u6709\u932f\u8aa4\u8a0a\u606f\u3002","title":"Prepared Statements\u7684\u61c9\u7528"},{"location":"Database/MySQL%20%E8%B6%85%E6%96%B0%E6%89%8B%E5%85%A5%E9%96%80/#stored-routines","text":"","title":"Stored Routines \u5165\u9580"},{"location":"Database/MySQL%20%E8%B6%85%E6%96%B0%E6%89%8B%E5%85%A5%E9%96%80/#sotred-routines","text":"","title":"Sotred Routines\u7684\u8b8a\u6578\u8207\u6d41\u7a0b"},{"location":"Database/MySQL%20%E8%B6%85%E6%96%B0%E6%89%8B%E5%85%A5%E9%96%80/#stored-routines_1","text":"Triton Ho \u8def\u908a\u5c0f\u9178\u9178\u7684\u4fe1\u7bb1\u6536\u5230\u7684\u554f\u984c\uff1a \u70ba\u4ec0\u9ebc\u9280\u884c\u90fd\u559c\u6b61\u628aSQL\u5beb\u5728\u9810\u5b58\u7a0b\u5e8f\u5167\uff1f \u9664\u4e86\u6bd4\u8f03\u5feb\u3001\u6bd4\u8f03\u5b89\u5168\u4ee5\u53ca\u4e0d\u7528\u4f48\u7248\uff0c\u537b\u4e5f\u5931\u53bb\u4e86\u5f48\u6027\uff0c\u9019\u6a23\u597d\u55ce \u4e00\u652f\u9810\u5b58\u7a0b\u5e8f\u8655\u7406\u597d\u6240\u6709\u4e8b\u60c5\uff0c\u9084\u662f\u5728AP\u547c\u53eb\u4e0d\u540c\u7684\u9810\u5b58\u7a0b\u5e8f\u597d \u524d\u8005\u5beb\u5f97\u5feb\u4f46\u96e3\u7dad\u8b77\uff0c\u5f8c\u8005\u6162\u4e00\u4e9b\u4e9b\u4f46\u53ef\u7dad\u8b77\u6027\u537b\u63d0\u5347\u4e86\u4e0d\u5c11 \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014 \u6211\u53cd\u554f\u4e00\u53e5\uff1a \u5982\u679c\u662f\u5927\u7d04\uff11\uff15\u5e74\u524d\uff0c\u4f60\u662f\u9280\u884c\u7684Tech Lead\uff0c\u4f60\u6703\u6253\u7b97\u7528\u4ec0\u9ebcprogramming language\u53bb\u5beb\u4f60\u7684business logic\uff1f \uff11\u3000PHP\uff1f\u5225\u9b27\u597d\u55ce\uff0cweak typed language\u5c11\u4e86compiler\u4fbf\u5c11\u4e86\u591a\u4e00\u4efd\u984d\u5916\u7684\u6aa2\u67e5\u3002\u9280\u884c\u7684\u5e33\u76ee\u932f\u4e00\u4e0b\u90fd\u662f\u88ab\u653f\u5e9c\u6293\u53bb\u62b1\u8336\u7684 \uff12\u3000Java\uff1f\u525b\u51fa\u4e16\uff0c\u9084\u6c92\u6210\u719f \uff13\u3000ASP .NET\uff1f\u672a\u767c\u660e\uff0c886 \uff14\u3000ASP\uff1a\u9664\u4e86MS MVP\u4e4b\u5916\u6c92\u4eba\u8b9a\u597d\u7684\u8a9e\u8a00 \u90a3\u6642\u7a7a\u4e0b\uff0c\u4e00\u5806\u73fe\u4ee3\u7684\u8a9e\u8a00\u6839\u672c\u9084\u672a\u51fa\u4f86\uff0f\u6210\u719f\u3002\u6240\u4ee5\u7528\u90a3\u6642\u7a7a\u4e0b\u76f8\u5c0d\u5df2\u7d93\u6210\u719f\u7684stored procedure\u662f\u4e00\u500b\u5408\u7406\u9078\u64c7\u3002 \u800c\u9280\u884c\u7cfb\u7d71\uff0c\u4e00\u5411\u90fd\u662f\u6c92\u4e8b\u5c31\u4e0d\u6703\u8f15\u6613\u6539\u52d5\uff0f\u5347\u7d1a\u7684\u3002 \uff08\u73fe\u5be6\u554f\u984c\uff1a\u6709\u4eba\u78b0\u904e\u7684source code\u4fbf\u6709\u5e36\u5165\u65b0bug\u7684\u98a8\u96aa\u2026\u2026\uff09 \u6240\u4ee5\uff0c\u4e00\u5806\u5beb\u4e0b\u4f86\u7684stored procedure\u5230\u4eca\u5929\u9084\u6c92\u88ab\u66ff\u4ee3\u6389\u4e5f\u662f\u5f88\u6b63\u5e38\u7684\u3002 \u6700\u5f8c\u4e00\u53e5\uff1a\u9664\u4e86\u6975\u5c11\u6578\u7279\u6b8a\u5834\u5408\uff0c2019\u7684\u4eca\u5929\u4e0d\u61c9\u8a72\u518d\u628abusiness logic\u653e\u5728stored procedure\u5167","title":"Stored Routines\u9032\u968e"},{"location":"Database/MySQL%20%E8%B6%85%E6%96%B0%E6%89%8B%E5%85%A5%E9%96%80/#triggers","text":"\u6211\u89ba\u5f97\u9019\u6771\u897f\u4e5f\u4e0d\u8a72\u5b58\u5728","title":"Triggers"},{"location":"Database/MySQL%20%E8%B6%85%E6%96%B0%E6%89%8B%E5%85%A5%E9%96%80/#information_schema","text":"\u8868\u683c\u540d\u7a31 \u8aaa\u660e CHARACTER_SETS MySQL\u8cc7\u6599\u5eab\u652f\u63f4\u7684\u5b57\u5143\u96c6 COLLATIONS MySQL\u8cc7\u6599\u5eab\u652f\u63f4\u7684collation COLLATION_CHARACTER_SET_APPLICABILITY \u5b57\u5143\u96c6\u8207collation\u5c0d\u61c9\u8cc7\u8a0a COLUMNS \u6b04\u4f4d\u8cc7\u8a0a COLUMN_PRIVILEGES \u6b04\u4f4d\u6388\u6b0a\u8cc7\u8a0a KEY_COLUMN_USAGE \u7d22\u5f15\u6b04\u4f4d\u7684\u9650\u5236\u8cc7\u8a0a ENGINES MySQL\u8cc7\u6599\u5eab\u652f\u63f4\u7684\u5132\u5b58\u5f15\u64ce GLOBAL_STATUS MySQL\u8cc7\u6599\u5eab\u4f3a\u670d\u5668\u72c0\u614b\u8cc7\u8a0a GLOBAL_VARIABLES MySQL\u8cc7\u6599\u5eab\u4f3a\u670d\u5668\u8b8a\u6578\u8cc7\u8a0a KEY_COLUMN_USAGE \u7d22\u5f15\u9375\u8cc7\u8a0a ROUTINES Stored routines\u8cc7\u8a0a SCHEMATA \u8cc7\u6599\u5eab\u8cc7\u8a0a SESSION_STATUS \u7528\u6236\u7aef\u9023\u7dda\u72c0\u614b\u8cc7\u8a0a SESSION_VARIABLES \u7528\u6236\u7aef\u9023\u7dda\u8b8a\u6578\u8cc7\u8a0a STATISTICS \u8868\u683c\u7d22\u5f15\u8cc7\u8a0a TABLES \u8868\u683c\u8cc7\u8a0a TABLE_CONSTRAINTS \u8868\u683c\u9650\u5236\u8cc7\u8a0a TABLE_PRIVILEGES \u8868\u683c\u6388\u6b0a\u8cc7\u8a0a TRIGGERS Triggers\u8cc7\u8a0a USER_PRIVILEGES \u4f7f\u7528\u8005\u6388\u6b0a\u8cc7\u8a0a VIEWS Views\u8cc7\u8a0a \u300cinformation_schema\u300d\u8cc7\u6599\u5eab\u7a31\u70ba\u300cdatabase metadata\u300d\uff0c\u5305\u542b\u8cc7\u6599\u5eab\u5143\u4ef6\u8207\u4f3a\u670d\u5668\u904b\u4f5c\u7684\u5b8c\u6574\u8cc7\u8a0a\u90fd\u5132\u5b58\u5728\u9019\u500b\u8cc7\u6599\u5eab\u4e2d\u3002\u4f60\u4e0d\u9808\u8981\u81ea\u5df1\u5efa\u7acb\u8207\u7dad\u8b77\u300cinformation_schema\u300d\u8cc7\u6599\u5eab\uff0c\u5b83\u662f\u7531MySQL\u8cc7\u6599\u5eab\u4f3a\u670d\u5668\u8ca0\u8cac\u5efa\u7acb\u8207\u7dad\u8b77\u7684\u3002\u4f60\u53ea\u80fd\u5920\u5728\u9700\u8981\u7684\u6642\u5019\uff0c\u4f7f\u7528\u300cSELECT\u300d\u6558\u8ff0\u4f86\u67e5\u8a62\u5132\u5b58\u5728\u88e1\u9762\u7684\u8cc7\u6599\u3002","title":"\u67e5\u8a62 information_schema"},{"location":"Database/MySQL%20%E8%B6%85%E6%96%B0%E6%89%8B%E5%85%A5%E9%96%80/#show","text":"\u9664\u4e86\u4f7f\u7528\u67e5\u8a62\u6558\u8ff0\u76f4\u63a5\u67e5\u8a62\u300cinformation_schema\u300d\u8cc7\u6599\u5eab\u4e2d\u7684\u8cc7\u8a0a\u5916\uff0cMySQL\u8cc7\u6599\u5eab\u4f3a\u670d\u5668\u4f9b\u6709\u8a31\u591a\u4e0d\u540c\u7528\u6cd5\u7684\u300cSHOW\u300d\u6307\u4ee4\uff0c\u540c\u6a23\u53ef\u4ee5\u67e5\u8a62\u8cc7\u6599\u5eab\u8cc7\u8a0a\u3002\u300cSHOW\u300d\u6307\u4ee4\u662fMySQL\u8cc7\u6599\u5eab\u4f3a\u670d\u5668\u5c08\u7528\u7684\u6307\u4ee4\uff0c\u4e26\u4e0d\u662f\u6a19\u6e96\u7684SQL\u6558\u8ff0\u3002 \u67e5\u8a62MySQL\u8cc7\u6599\u5eab\u4f3a\u670d\u5668\u4e2d\u7684\u8cc7\u6599\u5eab\u8cc7\u8a0a\uff1a SHOW {DATABASES | SCHEMAS} [LIKE '\u6a23\u7248'] \u67e5\u8a62MySQL\u8cc7\u6599\u5eab\u4f3a\u670d\u5668\u4e2d\u7684\u8868\u683c\u8cc7\u8a0a\uff1a SHOW TABLES [FROM \u8cc7\u6599\u5eab\u540d\u7a31] [LIKE '\u6a23\u7248'] SHOW TABLES STATUS [FROM \u8cc7\u6599\u5eab\u540d\u7a31] [LIKE '\u6a23\u7248' | WHERE \u689d\u4ef6] \u67e5\u8a62MySQL\u8cc7\u6599\u5eab\u4f3a\u670d\u5668\u4e2d\u7684\u6b04\u4f4d\u8cc7\u8a0a\uff1a SHOW [FULL] COLUMNS FROM \u8868\u683c\u540d\u7a31 [FROM \u8cc7\u6599\u5eab\u540d\u7a31] [LIKE '\u6a23\u7248' | WHERE \u689d\u4ef6] \u67e5\u8a62MySQL\u8cc7\u6599\u5eab\u4f3a\u670d\u5668\u4e2d\u7684\u7d22\u5f15\u8cc7\u8a0a\uff1a SHOW INDEX FROM \u8868\u683c\u540d\u7a31 [FROM \u8cc7\u6599\u5eab\u540d\u7a31] [WHERE \u689d\u4ef6] \u67e5\u8a62MySQL\u8cc7\u6599\u5eab\u4f3a\u670d\u5668\u4e2d\u7684trigger\u8cc7\u8a0a\uff1a SHOW TRIGGERS [FROM \u8cc7\u6599\u5eab\u540d\u7a31] [LIKE '\u6a23\u7248' | WHERE \u689d\u4ef6] \u67e5\u8a62MySQL\u8cc7\u6599\u5eab\u4f3a\u670d\u5668\u4e2d\u7684\u5b57\u5143\u96c6\u8207collation\u8cc7\u8a0a\uff1a SHOW CHARACTER SET [LIKE '\u6a23\u7248' | WHERE \u689d\u4ef6] SHOW COLLATION [LIKE '\u6a23\u7248' | WHERE \u689d\u4ef6] \u67e5\u8a62MySQL\u8cc7\u6599\u5eab\u4f3a\u670d\u5668\u4e2d\u652f\u63f4\u7684\u5132\u5b58\u5f15\u64ce\u8cc7\u8a0a\uff1a SHOW [STORAGE] ENGINE \u67e5\u8a62MySQL\u8cc7\u6599\u5eab\u4f3a\u670d\u5668\u72c0\u614b\u8207\u7cfb\u7d71\u8b8a\u6578\u8cc7\u8a0a\uff1a SHOW [GLOBAL | SESSION] STATUS [LIKE '\u6a23\u7248 | WHERE \u689d\u4ef6] SHOW [GLOBAL | SESSION] VARIABLES [LIKE '\u6a23\u7248 | WHERE \u689d\u4ef6] \u67e5\u8a62MySQL\u8cc7\u6599\u5eab\u4f3a\u670d\u5668\u4e2d\u8207\u5b57\u5143\u96c6\u76f8\u95dc\u7684\u8b8a\u6578\u8cc7\u8a0a\uff1a SHOW GLOBAL VARIABLE LIKE 'character%`","title":"SHOW\u6307\u4ee4"},{"location":"Database/MySQL%20%E8%B6%85%E6%96%B0%E6%89%8B%E5%85%A5%E9%96%80/#_32","text":"\u4e0b\u5217\u7684\u300cSHOW\u300d\u6307\u4ee4\u8a9e\u6cd5\u53ef\u4ee5\u67e5\u8a62MySQL\u8cc7\u6599\u5eab\u4f3a\u670d\u5668\u4e2d\u5efa\u7acb\u5404\u7a2e\u5143\u4ef6\u7684\u8a73\u7d30\u8cc7\u8a0a\uff1a \u6307\u4ee4 \u8aaa\u660e SHOW CREATE DATABASE \u8cc7\u6599\u5eab\u540d\u7a31 \u67e5\u8a62\u5efa\u7acb\u8cc7\u6599\u5eab\u7684\u8a73\u7d30\u8cc7\u8a0a SHOW CREATE TABLE \u8868\u683c\u540d\u7a31 \u67e5\u8a62\u5efa\u7acb\u8868\u683c\u7684\u8a73\u7d30\u8cc7\u8a0a SHOW CREATE FUNCTION \u540d\u7a31 \u67e5\u8a62\u5efa\u7acbFunction\u7684\u8a73\u7d30\u8cc7\u8a0a SHOW CREATE PROCEDURE \u540d\u7a31 \u67e5\u8a62\u5efa\u7acbProcedure\u7684\u8a73\u7d30\u8cc7\u8a0a SHOW CREATE VIEW \u540d\u7a31 \u67e5\u8a62\u5efa\u7acbView\u7684\u8a73\u7d30\u8cc7\u8a0a","title":"\u5efa\u7acb\u5143\u4ef6\u8cc7\u8a0a"},{"location":"Database/MySQL%20%E8%B6%85%E6%96%B0%E6%89%8B%E5%85%A5%E9%96%80/#describe","text":"\u300cDESCRIBE\u300d\u662fMySQL\u8cc7\u6599\u5eab\u4f3a\u670d\u5668\u63d0\u4f9b\u7684\u7279\u6b8a\u6307\u4ee4\uff0c\u4e26\u4e0d\u662f\u6a19\u6e96\u7684SQL\u6558\u8ff0\u3002\u5b83\u53ef\u4ee5\u67e5\u8a62\u6307\u5b9a\u8868\u683c\u7684\u6b04\u4f4d\u8cc7\u8a0a\uff1a {DESCRIBE | DESC} \u8868\u683c\u540d\u7a31 [\u6b04\u4f4d\u540d\u7a31 | '\u6a23\u7248']","title":"DESCRIBE\u6307\u4ee4"},{"location":"Database/MySQL%20%E8%B6%85%E6%96%B0%E6%89%8B%E5%85%A5%E9%96%80/#mysqlshow","text":"MySQL\u8cc7\u6599\u5eab\u4f3a\u670d\u5668\u63d0\u4f9b\u4e00\u500b\u53ef\u4ee5\u5728\u547d\u4ee4\u63d0\u793a\u5b57\u5143\u4e0b\u57f7\u884c\u7684\u5de5\u5177\u7a0b\u5f0f\u300cmysqlshow\u300d\uff1a mysqlshow -h \u8cc7\u6599\u5eab\u4f3a\u670d\u5668 -u \u5e33\u865f -p\u5bc6\u78bc \u5bc6\u78bc\u8ddf-p\u4e4b\u9593\u4e0d\u80fd\u6709\u7a7a\u683c","title":"mysqlshow"},{"location":"Database/MySQL%20%E8%B6%85%E6%96%B0%E6%89%8B%E5%85%A5%E9%96%80/#_33","text":"MySQL\u8cc7\u6599\u5eab\u74b0\u5883\u4e2d\uff0c\u53ef\u4ee5\u4f7f\u7528\u300csql_mode\u300d\u7cfb\u7d71\u8b8a\u6578\u8a2d\u5b9a\u8cc7\u6599\u5eab\u5c0d\u65bc\u6aa2\u67e5\u932f\u8aa4\u8cc7\u6599\u7684\u300c\u56b4\u683c\u300d\u7a0b\u5ea6\uff0c\u5206\u70ba\u300cstrict\u300d\u8207\u300cnon-strict\u300d\u5169\u7a2e\u6a21\u5f0f\u3002\u5728strict\u6a21\u5f0f\u4e0b\uff0c\u8cc7\u6599\u5eab\u6703\u56b4\u683c\u7684\u6aa2\u67e5\u8207\u767c\u73fe\u932f\u8aa4\u7684\u8cc7\u6599\uff0c\u800c\u4e14\u4e0d\u6703\u5132\u5b58\u932f\u8aa4\u7684\u8cc7\u6599\uff1b\u5728non-strict\u6a21\u5f0f\u4e0b\uff0c\u8cc7\u6599\u5eab\u540c\u6a23\u6703\u6aa2\u67e5\u8207\u767c\u73fe\u932f\u8aa4\u7684\u8cc7\u6599\uff0c\u4e0d\u904e\u5b83\u6703\u5118\u91cf\u8a66\u8457\u8655\u7406\u9019\u4e9b\u932f\u8aa4\u7684\u8cc7\u6599\uff0c\u518d\u628a\u8cc7\u6599\u5132\u5b58\u8d77\u4f86\u3002 \u4f60\u53ef\u4ee5\u4f9d\u7167\u81ea\u5df1\u7684\u9700\u6c42\u8a2d\u5b9a\u300csql_mode\u300d\u7cfb\u7d71\u8b8a\u6578\uff0c\u4e0b\u5217\u7684\u6307\u4ee4\u53ef\u4ee5\u8a2d\u5b9a\u70ba\u300cnon-strict\u300d\u6a21\u5f0f\uff1a SET sql_mode = '' \u4e0b\u5217\u7684\u6558\u8ff0\u8a2d\u5b9a\u70ba\u300cstrict\u300d\u6a21\u5f0f\uff1a SET sql_mode = 'STRICT_TRANS_TABLES' SET sql_mode = 'STRICT_ALL_TABLES'","title":"\u932f\u8aa4\u8655\u7406\u8207\u67e5\u8a62"},{"location":"Database/MySQL%20%E8%B6%85%E6%96%B0%E6%89%8B%E5%85%A5%E9%96%80/#non-strict","text":"SET [SESSION | GLOBAL] sql_mode = '[\u8a2d\u5b9a[,...]]' \u5982\u679c\u8cc7\u6599\u5eab\u767c\u73fe\u4e0d\u7b26\u5408\u6b04\u4f4d\u898f\u5b9a\u7684\u8cc7\u6599\uff0c\u5b83\u6703\u5118\u91cf\u8a66\u8457\u8655\u7406\u9019\u4e9b\u932f\u8aa4\u7684\u8cc7\u6599\uff0c\u518d\u628a\u8cc7\u6599\u5132\u5b58\u8d77\u4f86\uff0c\u7136\u5f8c\u4f7f\u7528\u8b66\u544a\u8a0a\u606f\u901a\u77e5\u4f60\u3002 \u5728non-strict\u6a21\u5f0f\u904b\u4f5c\u6642\uff0c\u4e0b\u5217\u5e7e\u7a2e\u60c5\u5f62\u90fd\u6709\u53ef\u80fd\u6703\u555f\u52d5\u81ea\u52d5\u4fee\u6b63\u8cc7\u6599\u7684\u529f\u80fd\uff1a \u57f7\u884c\u65b0\u589e\u6216\u4fee\u6539\u6558\u8ff0\uff0c\u5305\u542bINSERT\u3001REPLACE\u3001UPDATE\u8207LOAD DATA INFILE \u4f7f\u7528ALTER TABLE\u4fee\u6539\u8868\u683c\u7684\u6b04\u4f4d\u5b9a\u7fa9 \u5728\u6b04\u4f4d\u5b9a\u7fa9\u4e2d\u4f7f\u7528\u300cDEFAULT\u300d\u6307\u5b9a\u6b04\u4f4d\u7684\u9810\u8a2d\u503c","title":"Non-Strict\u6a21\u5f0f"},{"location":"Database/MySQL%20%E8%B6%85%E6%96%B0%E6%89%8B%E5%85%A5%E9%96%80/#strictignore","text":"\u4f60\u4e5f\u53ef\u4ee5\u5c07\u8cc7\u6599\u5eab\u8a2d\u5b9a\u70ba\u300cstrict\u300d\u6a21\u5f0f\uff0c\u5728\u9019\u500b\u6a21\u5f0f\u4e0b\uff0c\u53ea\u6709\u5728\u5132\u5b58\u5b57\u4e32\u8cc7\u6599\u5230\u975e\u5b57\u4e32\u578b\u614b\u7684\u6b04\u4f4d\u6642\uff0c\u8cc7\u6599\u5eab\u6703\u5617\u8a66\u5e6b\u4f60\u6307\u5b9a\u7684\u5b57\u4e32\u8f49\u63db\u70ba\u6b04\u4f4d\u578b\u614b\uff1b\u5176\u5b83\u4efb\u4f55\u9055\u53cd\u8cc7\u6599\u578b\u614b\u7684\u554f\u984c\uff0c\u8cc7\u6599\u5eab\u4e0d\u6703\u5132\u5b58\u932f\u8aa4\u7684\u8cc7\u6599\uff0c\u800c\u4e14\u6703\u7522\u751f\u932f\u8aa4\u8a0a\u606f\u3002 \u5728\u300cstrict\u300d\u6a21\u5f0f\u6a21\u5f0f\u4e0b\u57f7\u884c\u65b0\u589e\u8207\u4fee\u6539\u6642\uff0c\u53ef\u4ee5\u4f9d\u7167\u9700\u6c42\u52a0\u5165\u300cIGNORE\u300d\u95dc\u9375\u5b57\u57f7\u884cnon-strict\u6a21\u5f0f\uff1a INSERT [IGNORE] [INTO] \u8868\u683c\u540d\u7a31 ... UPDATE [IGNORE] \u8868\u683c\u540d\u7a31 ...","title":"Strict\u6a21\u5f0f\u8207IGNORE\u95dc\u9375\u5b57"},{"location":"Database/MySQL%20%E8%B6%85%E6%96%B0%E6%89%8B%E5%85%A5%E9%96%80/#_34","text":"\u300csql_mode\u300d\u8b8a\u6578\u8a2d\u5b9a\u70ba\u300cnon-strict\u300d\u6216\u300cstrict\u300d\u6a21\u5f0f\u5f8c\uff0c\u9084\u53ef\u4ee5\u4f9d\u7167\u81ea\u5df1\u7684\u9700\u6c42\u52a0\u5165\u984d\u5916\u7684\u8a2d\u5b9a\uff1a \u8a2d\u5b9a\u503c \u8aaa\u660e ALLOW_INVALID_DATES \u5141\u8a31\u932f\u8aa4\u7684\u65e5\u671f\u8cc7\u6599 NO_ZERO_DATE \u4e0d\u5141\u8a31\u5168\u90e8\u662f0\u7684\u65e5\u671f\u8cc7\u6599 NO_ZERO_IN_DATE \u65e5\u671f\u8cc7\u6599\u4e2d\u4e0d\u53ef\u4ee5\u67090 ERROR_FOR_DIVISION_BY_ZERO \u9664\u4ee50\u6642\u7522\u751f\u932f\u8aa4\uff0c\u800c\u4e0d\u662f\u7522\u751fNULL\u503c \u6709\u4e00\u4e9bdefault\u7684sql_mode\u53ef\u4ee5\u8a2d\u5b9a\uff0c\u4f8b\u5982 MSSQL , ORACLE \u7b49\u3002","title":"\u5176\u5b83\u8a2d\u5b9a"},{"location":"Database/MySQL%20%E8%B6%85%E6%96%B0%E6%89%8B%E5%85%A5%E9%96%80/#_35","text":"\u5728\u57f7\u884cSQL\u6558\u8ff0\u5f8c\uff0c\u5982\u679c\u767c\u751f\u8b66\u544a\u6216\u932f\u8aa4\uff0c\u4f60\u53ef\u80fd\u9700\u8981\u6839\u64da\u9019\u4e9b\u8a0a\u606f\u4f86\u57f7\u884c\u4e00\u4e9b\u88dc\u6551\u5de5\u4f5c\u3002MySQL\u63d0\u4f9b\u7684\u300cSHOW\u300d\u6307\u4ee4\u53ef\u4ee5\u67e5\u8a62\u9019\u4e9b\u8a0a\u606f\uff1a SHOW WARNINGS [LIMIT [\u5ffd\u7565\u6578\u91cf,] \u6578\u91cf] SHOW ERRORS [LIMIT [\u5ffd\u7565\u6578\u91cf,] \u6578\u91cf] \u5982\u679c\u662f\u56e0\u70ba\u57f7\u884cSQL\u6558\u8ff0\uff0c\u5c0e\u81f4\u8cc7\u6599\u5eab\u7522\u751f\u7684\u8b66\u544a\u6216\u932f\u8aa4\uff0c\u90fd\u53ef\u4ee5\u4f7f\u7528\u300cSHOW WARNINGS\u300d\u6216\u300cSHOW ERRORS\u300d\u67e5\u8a62\uff1b\u4e0d\u904e\u4e5f\u6709\u53ef\u80fd\u662f\u56e0\u70ba\u4f5c\u696d\u7cfb\u7d71\u767c\u751f\u554f\u984c\uff0c\u5982\u679c\u767c\u751f\u9019\u985e\u7684\u932f\u8aa4\uff0c\u8a73\u7d30\u7684\u932f\u8aa4\u8a0a\u606f\u8981\u5728\u547d\u4ee4\u63d0\u793a\u5b57\u5143\u4e0b\uff0c\u4f7f\u7528\u300cperror\u300d\u7a0b\u5f0f\u4f86\u67e5\u8a62\uff1a shell> perror [Errorcode]","title":"\u67e5\u8a62\u932f\u8aa4\u8207\u8b66\u544a"},{"location":"Database/MySQL%20%E8%B6%85%E6%96%B0%E6%89%8B%E5%85%A5%E9%96%80/#_36","text":"\u4f60\u53ef\u4ee5\u4f7f\u7528SQL\u6558\u8ff0\u6216MySQL\u63d0\u4f9b\u7684\u7528\u6236\u7aef\u7a0b\u5f0f\uff0c\u57f7\u884c\u532f\u51fa\u8207\u532f\u5165\u7684\u5de5\u4f5c\u3002\u532f\u51fa\u8cc7\u6599\u53ef\u4ee5\u4f7f\u7528\u300cSELECT INTO OUTFILE\u300d\u6558\u8ff0\uff0c\u6216\u662f\u300cmysqldump\u300d\u7528\u6236\u7aef\u7a0b\u5f0f\uff0c\u5b83\u5011\u90fd\u53ef\u4ee5\u5c07\u6307\u5b9a\u7684\u8cc7\u6599\u5132\u5b58\u70ba\u6a94\u6848\u4fdd\u5b58\u8d77\u4f86\uff1b\u532f\u5165\u8cc7\u6599\u53ef\u4ee5\u4f7f\u7528\u300cLOAD DATA INFILE\u300d\u6558\u8ff0\uff0c\u6216\u662f\u300cmysqlimport\u300d\u7528\u6236\u7aef\u7a0b\u5f0f\uff0c\u5b83\u5011\u90fd\u53ef\u4ee5\u5c07\u6307\u5b9a\u6a94\u6848\u4e2d\u7684\u8cc7\u6599\u65b0\u589e\u5230\u8cc7\u6599\u5eab\u4e2d\u3002","title":"\u532f\u5165\u8207\u532f\u51fa\u8cc7\u6599"},{"location":"Database/MySQL%20%E8%B6%85%E6%96%B0%E6%89%8B%E5%85%A5%E9%96%80/#sql","text":"SELECT ... INTO OUTFILE `\u6a94\u6848\u540d\u7a31` [FIELDS [TERMINATED BY '\u5b57\u4e32'] [[OPTIONALLY] ENCLOSED BY '\u5b57\u5143'] [ESCAPED BY '\u5b57\u5143'] ] [LINES [STARTING BY '\u5b57\u4e32'] [TERMINATED BY '\u5b57\u4e32'] ] FROM ... \u4f7f\u7528\u300cFIELDS TERMINATED BY\u300d\u5b50\u53e5\u8a2d\u5b9a\u65b0\u7684\u5206\u9694\u5b57\u5143 \u4f7f\u7528\u300cFIELDS ESCAPED BY\u300d\u5b50\u53e5\u8a2d\u5b9a\u65b0\u7684\u8df3\u812b\u5b57\u5143\u7b26\u865f \u4f7f\u7528\u300cFIELDS ENCLOSED BY\u300d\u5b50\u53e5\u53ef\u4ee5\u8a2d\u5b9a\u5305\u570d\u6b04\u4f4d\u8cc7\u6599\u7684\u5b57\u5143\u7b26\u865f \u532f\u51fa\u7684\u8cc7\u6599\u5982\u679c\u9047\u5230\u300cNULL\u300d\u503c\u7684\u6642\u5019\uff0cMySQL\u6703\u4f7f\u7528\u300c\\N\u300d\u5132\u5b58\u5728\u6a94\u6848\u4e2d \u4f7f\u7528\u300cLINES STARTING BY\u300d\u8207\u300cTERMINATED BY\u300d\u5b50\u53e5\u53ef\u4ee5\u8a2d\u5b9a\u6bcf\u4e00\u5217\u8cc7\u6599\u958b\u59cb\u8207\u7d50\u675f\u5b57\u4e32 \u53ef\u4ee5\u7528\u4e0a\u9762\u9019\u4e9b\u8a2d\u5b9a\u515c\u51faCSV\u683c\u5f0f","title":"\u4f7f\u7528SQL\u6558\u8ff0\u532f\u51fa\u8cc7\u6599"},{"location":"Database/MySQL%20%E8%B6%85%E6%96%B0%E6%89%8B%E5%85%A5%E9%96%80/#sql_1","text":"LOAD DATA [LOCAL] INFILE '\u6a94\u6848\u540d\u7a31' [IGNORE | REPLACE] INTO TABLE \u8868\u683c\u540d\u7a31 [FIELDS [TERMINATED BY '\u5b57\u4e32'] [[OPTIONALLY] ENCLOSED BY '\u5b57\u5143'] [ESCAPED BY '\u5b57\u5143'] ] [LINES [STARTING BY '\u5b57\u4e32'] [TERMINATED BY '\u5b57\u4e32'] ] [IGNORE \u6578\u503c LINES] [({\u6b04\u4f4d\u540d\u7a31 | \u4f7f\u7528\u8005\u8b8a\u6578}[,...])] [SET (\u6b04\u4f4d=\u904b\u7b97\u5f0f[,...])] default\u532f\u5165\u683c\u5f0f\u662ftab+\\N \u5728\u65b0\u589e\u3001\u4fee\u6539\u6216\u532f\u5165\u8cc7\u6599\u5230\u8cc7\u6599\u5eab\u7684\u6642\u5019\uff0c\u90fd\u6709\u53ef\u80fd\u767c\u751f\u7d22\u5f15\u503c\u91cd\u8907\u7684\u932f\u8aa4\uff0c\u5728\u4f7f\u7528\u300cLOAD DATA INFILE\u300d\u532f\u5165\u8cc7\u6599\u7684\u6642\u5019\uff0c\u5982\u679c\u767c\u751f\u7d22\u5f15\u503c\u91cd\u8907\u7684\u60c5\u6cc1\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u300cIGNORE\u300d\u6216\u300cREPLACE\u300d\u4f86\u6c7a\u5b9a\u8cc7\u6599\u5eab\u8a72\u4f5c\u4ec0\u9ebc\u8655\u7406 \u5728\u57f7\u884c\u532f\u5165\u8cc7\u6599\u7684\u6558\u8ff0\u4ee5\u5f8c\uff0c\u4f60\u61c9\u8a72\u6703\u60f3\u8981\u77e5\u9053\u6709\u591a\u5c11\u8cc7\u6599\u532f\u5165\u5230\u8cc7\u6599\u5eab\u4e2d\u3002\u5982\u679c\u4f60\u5728\u300cMySQL Query Browser\u300d\u5de5\u5177\u4e2d\u57f7\u884c\u300cLOAD DATA INFILE\u300d\u6558\u8ff0\u7684\u8a71\uff0c\u5b83\u6703\u544a\u8a34\u4f60\u7e3d\u5171\u5f71\u97ff\u4e86\u5e7e\u7b46\u8cc7\u6599\uff0c\u5305\u542b\u65b0\u589e\u8207\u4fee\u6539\uff1b\u5982\u679c\u4f60\u5728\u547d\u4ee4\u63d0\u793a\u5b57\u5143\u4e2d\u57f7\u884c\u300cLOAD DATA INFILE\u300d\u6558\u8ff0\u7684\u8a71\uff0c\u9664\u4e86\u5f71\u97ff\u7684\u8cc7\u6599\u6578\u91cf\u4ee5\u5916\uff0c\u9084\u6703\u544a\u8a34\u4f60\u6bd4\u8f03\u5b8c\u6574\u7684\u532f\u5165\u8cc7\u8a0a","title":"\u4f7f\u7528SQL\u6558\u8ff0\u532f\u5165\u8cc7\u6599"},{"location":"Database/MySQL%20%E8%B6%85%E6%96%B0%E6%89%8B%E5%85%A5%E9%96%80/#mysqldump","text":"MySQL\u63d0\u4f9b\u8a31\u591a\u4e0d\u540c\u61c9\u7528\u7684\u5de5\u5177\u7a0b\u5f0f\uff0c\u8b93\u4f60\u53ef\u4ee5\u5728\u547d\u4ee4\u63d0\u793a\u5b57\u5143\u4e2d\u57f7\u884c\uff0c\u9019\u4e9b\u5de5\u5177\u7a0b\u5f0f\u90fd\u662fMySQL\u624d\u6709\u7684\uff0c\u800c\u4e14\u5b83\u5011\u4e26\u4e0d\u662fSQL\u6558\u8ff0\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528\u300cmysqldump\u300d\u5de5\u5177\u7a0b\u5f0f\u532f\u51fa\u8cc7\u6599\u3002 mysqldump [\u9078\u9805] \u8cc7\u6599\u5eab\u540d\u7a31 [\u8868\u683c\u540d\u7a31...]","title":"\u4f7f\u7528mysqldump\u7a0b\u5f0f\u532f\u51fa\u8cc7\u6599"},{"location":"Database/MySQL%20%E8%B6%85%E6%96%B0%E6%89%8B%E5%85%A5%E9%96%80/#mysqlimport","text":"mysqlimport [\u9078\u9805] \u8cc7\u6599\u5eab\u540d\u7a31 \u6a94\u6848\u540d\u7a31[,...] \u5728\u6307\u5b9a\u8cc7\u6599\u6a94\u6848\u7684\u540d\u7a31\u6642\uff0c\u8981\u7279\u5225\u6ce8\u610f\u4e0b\u5217\u5169\u500b\u91cd\u9ede\uff1a \u8cc7\u6599\u6a94\u6848\u4e2d\u4e0d\u53ef\u4ee5\u5305\u542bSQL\u6558\u8ff0 \u6a94\u6848\u540d\u7a31\u6703\u6c7a\u5b9a\u532f\u5165\u8cc7\u6599\u5eab\u4e2d\u7684\u54ea\u500b\u8868\u683c\uff0cMySQL\u6703\u4f7f\u7528\u53bb\u9664\u9644\u52a0\u6a94\u540d\u5f8c\u7684\u540d\u7a31\u3002\u4f8b\u5982\u300cdept.dat\u300d\u70ba\u300cdept\u300d\u8868\u683c\uff1b\u300cdept.txt.dat\u300d\u540c\u6a23\u70ba\u300cdept\u300d\u8868\u683c","title":"\u4f7f\u7528mysqlimport\u7a0b\u5f0f\u532f\u5165\u8cc7\u6599"},{"location":"Database/MySQL%20%E8%B6%85%E6%96%B0%E6%89%8B%E5%85%A5%E9%96%80/#_37","text":"","title":"\u6548\u7387"},{"location":"Database/MySQL%20%E8%B6%85%E6%96%B0%E6%89%8B%E5%85%A5%E9%96%80/#_38","text":"\u4e3b\u7d22\u5f15\u9375\u7684\u61c9\u7528\u5f88\u5e38\u898b\uff0c\u800c\u4e14\u4e00\u500b\u8868\u683c\u901a\u5e38\u6703\u6709\u4e00\u500b\uff0c\u800c\u4e14\u53ea\u80fd\u6709\u4e00\u500b\u3002\u5728\u4e00\u500b\u8868\u683c\u4e2d\uff0c\u8a2d\u5b9a\u70ba\u4e3b\u7d22\u5f15\u9375\u7684\u6b04\u4f4d\u503c\u4e0d\u53ef\u4ee5\u91cd\u8907\uff0c\u800c\u4e14\u4e0d\u53ef\u4ee5\u5132\u5b58\u300cNULL\u300d\u503c\u3002\u56e0\u70ba\u9019\u6a23\u7684\u9650\u5236\uff0c\u6240\u4ee5\u5f88\u9069\u5408\u4f7f\u7528\u5728\u985e\u4f3c\u7de8\u78bc\u3001\u4ee3\u865f\u6216\u8eab\u4efd\u8b49\u5b57\u865f\u9019\u985e\u6b04\u4f4d\u3002 \u552f\u4e00\u7d22\u5f15\u4e5f\u7a31\u70ba\u300c\u4e0d\u53ef\u91cd\u8907\u7d22\u5f15\u300d\uff0c\u5728\u4e00\u500b\u8868\u683c\u4e2d\uff0c\u8a2d\u5b9a\u70ba\u552f\u4e00\u7d22\u5f15\u7684\u6b04\u4f4d\u503c\u4e0d\u53ef\u4ee5\u91cd\u8907\uff0c\u4f46\u662f\u53ef\u4ee5\u5132\u5b58\u300cNULL\u300d\u503c\u3002\u9019\u7a2e\u7d22\u5f15\u9069\u5408\u7528\u5728\u985e\u4f3c\u54e1\u5de5\u8cc7\u6599\u8868\u683c\u4e2d\u5132\u5b58\u96fb\u5b50\u90f5\u4ef6\u5e33\u865f\u7684\u6b04\u4f4d\uff0c\u56e0\u70ba\u54e1\u5de5\u4e0d\u4e00\u5b9a\u6709\u96fb\u5b50\u90f5\u4ef6\u5e33\u865f\uff0c\u6240\u4ee5\u5141\u8a31\u5132\u5b58\u300cNULL\u300d\u503c\uff0c\u53ef\u4ee5\u6bcf\u4e00\u500b\u54e1\u5de5\u7684\u96fb\u5b50\u90f5\u4ef6\u5e33\u865f\u90fd\u4e0d\u53ef\u4ee5\u91cd\u8907\u3002 \u975e\u552f\u4e00\u7d22\u5f15\u7528\u4f86\u589e\u52a0\u67e5\u8a62\u8207\u7dad\u8b77\u8cc7\u6599\u6548\u7387\u7684\u7d22\u5f15\u3002\u8a2d\u5b9a\u70ba\u975e\u552f\u4e00\u7d22\u5f15\u7684\u6b04\u4f4d\u503c\u53ef\u4ee5\u91cd\u8907\uff0c\u4e5f\u53ef\u4ee5\u5132\u5b58\u300cNULL\u300d\u503c\u3002 \u300cFULLTEXT\u300d\u7d22\u5f15\u53ea\u80fd\u7528\u5728\u300cCHAR\u300d\u3001\u300cVARCHAR\u300d\u8207\u300cTEXT\u300d\u578b\u614b\u7684\u6b04\u4f4d\uff0c\u800c\u4e14\u8868\u683c\u4f7f\u7528\u7684\u5132\u5b58\u5f15\u64ce\u5fc5\u9808\u662f\u300cMyISAM\u300d\uff0c\u4e00\u822c\u6703\u7a31\u70ba\u300c\u5168\u6587\u6aa2\u7d22\u300d\uff0c\u53ef\u4ee5\u63d0\u9ad8\u641c\u5c0b\u5927\u91cf\u6587\u5b57\u7684\u6548\u7387\u3002 \u300cSPATIAL\u300d\u7d22\u5f15\u662f\u300cSPATIAL\u300d\u578b\u614b\u6b04\u4f4d\u5c08\u7528\u7684\uff0c\u800c\u4e14\u8868\u683c\u4f7f\u7528\u7684\u5132\u5b58\u5f15\u64ce\u5fc5\u9808\u662f\u300cMyISAM\u300d\u3002\u300cFULLTEXT\u300d\u8207\u300cSPATIAL\u9019\u5169\u7a2e\u7d22\u5f15\u4e0d\u6703\u5728\u9019\u88e1\u8a0e\u8ad6\u3002 \u7d22\u5f15\u6709\u5169\u500b\u4e3b\u8981\u7684\u7528\u9014\uff1a \u4e3b\u7d22\u5f15\u9375\u8207\u552f\u4e00\u7d22\u5f15\u53ef\u4ee5\u907f\u514d\u91cd\u8907\u7684\u8cc7\u6599 \u4e3b\u7d22\u5f15\u9375\u3001\u552f\u4e00\u7d22\u5f15\u8207\u975e\u552f\u4e00\u7d22\u5f15\u90fd\u53ef\u4ee5\u589e\u52a0\u8cc7\u6599\u5eab\u7684\u6548\u7387 \u5982\u679c\u60f3\u8981\u70ba\u4e86\u589e\u52a0\u6548\u7387\u800c\u5efa\u7acb\u7d22\u5f15\u7684\u8a71\uff0c\u4f60\u61c9\u8a72\u8981\u8003\u616e\u4e0b\u5217\u5e7e\u9ede\uff1a \u6700\u91cd\u8981\u7684\uff0c\u7576\u7136\u662f\u4e0d\u8981\u5efa\u7acb\u6c92\u6709\u5fc5\u8981\u7684\u7d22\u5f15\uff0c\u4f8b\u5982\u4e0a\u5217\u8a0e\u8ad6\u7684\u60c5\u6cc1 \u7d22\u5f15\u7684\u6b04\u4f4d\u5118\u91cf\u4e0d\u8981\u6709\u300cNULL\u300d\u503c \u96d6\u7136\u67d0\u500b\u6b04\u4f4d\u5f88\u5e38\u4f7f\u7528\u5728\u300cWHERE\u300d\u3001\u300cORDER BY\u300d\u6216\u300cGROUP BY\u300d\u5b50\u53e5\u4e2d\uff0c\u4e5f\u4e0d\u4e00\u5b9a\u8981\u5efa\u7acb\u7d22\u5f15\u3002\u4f8b\u5982\u6027\u5225\u6b04\u4f4d\u7684\u503c\u53ea\u6709\u5169\u7a2e(\u4f7f\u7528ENUM(\u2018M\u2019, \u2018F\u2019)\u578b\u614b)\uff0c\u5efa\u7acb\u7d22\u5f15\u6240\u589e\u52a0\u7684\u6548\u7387\u4e5f\u4e0d\u591a \u4e3b\u7d22\u5f15\u9375\u8207\u552f\u4e00\u7d22\u5f15\u7684\u6548\u7387\u6703\u6bd4\u975e\u552f\u4e00\u7d22\u5f15\u597d \u53ef\u4ee5\u53ea\u62ff\u90e8\u5206\u5167\u5bb9\u4f86\u5efa\u7acb\u7d22\u5f15\uff0c\u9019\u6642\u5019\u8981\u6ce8\u610f\u5efa\u7acb\u7d22\u5f15\u7684\u6b04\u4f4d\u503c\u4e0d\u61c9\u8a72\u6709\u592a\u591a\u91cd\u8907\u7684\u503c\uff0c\u53ef\u4ee5\u7528DISTINCT\u4f86\u6aa2\u67e5\u3002","title":"\u7d22\u5f15"},{"location":"Database/MySQL%20%E8%B6%85%E6%96%B0%E6%89%8B%E5%85%A5%E9%96%80/#_39","text":"\u5982\u679c\u60f3\u8981\u67e5\u8a62\u4e00\u500b\u8868\u683c\u6240\u6709\u7684\u8cc7\u6599\uff0c\u4f60\u5c31\u4e0d\u6703\u4f7f\u7528\u300cWHERE\u300d\u8a2d\u5b9a\u67e5\u8a62\u689d\u4ef6\uff0c\u90a3\u5c31\u53ea\u80fd\u8acb\u8cc7\u6599\u5eab\u8b80\u53d6\u8868\u683c\u4e2d\u6240\u6709\u7684\u8cc7\u6599\u5f8c\u50b3\u56de\u4f86\uff0c\u6709\u6c92\u6709\u7d22\u5f15\u5c31\u4e0d\u6703\u6709\u6548\u7387\u4e0a\u7684\u5f71\u97ff\u3002\u4e0d\u904e\u5982\u679c\u4f7f\u7528\u300cWHERE\u300d\u5b50\u53e5\u8a2d\u5b9a\u67e5\u8a62\u689d\u4ef6\u7684\u8a71\uff0c\u5c31\u8981\u5118\u91cf\u4f7f\u7528\u7d22\u5f15\u4f86\u589e\u52a0\u67e5\u8a62\u7684\u6548\u7387\u3002 \u5982\u679c\u7d22\u5f15\u6b04\u4f4d\u5728WHERE\u689d\u4ef6\u7684\u51fd\u5f0f\u88e1\u9762\u4e5f\u6703\u6c92\u6709\u7d22\u5f15\u6548\u679c\u3002 SELECT * FROM test2 WHERE YEAR(birthdate) = 1990 \u4e0b\u9762\u6bd4\u4e0a\u9762\u6548\u7387\u597d SELECT * FROM test2 WHERE birthdate >= '1990-1-1' AND birthdate <= '1990-12-31' \u96d6\u7136\u5728\u7b97\u8853\u904b\u7b97\u7684\u6642\u5019\u7d66\u5b57\u4e32MySQL\u6703\u81ea\u52d5\u5e6b\u4f60\u8f49\u63db\uff0c\u4f46\u6703\u6709\u984d\u5916\u6548\u80fd\u8017\u640d\uff0c\u6240\u4ee5\u4e5f\u61c9\u8a72\u907f\u514d\u3002 \u7d50\u5408\u67e5\u8a62\u662f\u4e00\u7a2e\u5f88\u6c92\u6709\u6548\u7387\u7684\u67e5\u8a62\uff0c\u56e0\u70ba\u8cc7\u6599\u5eab\u8981\u6bd4\u5c0d\u5169\u500b\u8868\u683c\u4e2d\uff0c\u7d50\u5408\u689d\u4ef6\u6240\u8a2d\u5b9a\u7684\u6b04\u4f4d\u503c\uff0c\u5982\u679c\u8cc7\u6599\u6578\u91cf\u5f88\u591a\u7684\u8a71\uff0c\u9019\u6a23\u7684\u6bd4\u5c0d\u5de5\u4f5c\u5c31\u6703\u82b1\u5f88\u591a\u6642\u9593\u3002\u6240\u4ee5\u4f60\u901a\u5e38\u6703\u5e6b\u7d50\u5408\u689d\u4ef6\u4e2d\u7684\u6b04\u4f4d\u5efa\u7acb\u7d22\u5f15\u3002 \u5728\u67e5\u8a62\u7684\u689d\u4ef6\u4e2d\uff0c\u5982\u679c\u8ddf\u591a\u500b\u6b04\u4f4d\u7684\u7d22\u5f15\u6709\u95dc\u7684\u8a71\uff0cMySQL\u6703\u4f9d\u7167\u7d22\u5f15\u6b04\u4f4d\u7684\u9806\u5e8f\u4f86\u6c7a\u5b9a\u662f\u5426\u4f7f\u7528\u7d22\u5f15\u3002","title":"\u5224\u65b7\u689d\u4ef6\u7684\u8a2d\u5b9a"},{"location":"Database/MySQL%20%E8%B6%85%E6%96%B0%E6%89%8B%E5%85%A5%E9%96%80/#explain","text":"MySQL\u8cc7\u6599\u5eab\u63d0\u4f9b\u300cEXMPLIN\u300d\u6307\u4ee4\uff0c\u53ef\u4ee5\u8b93\u4f60\u5206\u6790\u4e00\u500b\u67e5\u8a62\u6558\u8ff0\u3002 EXPLAIN SELECT * FROM country WHERE GNP < 10000 type\u5982\u679c\u662f ALL \uff0c\u8868\u793a\u9019\u500b\u67e5\u8a62\u767c\u751f\u300cfull table scan\u300d\u3002 type\u5982\u80a1\u662f const \uff0c\u8868\u793a\u53ea\u6709\u8b80\u53d6\u4e00\u7b46\u8cc7\u6599\u3002 \u300cpossible_keys\u300d\u662fMySQL\u7528\u4f86\u627e\u5230\u8cc7\u6599\u6240\u4f7f\u7528\u7684\u7d22\u5f15\uff0cNULL\u8868\u793a\u9019\u500b\u67e5\u8a62\u6c92\u6709\u4f7f\u7528\u7d22\u5f15\u3002","title":"EXPLAIN\u8207\u67e5\u8a62\u6558\u8ff0"},{"location":"Database/MySQL%20%E8%B6%85%E6%96%B0%E6%89%8B%E5%85%A5%E9%96%80/#_40","text":"\u7576\u4f60\u4f7f\u7528\u300cINSERT\u300d\u3001\u300cUPDATE\u300d\u6216\u300cDELETE\u300d\u6558\u8ff0\u57f7\u884c\u8cc7\u6599\u7dad\u8b77\u7684\u5de5\u4f5c\u6642\uff0c\u4e5f\u8981\u6ce8\u610f\u6548\u7387\u4e0a\u7684\u554f\u984c\u3002\u5728\u57f7\u884c\u4fee\u6539\u6216\u522a\u9664\u8cc7\u6599\u7684\u6642\u5019\uff0c\u9664\u4e86\u8981\u4fee\u6539\u6216\u522a\u9664\u8868\u683c\u4e2d\u6240\u6709\u7684\u8cc7\u6599\u4ee5\u5916\uff0c\u4f60\u90fd\u6703\u52a0\u5165\u689d\u4ef6\u7684\u8a2d\u5b9a\u3002\u5728\u300cUPDATE\u300d\u548c\u300cDELETE\u300d\u6558\u8ff0\u4e2d\u4f7f\u7528\u300cWHERE\u300d\u5b50\u53e5\u8a2d\u5b9a\u689d\u4ef6\u6642\uff0c\u8ddf\u67e5\u8a62\u6642\u5019\u8a72\u6ce8\u610f\u7684\u5730\u65b9\u90fd\u4e00\u6a23\uff0c\u9664\u4e86\u5118\u91cf\u4f7f\u7528\u7d22\u5f15\u4f86\u589e\u52a0\u57f7\u884c\u7684\u6548\u7387\uff0c\u4e5f\u8981\u907f\u514d\u4e0d\u5fc5\u8981\u7684\u8cc7\u6599\u8f49\u63db\u3002 MySQL\u63d0\u4f9b\u7684\u300cEXPLAIN\u300d\u6558\u8ff0\uff0c\u53ea\u53ef\u4ee5\u70ba\u4f60\u5206\u6790\u4e00\u500b\u67e5\u8a62\u6558\u8ff0\uff0c\u5b83\u4e0d\u53ef\u4ee5\u4f7f\u7528\u5728\u300cSELECT\u300d\u4ee5\u5916\u7684\u6558\u8ff0\u3002\u4e0d\u904e\u4f60\u53ef\u628a\u5b83\u6539\u70ba\u67e5\u8a62\u6558\u8ff0( SELECT * )\u518d\u300cEXPLAIN\u300d\u3002","title":"\u8cc7\u6599\u7dad\u8b77"},{"location":"Database/MySQL%20%E8%B6%85%E6%96%B0%E6%89%8B%E5%85%A5%E9%96%80/#limit","text":"\u5728\u67e5\u8a62\u548c\u7dad\u8b77\u8cc7\u6599\u7684\u6642\u5019\uff0c\u90fd\u6709\u53ef\u80fd\u6703\u4f7f\u7528\u300cLIMIT\u300d\u5b50\u53e5\u8a2d\u5b9a\u67e5\u8a62\u6216\u7dad\u8b77\u8cc7\u6599\u7684\u6578\u91cf\u3002\u300cLIMIT\u300d\u5b50\u53e5\u5728\u67d0\u4e9b\u61c9\u7528\u4e0a\u662f\u975e\u5e38\u65b9\u4fbf\u7684\uff0c\u4e0d\u904e\u8981\u7279\u5225\u6ce8\u610f\u5728\u6548\u7387\u4e0a\u7684\u554f\u984c\u3002","title":"LIMIT\u5b50\u53e5"},{"location":"Database/MySQL%20%E8%B6%85%E6%96%B0%E6%89%8B%E5%85%A5%E9%96%80/#_41","text":"\u5982\u679c\u5728\u67e5\u8a62\u5de5\u4f5c\u4e2d\uff0c\u5f88\u5e38\u4f7f\u7528\u4e00\u500b\u67e5\u8a62\u7684\u7d50\u679c\uff0c\u518d\u52a0\u4e0a\u4e0d\u540c\u7684\u689d\u4ef6\u6216\u7d50\u5408\uff0c\u4f60\u5c31\u53ef\u4ee5\u8003\u616e\u4f7f\u7528\u66ab\u6642\u8868\u683c\u3002","title":"\u4f7f\u7528\u66ab\u6642\u8868\u683c"},{"location":"Database/MySQL%20%E8%B6%85%E6%96%B0%E6%89%8B%E5%85%A5%E9%96%80/#_42","text":"MySQL\u8cc7\u6599\u5eab\u662f\u4e00\u7a2e\u5141\u8a31\u591a\u500b\u7528\u6236\u7aef\u540c\u6642\u4f7f\u7528\u7684\u8cc7\u6599\u5eab\u7ba1\u7406\u7cfb\u7d71\uff0c\u5728\u591a\u7528\u6236\u7aef\u7684\u7684\u904b\u4f5c\u74b0\u5883\u4e0b\uff0c\u8cc7\u6599\u5eab\u5c31\u4f7f\u7528\u300c\u9396\u5b9a\u3001Locking\u300d\u4f86\u907f\u514d\u8cc7\u6599\u7684\u6df7\u4e82\u3002 MySQL\u63d0\u4f9b\u7684\u300cMyISAM\u300d\u548c\u300cInnoDB\u300d\u5169\u7a2e\u5132\u5b58\u5f15\u64ce\uff0c\u4f7f\u7528\u4e0d\u540c\u7684\u9396\u5b9a\u65b9\u5f0f\u4f86\u8655\u7406\u4e0a\u5217\u7684\u60c5\u6cc1\u3002MyISAM\u4f7f\u7528\u7684\u662f\u300ctable-level\u300d\u7684\u9396\u5b9a\u65b9\u5f0f\uff1a MyISAM\u5132\u5b58\u5f15\u64ce\u4f7f\u7528\u7684\u300ctable-level\u300d\u9396\u5b9a\u65b9\u5f0f\uff0c\u9069\u5408\u4f7f\u7528\u5728\u67e5\u8a62\u5de5\u4f5c\u975e\u5e38\u591a\uff0c\u8cc7\u6599\u7dad\u8b77\u6bd4\u8f03\u5c11\u7684\u8cc7\u6599\u5eab\uff0c\u9019\u6a23\u7684\u8cc7\u6599\u5eab\u904b\u4f5c\u8d77\u4f86\u7684\u6548\u7387\u6703\u6bd4\u8f03\u597d\u3002 InnoDB\u5132\u5b58\u5f15\u64ce\u4f7f\u7528\u7684\u662f\u300crow-level\u300d\u7684\u9396\u5b9a\u65b9\u5f0f\uff0cInnoDB\u5132\u5b58\u5f15\u64ce\u4f7f\u7528\u7684\u300crow-level\u300d\u9396\u5b9a\u65b9\u5f0f\uff0c\u9069\u5408\u4f7f\u7528\u5728\u67e5\u8a62\u8207\u8cc7\u6599\u7dad\u8b77\u5de5\u4f5c\u90fd\u5dee\u4e0d\u591a\u7684\u8cc7\u6599\u5eab\uff0c\u9019\u6a23\u7684\u8cc7\u6599\u5eab\u904b\u4f5c\u8d77\u4f86\u7684\u6548\u7387\u6703\u6bd4\u8f03\u597d\u3002","title":"\u5132\u5b58\u5f15\u64ce"},{"location":"Database/MySql/","text":"MySQL Change Account mysql> SET PASSWORD FOR '\u76ee\u6a19\u4f7f\u7528\u8005'@'\u4e3b\u6a5f' = PASSWORD('\u5bc6\u78bc'); mysql> flush privileges; mysql> use mysql; mysql> UPDATE user SET Password=PASSWORD(\"\u5bc6\u78bc\") WHERE User='\u76ee\u6a19\u4f7f\u7528\u8005'; mysql> flush privileges; \u628atextcol\u8907\u88fd\u5230intcol\u4e26\u8f49\u6210int\uff0c\u9047\u5230\u7a7a\u503c\u8a2d\u6210-1 UPDATE `kaitest` SET intcol = CAST(CASE textcol WHEN '' THEN '-1' ELSE textcol END AS INT) \u5982\u679c\u6c92\u6709\u5c31\u65b0\u589ecolumn\u4e14\u8a2d\u70baNOT NULL\u4e26\u52a0\u4e0adefault\uff0c\u65b0\u589e\u4f4d\u7f6e\u5728cid\u4e4b\u5f8c\uff0c MariaDB\u624d\u9069\u7528 ALTER TABLE `testdata` ADD COLUMN IF NOT EXISTS `smallrish` VARCHAR(5) NOT NULL DEFAULT \"@Q@\" AFTER cid explain","title":"MySQL"},{"location":"Database/MySql/#mysql","text":"","title":"MySQL"},{"location":"Database/MySql/#change-account","text":"mysql> SET PASSWORD FOR '\u76ee\u6a19\u4f7f\u7528\u8005'@'\u4e3b\u6a5f' = PASSWORD('\u5bc6\u78bc'); mysql> flush privileges; mysql> use mysql; mysql> UPDATE user SET Password=PASSWORD(\"\u5bc6\u78bc\") WHERE User='\u76ee\u6a19\u4f7f\u7528\u8005'; mysql> flush privileges; \u628atextcol\u8907\u88fd\u5230intcol\u4e26\u8f49\u6210int\uff0c\u9047\u5230\u7a7a\u503c\u8a2d\u6210-1 UPDATE `kaitest` SET intcol = CAST(CASE textcol WHEN '' THEN '-1' ELSE textcol END AS INT) \u5982\u679c\u6c92\u6709\u5c31\u65b0\u589ecolumn\u4e14\u8a2d\u70baNOT NULL\u4e26\u52a0\u4e0adefault\uff0c\u65b0\u589e\u4f4d\u7f6e\u5728cid\u4e4b\u5f8c\uff0c MariaDB\u624d\u9069\u7528 ALTER TABLE `testdata` ADD COLUMN IF NOT EXISTS `smallrish` VARCHAR(5) NOT NULL DEFAULT \"@Q@\" AFTER cid","title":"Change Account"},{"location":"Database/MySql/#explain","text":"","title":"explain"},{"location":"Database/readme/","text":"Database Index \u6570\u636e\u5e93\u7d22\u5f15\uff0c\u5230\u5e95\u662f\u4ec0\u4e48\u505a\u7684\uff1f Database index Normalization \u8cc7\u6599\u5eab\u6b63\u898f\u5316 \u7b2c\u4e00\u6b63\u898f\u5f62\u5f0f \u522a\u9664\u5404\u500b\u8cc7\u6599\u8868\u4e2d\u7684\u91cd\u8907\u7fa4\u7d44\u3002 \u70ba\u6bcf\u4e00\u7d44\u95dc\u806f\u7684\u8cc7\u6599\u5efa\u7acb\u4e0d\u540c\u7684\u8cc7\u6599\u8868\u3002 \u4f7f\u7528\u4e3b\u7d22\u5f15\u9375\u8b58\u5225\u6bcf\u4e00\u7d44\u95dc\u806f\u7684\u8cc7\u6599\u3002 \u4e0d\u8981\u5728\u55ae\u4e00\u8cc7\u6599\u8868\u4e2d\u4f7f\u7528\u591a\u91cd\u6b04\u4f4d\u5132\u5b58\u985e\u4f3c\u7684\u8cc7\u6599\u3002 \u7b2c\u4e8c\u6b63\u898f\u5f62\u5f0f \u70ba\u53ef\u5957\u7528\u65bc\u591a\u7b46\u8a18\u9304\u7684\u591a\u7d44\u503c\u5efa\u7acb\u4e0d\u540c\u7684\u8cc7\u6599\u8868\u3002 \u4f7f\u7528\u5916\u90e8\u7d22\u5f15\u9375\uff0c\u8b93\u9019\u4e9b\u8cc7\u6599\u8868\u7522\u751f\u95dc\u806f\u3002 \u8a18\u9304\u4e0d\u61c9\u4f9d\u8cf4\u8cc7\u6599\u8868\u4e3b\u7d22\u5f15\u9375\u4e4b\u5916\u7684\u7d22\u5f15\u9375\uff0c\u4f46\u662f\u5fc5\u8981\u6642\u53ef\u4f7f\u7528\u8907\u5408\u7d22\u5f15\u9375\u3002 \u7b2c\u4e09\u6b63\u898f\u5f62\u5f0f \u522a\u9664\u4e0d\u4f9d\u8cf4\u7d22\u5f15\u9375\u7684\u6b04\u4f4d\u3002 \u7406\u8ad6\u4e0a\uff0c\u6b63\u898f\u5316\u503c\u5f97\u8ffd\u6c42\u3002 \u4f46\u662f\u592a\u591a\u5c0f\u578b\u8cc7\u6599\u8868\u53ef\u80fd\u6703\u964d\u4f4e\u6548\u80fd\uff0c\u6216\u8d85\u904e\u53ef\u958b\u555f\u7684\u6a94\u6848\u8207\u8a18\u61b6\u9ad4\u5bb9\u91cf\u3002 \u6bd4\u8f03\u53ef\u884c\u7684\u65b9\u6cd5\u662f\u53ea\u91dd\u5c0d\u8b8a\u66f4\u983b\u7e41\u7684\u8cc7\u6599\u904b\u7528\u7b2c\u4e09\u6b63\u898f\u5f62\u5f0f\u3002 \u5982\u679c\u4fdd\u7559\u67d0\u4e9b\u76f8\u4f9d\u7684\u6b04\u4f4d\uff0c\u8acb\u5c07\u61c9\u7528\u7a0b\u5f0f\u8a2d\u8a08\u70ba\u8981\u6c42\u4f7f\u7528\u8005\u5728\u6b04\u4f4d\u8b8a\u66f4\u6642\uff0c\u9a57\u8b49\u6240\u6709\u76f8\u95dc\u806f\u7684\u6b04\u4f4d\u3002 ACID ACID compliant In computer science, ACID (Atomicity, Consistency, Isolation, Durability) is a set of properties of database transactions intended to guarantee validity even in the event of errors, power failures, etc. In the context of databases, a sequence of database operations that satisfies the ACID properties (and these can be perceived as a single logical operation on the data) is called a transaction. For example, a transfer of funds from one bank account to another, even involving multiple changes such as debiting one account and crediting another, is a single transaction. RDBMS vs NoSQL Execution Plan in MySql \u5728MySQL\u4f7f\u7528Explain\u505aSQL SELECT\u8a9e\u6cd5\u6548\u80fd\u6e2c\u8a66 TSDB Time series database \u6578\u64da\u7d50\u69cb\u7c21\u55ae \u6578\u64da\u91cf\u5927 \u5beb\u591a\u65bc\u8b80\uff1a95%-99%\u7684\u64cd\u4f5c\u90fd\u662f\u5beb\u64cd\u4f5c \u548c\u50b3\u7d71\u7684 RDBMS \u548c NoSQL \u8cc7\u6599\u5eab\u4e0d\u592a\u4e00\u6a23\uff0c\u6bd4\u5982\u5b83\u4e0d\u95dc\u5fc3\u7bc4\u5f0f\u548c\u4e8b\u52d9 \u9806\u5e8f\u5beb\uff1a\u7531\u65bc\u662f\u6642\u9593\u5e8f\u5217\u6578\u64da\uff0c\u56e0\u6b64\u6578\u64da\u591a\u70ba\u8ffd\u52a0\u5f0f\u5beb\u5165\uff0c\u800c\u4e14\u5e7e\u4e4e\u90fd\u662f\u5be6\u6642\u5beb\u5165\uff0c\u5f88\u5c11\u6703\u5beb\u5165\u5e7e\u5929\u524d\u7684\u6578\u64da \u5f88\u5c11\u66f4\u65b0\uff1a\u6578\u64da\u5beb\u5165\u4e4b\u5f8c\uff0c\u4e0d\u6703\u66f4\u65b0 \u5340\u584a\uff08bulk\uff09\u522a\u9664\uff1a\u57fa\u672c\u6c92\u6709\u96a8\u6a5f\u522a\u9664\uff0c\u591a\u6578\u662f\u5f9e\u4e00\u500b\u6642\u9593\u9ede\u958b\u59cb\u5230\u67d0\u4e00\u6642\u9593\u9ede\u7d50\u675f\u7684\u6574\u6bb5\u6578\u64da\u522a\u9664\u3002\u6bd4\u5982\u522a\u9664\u4e0a\u500b\u6708\uff0c\u6216\u80057\u5929\u524d\u7684\u6578\u64da\u3002\u5f88\u5c11\u51fa\u73fe\u522a\u9664\u55ae\u7368\u67d0\u500b\u6307\u6a19\u7684\u6578\u64da\uff0c\u6216\u8005\u8df3\u8e8d\u6642\u9593\u6bb5\u7684\u6578\u64da CAP theorem CAP theorem Partition and Sharding Partition (database) Shard (database architecture) Understanding Database Sharding MySQL CLUSTER Natural vs Artificial Primary Keys Natural vs Artificial Primary Keys Types of Keys in Relational Model(Candidate, Super, Primary, Alternate and Foreign) keys in DBMS Primary Key \u2013 A primary is a column or set of columns in a table that uniquely identifies tuples (rows) in that table. Super Key \u2013 A super key is a set of one of more columns (attributes) to uniquely identify rows in a table. Candidate Key \u2013 A super key with no redundant attribute is known as candidate key Entity-Relationship Model Entity\u2013relationship model Conceptual data model Logical data model Physical data model Paging Tweeter Cursoring with max_id Data Domain aka reference domain, reference table Data Domain DDL, DML, TCL and DCL DDL, DML, TCL and DCL Resources Avoiding Entity Framework Slowdown \u300e\u6d45\u5165\u6d45\u51fa\u300fMySQL \u548c InnoDB SQL Server \u9023\u7dda\u57fa\u672c\u6982\u5ff5 Facts and Fallacies about First Normal Form MySQL Tutorial \u56db\u500b\u5728\u4e9e\u99ac\u905c\u5de5\u4f5c\u5f8c\u624d\u77e5\u9053SQL\u5bc6\u6280","title":"Database"},{"location":"Database/readme/#database","text":"","title":"Database"},{"location":"Database/readme/#index","text":"\u6570\u636e\u5e93\u7d22\u5f15\uff0c\u5230\u5e95\u662f\u4ec0\u4e48\u505a\u7684\uff1f Database index","title":"Index"},{"location":"Database/readme/#normalization","text":"\u8cc7\u6599\u5eab\u6b63\u898f\u5316 \u7b2c\u4e00\u6b63\u898f\u5f62\u5f0f \u522a\u9664\u5404\u500b\u8cc7\u6599\u8868\u4e2d\u7684\u91cd\u8907\u7fa4\u7d44\u3002 \u70ba\u6bcf\u4e00\u7d44\u95dc\u806f\u7684\u8cc7\u6599\u5efa\u7acb\u4e0d\u540c\u7684\u8cc7\u6599\u8868\u3002 \u4f7f\u7528\u4e3b\u7d22\u5f15\u9375\u8b58\u5225\u6bcf\u4e00\u7d44\u95dc\u806f\u7684\u8cc7\u6599\u3002 \u4e0d\u8981\u5728\u55ae\u4e00\u8cc7\u6599\u8868\u4e2d\u4f7f\u7528\u591a\u91cd\u6b04\u4f4d\u5132\u5b58\u985e\u4f3c\u7684\u8cc7\u6599\u3002 \u7b2c\u4e8c\u6b63\u898f\u5f62\u5f0f \u70ba\u53ef\u5957\u7528\u65bc\u591a\u7b46\u8a18\u9304\u7684\u591a\u7d44\u503c\u5efa\u7acb\u4e0d\u540c\u7684\u8cc7\u6599\u8868\u3002 \u4f7f\u7528\u5916\u90e8\u7d22\u5f15\u9375\uff0c\u8b93\u9019\u4e9b\u8cc7\u6599\u8868\u7522\u751f\u95dc\u806f\u3002 \u8a18\u9304\u4e0d\u61c9\u4f9d\u8cf4\u8cc7\u6599\u8868\u4e3b\u7d22\u5f15\u9375\u4e4b\u5916\u7684\u7d22\u5f15\u9375\uff0c\u4f46\u662f\u5fc5\u8981\u6642\u53ef\u4f7f\u7528\u8907\u5408\u7d22\u5f15\u9375\u3002 \u7b2c\u4e09\u6b63\u898f\u5f62\u5f0f \u522a\u9664\u4e0d\u4f9d\u8cf4\u7d22\u5f15\u9375\u7684\u6b04\u4f4d\u3002 \u7406\u8ad6\u4e0a\uff0c\u6b63\u898f\u5316\u503c\u5f97\u8ffd\u6c42\u3002 \u4f46\u662f\u592a\u591a\u5c0f\u578b\u8cc7\u6599\u8868\u53ef\u80fd\u6703\u964d\u4f4e\u6548\u80fd\uff0c\u6216\u8d85\u904e\u53ef\u958b\u555f\u7684\u6a94\u6848\u8207\u8a18\u61b6\u9ad4\u5bb9\u91cf\u3002 \u6bd4\u8f03\u53ef\u884c\u7684\u65b9\u6cd5\u662f\u53ea\u91dd\u5c0d\u8b8a\u66f4\u983b\u7e41\u7684\u8cc7\u6599\u904b\u7528\u7b2c\u4e09\u6b63\u898f\u5f62\u5f0f\u3002 \u5982\u679c\u4fdd\u7559\u67d0\u4e9b\u76f8\u4f9d\u7684\u6b04\u4f4d\uff0c\u8acb\u5c07\u61c9\u7528\u7a0b\u5f0f\u8a2d\u8a08\u70ba\u8981\u6c42\u4f7f\u7528\u8005\u5728\u6b04\u4f4d\u8b8a\u66f4\u6642\uff0c\u9a57\u8b49\u6240\u6709\u76f8\u95dc\u806f\u7684\u6b04\u4f4d\u3002","title":"Normalization"},{"location":"Database/readme/#acid","text":"ACID compliant In computer science, ACID (Atomicity, Consistency, Isolation, Durability) is a set of properties of database transactions intended to guarantee validity even in the event of errors, power failures, etc. In the context of databases, a sequence of database operations that satisfies the ACID properties (and these can be perceived as a single logical operation on the data) is called a transaction. For example, a transfer of funds from one bank account to another, even involving multiple changes such as debiting one account and crediting another, is a single transaction.","title":"ACID"},{"location":"Database/readme/#rdbms-vs-nosql","text":"","title":"RDBMS vs NoSQL"},{"location":"Database/readme/#execution-plan-in-mysql","text":"\u5728MySQL\u4f7f\u7528Explain\u505aSQL SELECT\u8a9e\u6cd5\u6548\u80fd\u6e2c\u8a66","title":"Execution Plan in MySql"},{"location":"Database/readme/#tsdb","text":"Time series database \u6578\u64da\u7d50\u69cb\u7c21\u55ae \u6578\u64da\u91cf\u5927 \u5beb\u591a\u65bc\u8b80\uff1a95%-99%\u7684\u64cd\u4f5c\u90fd\u662f\u5beb\u64cd\u4f5c \u548c\u50b3\u7d71\u7684 RDBMS \u548c NoSQL \u8cc7\u6599\u5eab\u4e0d\u592a\u4e00\u6a23\uff0c\u6bd4\u5982\u5b83\u4e0d\u95dc\u5fc3\u7bc4\u5f0f\u548c\u4e8b\u52d9 \u9806\u5e8f\u5beb\uff1a\u7531\u65bc\u662f\u6642\u9593\u5e8f\u5217\u6578\u64da\uff0c\u56e0\u6b64\u6578\u64da\u591a\u70ba\u8ffd\u52a0\u5f0f\u5beb\u5165\uff0c\u800c\u4e14\u5e7e\u4e4e\u90fd\u662f\u5be6\u6642\u5beb\u5165\uff0c\u5f88\u5c11\u6703\u5beb\u5165\u5e7e\u5929\u524d\u7684\u6578\u64da \u5f88\u5c11\u66f4\u65b0\uff1a\u6578\u64da\u5beb\u5165\u4e4b\u5f8c\uff0c\u4e0d\u6703\u66f4\u65b0 \u5340\u584a\uff08bulk\uff09\u522a\u9664\uff1a\u57fa\u672c\u6c92\u6709\u96a8\u6a5f\u522a\u9664\uff0c\u591a\u6578\u662f\u5f9e\u4e00\u500b\u6642\u9593\u9ede\u958b\u59cb\u5230\u67d0\u4e00\u6642\u9593\u9ede\u7d50\u675f\u7684\u6574\u6bb5\u6578\u64da\u522a\u9664\u3002\u6bd4\u5982\u522a\u9664\u4e0a\u500b\u6708\uff0c\u6216\u80057\u5929\u524d\u7684\u6578\u64da\u3002\u5f88\u5c11\u51fa\u73fe\u522a\u9664\u55ae\u7368\u67d0\u500b\u6307\u6a19\u7684\u6578\u64da\uff0c\u6216\u8005\u8df3\u8e8d\u6642\u9593\u6bb5\u7684\u6578\u64da","title":"TSDB"},{"location":"Database/readme/#cap-theorem","text":"CAP theorem","title":"CAP theorem"},{"location":"Database/readme/#partition-and-sharding","text":"Partition (database) Shard (database architecture) Understanding Database Sharding MySQL CLUSTER","title":"Partition and Sharding"},{"location":"Database/readme/#natural-vs-artificial-primary-keys","text":"Natural vs Artificial Primary Keys","title":"Natural vs Artificial Primary Keys"},{"location":"Database/readme/#types-of-keys-in-relational-modelcandidate-super-primary-alternate-and-foreign","text":"keys in DBMS Primary Key \u2013 A primary is a column or set of columns in a table that uniquely identifies tuples (rows) in that table. Super Key \u2013 A super key is a set of one of more columns (attributes) to uniquely identify rows in a table. Candidate Key \u2013 A super key with no redundant attribute is known as candidate key","title":"Types of Keys in Relational Model(Candidate, Super, Primary, Alternate and Foreign)"},{"location":"Database/readme/#entity-relationship-model","text":"Entity\u2013relationship model Conceptual data model Logical data model Physical data model","title":"Entity-Relationship Model"},{"location":"Database/readme/#paging","text":"Tweeter Cursoring with max_id","title":"Paging"},{"location":"Database/readme/#data-domain","text":"aka reference domain, reference table Data Domain","title":"Data Domain"},{"location":"Database/readme/#ddl-dml-tcl-and-dcl","text":"DDL, DML, TCL and DCL","title":"DDL, DML, TCL and DCL"},{"location":"Database/readme/#resources","text":"Avoiding Entity Framework Slowdown \u300e\u6d45\u5165\u6d45\u51fa\u300fMySQL \u548c InnoDB SQL Server \u9023\u7dda\u57fa\u672c\u6982\u5ff5 Facts and Fallacies about First Normal Form MySQL Tutorial \u56db\u500b\u5728\u4e9e\u99ac\u905c\u5de5\u4f5c\u5f8c\u624d\u77e5\u9053SQL\u5bc6\u6280","title":"Resources"},{"location":"Finished/Art%20of%20Unit%20Testing/","text":"Art of Unit Testing About this book \u70ba\u4ec0\u9ebc\u5beb\u9019\u672c\u66f8 To truly learn something, teach it. \u6c38\u9060\u7684\u8a5b\u5492 The curse is that the more experience you have, the more stupid you feel. \u7b2c\u4e8c\u7248\u5c0dUnit test\u7684\u65b0\u9ad4\u609f There are parts of the first edition that today I do not agree with\u2014for example, that a unit refers to a method. That\u2019s not true at all. A unit is a unit of work, as I discuss in chapter 1 of this second edition. It can be as small as a method, or as big as several classes (possibly assemblies) What\u2019s new in the second edition I no longer use RhinoMocks. Stay away from it. It is dead. At least for now. I use NSubstitute for examples of Isolation Framework Basics, and I also recommend FakeItEasy. I am still not crazy about MOQ, for reasons detailed in chapter 6. \u4e0d\u8981\u518d\u4f7f\u7528property setter\u4f86\u505aDI There are plenty of design changes in the code I show in the book. Mostly I stopped using property setters and am mostly using constructor injection. Who should read this book The book is for anyone who writes code and is interested in learning best practices for unit testing. All the examples are written in C# using Visual Studio, so .NET developers will find the examples particularly useful. But the lessons I teach apply equally to most, if not all, object-oriented and statically typed languages (VB.NET, Java, and C++, to name a few). If you\u2019re an architect, developer, team lead, QA engineer (who writes code), or novice programmer, this book should suit you well. Roadmap \u5982\u679c\u8981\u958b\u5206\u4eab\u6703\u53ef\u4ee5\u56de\u982d\u770b Chapter 1: The basics of unit testing unit test\u5b9a\u7fa9\u9032\u5316\u8ad6 Defining unit testing, step by step Wiki\u4e0a\u5c0d\u65bcunit test\u7684\u7d93\u5178\u5b9a\u7fa9\uff1a DEFINITION 1.0 A unit test is a piece of a code (usually a method) that invokes another piece of code and checks the correctness of some assumptions afterward. If the assumptions turn out to be wrong, the unit test has failed. A unit is a method or function. \u4f5c\u8005\u539f\u672c\u8a8d\u70ba\u5c31\u6280\u8853\u4e0a\u4f86\u8aaa\u9019\u500b\u5b9a\u7fa9\u662f\u6b63\u78ba\u7684 Yes, feel. There is no science in this book. Just art. \u4f46\u662f\u904e\u4e86\u5e7e\u5e74\u4e4b\u5f8c\u4f5c\u8005\u8b8a\u5fc3\u4e86 To me, a unit stands for \u201cunit of work\u201d or a \u201cuse case\u201d inside the system. \u4e00\u500b\u55ae\u5143\u7684\u5de5\u4f5c(? Definition A unit of work is the sum of actions that take place between the invocation of a public method in the system and a single noticeable end result by a test of that system. A noticeable end result can be observed without looking at the internal state of the system and only through its public APIs and behavior. An end result is any of the following: The invoked public method returns a value (a function that\u2019s not void). There\u2019s a noticeable change to the state or behavior of the system before and after invocation that can be determined without interrogating private state. (Examples: the system can log in a previously nonexistent user, or the system\u2019s properties change if the system is a state machine.) There\u2019s a callout to a third-party system over which the test has no control, and that third-party system doesn\u2019t return any value, or any return value from that system is ignored. (Example: calling a third-party logging system that was not written by you and you don\u2019t have the source to.) \u55ae\u5143\u6e2c\u8a66\u4e2d\u7684\"\u55ae\u5143\"\u4e0d\u518d\u5c40\u9650\u65bc\u4e00\u500bclass\u88e1\u7684\u4e00\u500bmethod This idea of a unit of work means, to me, that a unit can span as little as a single method and up to multiple classes and functions to achieve its purpose. \u4f60\u4e0d\u8a72\u523b\u610f\u6700\u5c0f\u5316\u4f60\u7684\u6e2c\u8a66\uff0c\u5982\u679c\u4f60\u7684\u6e2c\u8a66\u5927\u4e00\u9ede\u537b\u66f4\u6709\u53ef\u8b80\u6027\u90a3\u4f60\u7684\u6e2c\u8a66\u5c31\u66f4\u597d\u7dad\u8b77\u3002 If you try to minimize the size of a unit of work, you end up faking things down the line that aren\u2019t really end results to the user of a public API but instead are just train stops on the way to the main station. \u66f4\u65b0\u5b9a\u7fa9 UPDATED DEFINITION 1.1 A unit test is a piece of code that invokes a unit of work and checks one specific end result of that unit of work. If the assumptions on the end result turn out to be wrong, the unit test has failed. A unit test\u2019s scope can span as little as a method or as much as multiple classes. UI\u4e0a\u7684\u4e00\u9846\u6309\u9215\uff0c\u5b83\u4e5f\u5f88\u63a5\u8fd1\u5178\u578b\u7684 \u55ae\u5143\u6e2c\u8a66 \u5b9a\u7fa9\uff0c\u4f46\u5b83\u4e26\u4e0d\u662f\u500b \u597d\u7684 \u55ae\u5143\u6e2c\u8a66 No matter what programming language you\u2019re using, one of the most difficult aspects of defining a unit test is defining what\u2019s meant by a \u201cgood\u201d one. \u5982\u679c\u4f60\u4e0d\u77e5\u9053\u600e\u9ebc\u5beb\u4e00\u500b\u597d\u7684\u55ae\u5143\u6e2c\u8a66\u90a3\u9ebc\u4e0d\u5982\u4e0d\u5beb\uff0c\u4e0d\u8981\u6d6a\u8cbb\u4f60\u7684\u6642\u9593\u56e0\u70ba\u4f60\u5f88\u96e3\u7dad\u8b77\u5b83 \u8ac7\u6e2c\u8a66\u7684\u91cd\u8981\u6027 How do you make sure that the code works today? Properties of a good unit test A unit test should have the following properties: It should be automated and repeatable. It should be easy to implement. It should be relevant tomorrow. Anyone should be able to run it at the push of a button. It should run quickly. It should be consistent in its results (it always returns the same result if you don\u2019t change anything between runs). It should have full control of the unit under test. It should be fully isolated (runs independently of other tests). When it fails, it should be easy to detect what was expected and determine how to pinpoint the problem. \u5982\u679c\u4ee5\u4e0b\u4efb\u4f55\u554f\u984c\u4f60\u7684\u56de\u7b54\u662f\u4e0d\uff0c\u90a3\u4f60\u5f88\u6709\u53ef\u80fd\u662f\u5728\u505a\u6574\u5408\u6e2c\u8a66 Can I run and get results from a unit test I wrote two weeks or months or years ago? Can any member of my team run and get results from unit tests I wrote two months ago? Can I run all the unit tests I\u2019ve written in no more than a few minutes? Can I run all the unit tests I\u2019ve written at the push of a button? Can I write a basic test in no more than a few minutes? \u6574\u5408\u6e2c\u8a66\u548c\u55ae\u5143\u6e2c\u8a66\u4e00\u6a23\u91cd\u8981\uff0c\u4f46\u662f\u6709\u7f3a\u9ede Integration tests \u4e0d\u662f\"\u597d\"\u7684\u55ae\u5143\u6e2c\u8a66\u90fd\u6b78\u985e\u7d66\u6574\u5408\u6e2c\u8a66\u5c31\u5c0d\u60f9 I consider integration tests as any tests that aren\u2019t fast and consistent and that use one or more real dependencies of the units under test. For example, if the test uses the real system time, the real filesystem, or a real database, it has stepped into the realm of integration testing. DateTime.Now \u9019\u662f\u500b\u7d93\u5178\u7684\u4f8b\u5b50\uff0c\u56e0\u70ba\u4f60\u6bcf\u6b21\u8dd1\u5167\u5bb9\u90fd\u4e0d\u4e00\u6a23\u6240\u4ee5\u9019\u500b\u6e2c\u8a66\u4e26\u4e0d consistent \u6574\u5408\u6e2c\u8a66\u4e0d\u662f\u4e0d\u597d\uff0c\u4ed6\u8207\u55ae\u5143\u6e2c\u8a66\u540c\u7b49\u91cd\u8981\uff0c\u53ea\u662f\u5169\u8005\u61c9\u8a72\u5206\u958b \u6574\u5408\u6e2c\u8a66\u7684\u4e00\u4e9b\u7f3a\u9ede\uff1a \u6162 \u5916\u90e8\u4f9d\u8cf4\u8b93\u4f60\u6bd4\u8f03\u96e3\u6d88\u9664\u6e2c\u8a66\u6b98\u7559\u7684\u5783\u573e(ex:database) \u4e00\u6b21\u6e2c\u592a\u591a\u6771\u897f\uff0c\u58de\u6389\u4e86\u4f60\u5f88\u96e3\u627e\u662f\u54ea\u908a\u51fa\u932f DEFINITION Integration testing is testing a unit of work without having full control over all of it and using one or more of its real dependencies, such as time, network, database, threads, random number generators, and so on. \u4e0d\u81ea\u52d5\u5316\u6574\u5408\u6e2c\u8a66\u7684\u7f3a\u9ede(\u963f\u4e0d\u5c31\u624b\u52d5\u6e2c\u8a66...)\uff1a \u6162 \u7f3a\u5c11 regression test \uff0c\u4e0d\u6562\u6539\u52d5 legacy code \u53ef\u80fd\u9700\u8981\u5148\u8a2d\u5b9a\u6a5f\u5668\u74b0\u5883(configuration)\u624d\u80fd\u8dd1\uff0c\u5c31\u6703 \u4e0d\u60f3\u8dd1 \u6e2c\u8a66\u7684\u7bc4\u570d\u592a\u5927\u5c0e\u81f4\u5f88\u591a\u5c0f\u5730\u65b9\u6c92\u6e2c\u5230 \u6c92\u8fa6\u6cd5\u5f88\u5feb\u5beb\u51fa\u4f86\uff0c\u6709\u53ef\u80fd\u76f8\u4f9d\u592a\u591a\uff0c\u5f88\u96e3\u5beb\u6210\u81ea\u52d5\u6e2c\u8a66\uff1b\u5982\u679c\u4e0d\u5beb\u6210\u81ea\u52d5\u4f60\u53c8\u6703\u5931\u53bb\u81ea\u52d5\u5316\u7684\u512a\u9ede \u4e0d\u904e\u5c0d\u65bc \u5f88\u5feb \u751f\u51fa\u55ae\u5143\u6e2c\u8a66\u6709\u4ee5\u4e0b\u8b66\u544a Small warning: even experienced unit testers can find that it may take 30 minutes or more to figure out how to write the very first unit test against an object model they\u2019ve never unit tested before. This is part of the work, and is expected. The second and subsequent tests on that object model should be very easy to accomplish. \u5b9a\u7fa9regression\uff1a DEFINITION A regression is one or more units of work that once worked and now don\u2019t. \u5b9a\u7fa9legacy code\uff1a DEFINITION Legacy code is defined by Wikipedia as \u201csource code that relates to a no-longer supported or manufactured operating system or other computer technology,\u201d but many shops refer to any older version of the application currently under maintenance as legacy code. It often refers to code that\u2019s hard to work with, hard to test, and usually even hard to read. \u672c\u66f8\u4f7f\u7528\u907a~~\u7559\u4ee3\u78bc\u4e4b\u7236~~\u7684\u5b9a\u7fa9 Many people like to define legacy code as \u201ccode that has no tests.\u201d Working Effectively with Legacy Code by Michael Feathers (Prentice Hall, 2004) uses this as an official definition of legacy code, and it\u2019s a definition to be considered while reading this book. What makes unit tests good \u597d\u9577\u4e00\u6bb5\u6545\u4e8b\u7d42\u65bc\u8b1b\u5b8c\u4e86\u7d42\u65bc\u8981\u505a\u6700\u5f8c\u7684\u5b9a\u7fa9\u4e86(once and for all)\u3002 UPDATED AND FINAL DEFINITION 1.2 A unit test is an automated piece of code that invokes the unit of work being tested, and then checks some assumptions about a single end result of that unit. A unit test is almost always written using a unit testing framework. It can be written easily and runs quickly. It\u2019s trustworthy, readable, and maintainable. It\u2019s consistent in its results as long as production code hasn\u2019t changed. \u61f6\u4eba\u5305\uff1a 94\u8981\u81ea\u52d5 \u53ea\u6e2c\u4e00\u500b\u7d50\u679c \u597d\u5beb\u3001\u8dd1\u5f97\u5feb \u53ea\u8981\u7522\u54c1\u6c92\u52d5\uff0c\u6e2c\u8a66\u7d50\u679c\u61c9\u8a72\u8981\u4e00\u81f4 \u6e2c\u8a66\u4e0d\u4e00\u5b9a\u53ea\u91dd\u5c0d Control flow code \uff0c\u4f8b\u5982 Property \uff0c\u901a\u5e38\u4ed6\u4e0d\u5305\u542b\u908f\u8f2f\u4f46\u662f\u4ed6\u6709\u53ef\u80fd\u662f unit of work \u7684\u4e00\u74b0\u3002 DEFINITION Control flow code is any piece of code that has some sort of logic in it, small as it may be. It has one or more of the following: an if statement, a loop, switch, or case statement, calculations, or any other type of decisionmaking code. A simple unit test example \u6559\u4f60\u53e4\u65e9\u6c92\u6709framework\u7684\u6642\u5019\u81ea\u52d5\u6e2c\u8a66\u53ef\u80fd\u6703\u9577\u5565\u6a23\u3002 Test-driven development TDD\u7a2e\u985e\u5f88\u591a\uff0c\u9019\u88e1\u8b1b\u7684\u662fTest Driven Development\uff0c\u4e0d\u5305\u542bDesign\u3002 Test Driven Development: the idea of writing your code in a test first manner. You may already have an existing design in place. \u9019\u672c\u66f8\u4e0d\u6703\u6559\u4f60TDD\uff0cTDD\u6709\u8a31\u591a\u597d\u8655\uff0c\u4f46\u662f\u6709\u4ee3\u50f9\u7684(\u8981\u5b78)\u3002 Test-driven development\u2014 a bird\u2019s-eye view. Notice the spiral nature of the process: write test, write code, refactor, write next test. It shows the incremental nature of TDD: small steps lead to a quality end result. TDD\u8ddf\u5beb\u4e00\u500b\u597d\u6e2c\u8a66\u662f\u6c92\u95dc\u4fc2\u7684\uff0c\u4f7f\u7528TDD\u4e0d\u80fd\u4fdd\u8b49\u4f60\u7684\u6e2c\u8a66\u597d\u8b80\u597d\u7dad\u8b77\u3002 TDD\u6b65\u9a5f\uff1a Write a failing test to prove code or functionality is missing from the end product. Make the test pass by writing production code that meets the expectations of your test. Refactor your code. \u91cd\u69cb\u53ef\u4ee5\u767c\u751f\u5728\u4e00\u5806\u6e2c\u8a66\u4e4b\u5f8c\u6216\u662f\u5beb\u4e00\u500b\u99ac\u4e0a\u91cd\u69cb\uff0c\u5b83\u7684\u76ee\u7684\u662f\u8b93\u4f60\u7684\u7a0b\u5f0f\u66f4\u597d\u8b80\u66f4\u597d\u7dad\u8b77\u3002 DEFINITION Refactoring means changing a piece of code without changing its functionality. If you\u2019ve ever renamed a method, you\u2019ve done refactoring. If you\u2019ve ever split a large method into multiple smaller method calls, you\u2019ve refactored your code. The code still does the same thing, but it becomes easier to maintain, read, debug, and change. TDD\u7528\u7684\u597d\uff0c\u7a0b\u5f0f\u54c1\u8cea\u4e0a\u5347\u3001bug\u6e1b\u5c11\u3001\u5c0dcode\u66f4\u6709\u4fe1\u5fc3\u3001\u627ebug\u7684\u6642\u9593\u8b8a\u5c11\u3001code\u7684\u8a2d\u8a08\u66f4\u597d\u548c\u8b93manager\u958b\u85b0\uff1b\u53cd\u4e4b\u7528\u5f97\u4e0d\u597d\uff0c\u6703\u8b93\u6642\u7a0bdelay\u3001\u8b93\u4f60\u66f4\u6c92\u52d5\u529b\u3001\u7a0b\u5f0f\u54c1\u8cea\u4e0b\u964d\uff0c\u662f\u4e00\u628a\u96d9\u9762\u5203\u3002 TDD\u6700\u5927\u7684\u597d\u8655\u4e4b\u4e00\uff1a\u6e2c\u8a66\u6e2c\u8a66\u672c\u8eab\uff0c\u56e0\u70ba\u4f60\u89aa\u773c\u770b\u904e\u4ed6\u7d05\u71c8\u518d\u7da0\u71c8\uff0c\u8b93\u4f60\u5c0d\u6e2c\u8a66\u672c\u8eab\u66f4\u6709\u81ea\u4fe1\uff0c\u6240\u4ee5\u4f60\u70ba\u4e86\"\u4ee5\u9632\u842c\u4e00\"\u800c\u505a\u7684\u6e2c\u8a66\u6703\u8b8a\u5c11\u3002 The three core skills of successful TDD ~~\u963f\u4e0d\u662f\u8aaa\u4e0d\u6559\u9084\u4e00\u76f4\u8b1b~~ To be successful in test-driven development you need three different skill sets: knowing how to write good tests, writing them test-first, and designing them well. \u4ee5\u4e0b\u958b\u59cb\u50b3\u6559 Just because you write your tests first doesn\u2019t mean they\u2019re maintainable, readable, or trustworthy. \u6240\u4ee5\u624d\u6709\u9019\u672c\u66f8 Just because you write readable, maintainable tests doesn\u2019t mean you get the same benefitsas when writing them test-first. \u63a8\u85a6Kent Beck\u2019s Test-Driven Development: by Example (Addison-Wesley Professional, 2002). Just because you write your tests first, and they\u2019re readable and maintainable, doesn\u2019tmean you\u2019ll end up with a well-designed system. \u63a8\u85a6 Growing Object-Oriented Software, Guided by Tests by Steve Freeman and Nat Pryce (Addison-Wesley Professional, 2009) and Clean Code by Robert C. Martin (Prentice Hall, 2008) \u7c21\u55ae\u4f86\u8aaa\u4f60\u8981\u6703\u597d\u7684TDD\u4f60~~\u4ed6\u5abd~~\u9084\u8981\u518d\u770b\u5169\u672c\u66f8 \u5efa\u8b70\u4e00\u6b21\u5c08\u6ce8\u5b78\u7fd2\u4e00\u500b\u6280\u80fd \u5ffd\u7565\u5176\u4ed6\u6280\u80fd\u5c31\u597d\uff0c\u4e0d\u7136\u4f60\u6703\u5f88\u5bb9\u6613\u653e\u68c4(the wall is too high to climb.) Summary \u597d\u6e2c\u8a66\u61f6\u4eba\u5305\uff1a It\u2019s an automated piece of code that invokes a different method and then checks some assumptions on the logical behavior of that method or class. It\u2019s written using a unit testing framework. It can be written easily. It runs quickly. It can be executed repeatedly by anyone on the development team. \u4f60\u4e86\u89e3\u4e86\u6574\u5408\u6e2c\u8a66\u8207\u55ae\u5143\u6e2c\u8a66\u7684\u5340\u5225\uff0c\u7576\u4f60\u9762\u5c0d\u554f\u984c\u7684\u6642\u5019\u9700\u8981\u505a\u6289\u64c7\u662f\u6709\u54ea\u7a2e\u6e2c\u8a66\u624d\u80fd\u89e3\u6c7a\u4f60\u7684\u554f\u984c\u3002 \u4f60\u4e86\u89e3TDD\u7684\u4e00\u4e9b\u597d\u8655\uff0c\u4f46\u5728\u9019\u4e4b\u524d\u4f60\u8981\u5148\u6703\u5beb\u597d\u7684\u6e2c\u8a66\u3002 Chapter 2: A first unit test Nunit\u767b\u5834 Frameworks for unit testing Manual tests suck. \u6c92\u6709\u9019\u6771\u897f\u4f60\u5e73\u5e38\u662f\u600e\u9ebc\u6e2c\u4f60\u7684code\u7684? Unit testing practice How the framework helps Write tests easily and in a structured manner. Framework supplies the developer with a class libarary that contains - Base classes or interfaces to inherit - Attributes to place in your code to note which of your methods are tests - Assertion classes that have special assertion methods you invoke to verify your code Execute one or all of the unit tests. Framework provides a test runner (a console or GUI tool) that - Identifies tests in your code - Runs tests automatically - Indicates status while running - Can be automated by the command line Review the results of the test runs. The test runners will usually provide information such as - How many tests ran - How many tests didn\u2019t run - How many tests failed - Which tests failed - The reason tests failed - The ASSERT message you wrote - The code location that failed - Possibly a full stack trace of any exceptions that caused the test to fail, and will let you go to the various method calls inside the call stack NOTE Using a unit testing framework doesn\u2019t ensure that the tests you write are readable, maintainable, or trustworthy or that they cover all the logic you\u2019d like to test. Introducing the LogAn project \u5f9e\u7c21\u55ae\u958b\u59cb Here\u2019s the scenario. Your company has many internal products it uses to monitor its applications at customer sites. All these products write log files and place them in a special directory. The log files are written in a proprietary format that your company has come up with that can\u2019t be parsed by any existing third-party tools. You\u2019re tasked with building a product, LogAn, that can analyze these log files and find special cases and events in them. When it finds these cases and events, it should alert the appropriate parties. First steps with NUnit \u5148\u5b89\u88ddR\u5e79~ NUnit3\u4e0d\u77e5\u9053\u9084\u6709\u6c92\u6709GUI public class LogAnalyzer { public bool IsValidLogFileName(string fileName) { if(fileName.EndsWith(\".SLF\")) { return false; } return true; } } Add a new class library project to the solution, which will contain your test classes. Name it LogAn.UnitTests (assuming the original project name is LogAn.csproj). To that library, add a new class that will hold your test methods. Name it LogAnalyzerTests (assuming that your class under test is named LogAnalyzer.cs). Add a new method to the preceding test case named IsValidLogFileName_BadExtension_ReturnsFalse(). Add a reference to the project under test for the new testing project. Basic rules for placing and naming tests Object to be tested Object to create on the testing side Project Create a test project named [ProjectUnderTest].UnitTests . Class For a class located in ProjectUnderTest, create a class with the name [ClassName] Tests. Unit of work (a method, or a logical grouping of several methods, or several classes) For each unit of work, create a test method with the following name: [UnitOfWorkName]_[ScenarioUnderTest]_[ExpectedBehavior] . The unit of work name could be as simple as a method name (if that\u2019s the whole unit of work) or more abstract if it\u2019s a use case that encompasses multiple methods or classes such as UserLogin or RemoveUser or Startup. You might feel more comfortable starting with method names and moving to more abstract names later. Just make sure that if these are method names, those methods are public, or they don\u2019t really represent the start of a unit of work. \u53cd\u6b63\u91cd\u9ede\u4f60\u4e5f\u77e5\u9053\uff1a\u597d\u627e \u4f60\u7684\u6e2c\u8a66\u61c9\u8a72\u76f4\u63a5\u5beb\u5728production code project\u88e1\u9084\u662f\u53e6\u958btest\u5c08\u7528project\u5462\uff1f\u5206\u958b\u53ef\u4ee5\u8b93\u4f60\u7684production code\u4e7e\u6de8\u4e00\u9ede\u597d\u8b80\u4e00\u9ede\uff0c\u4f46\u5beb\u5728production code\u65c1\u908a\u53ef\u4ee5\u5728deployment\u4e4b\u5f8c\u505ahealth test\uff0cYou can actually have your cake and eat. \u4f86\u4eba\uff0c\u4e0aAttribute [TestFixture] public class LogAnalyzerTests { [Test] public void IsValidFileName_BadExtension_ReturnsFalse() { } } The NUnit runner needs at least two attributes to know what to run: The [TestFixture] attribute that denotes a class that holds automated NUnit tests. (If you replace the word Fixture with Class, it makes much more sense, but only as a mental exercise. It won\u2019t compile if you literally change the code that way.) Put this attribute on top of your new LogAnalyzerTests class. The [Test] attribute that can be put on a method to denote it as an automated test to be invoked. Put this attribute on your new test method. Writing your first test How do you test your code? A unit test usually comprises three main actions: 1. Arrange objects, creating and setting them up as necessary. 2. Act on an object. 3. Assert that something is as expected. [Test] public void IsValidFileName_BadExtension_ReturnsFalse() { LogAnalyzer analyzer = new LogAnalyzer(); bool result = analyzer.IsValidLogFileName(\"filewithbadextension.foo\"); Assert.False(result); } The Assert class Assert.AreEqual(expectedObject, actualObject, message); Assert.AreEqual(2, 1+1, \"Math is broken\"); Assert.AreSame(expectedObject, actualObject, message); Assert.AreSame(int.Parse(\"1\"),int.Parse(\"1\"), \"this test should fail\"). \u53eb\u4f60\u4e0d\u8981\u7528message\u8fa3\uff1a Also note that all the assert methods take a last parameter of type \u201cstring,\u201d which gets displayed in addition to the framework output, in case of a test failure. Please, never, ever , use this parameter (it\u2019s always optional to use). Just make sure your test name explains what\u2019s supposed to happen. Often, people write the trivially obvious things like \u201ctest failed\u201d or \u201cexpected x instead of y,\u201d which the framework already provides. Much like comments in code, if you have to use this parameter, your method name should be clearer. \u958b\u8dd1\u56c9 There are at least four ways you can run this test: Using the NUnit GUI Using Visual Studio 2012 Test Runner with an NUnit Runner Extension, called the NUnit Test Adapter in the NUget Gallery Using the ReSharper test runner (a well-known commercial plug-in for VS) Using the TestDriven.NET test runner (another well-known commercial plug-in for VS) \u597d\u4e86\u4f60\u770b\u5230\u7d05\u71c8\u4e86\uff0c\u4fee\u6210\u7da0\u71c8\u5427 if(!fileName.EndsWith(\".SLF\")) { return false; } You\u2019ve seen that bad extensions are flagged as such, but who\u2019s to say that good ones do get approved by this little method? If you were doing this in a test-driven way, a missing test here would have been obvious, but because you\u2019re writing the tests after the code, you have to come up with good test ideas that will cover all the paths. [Test] public void IsValidLogFileName_GoodExtensionLowercase_ReturnsTrue() { LogAnalyzer analyzer = new LogAnalyzer(); bool result = analyzer .IsValidLogFileName(\"filewithgoodextension.slf\"); Assert.True(result); } [Test] public void IsValidLogFileName_GoodExtensionUppercase_ReturnsTrue() { LogAnalyzer analyzer = new LogAnalyzer(); bool result = analyzer .IsValidLogFileName(\"filewithgoodextension.SLF\"); Assert.True(result); } \u4fee\u6b63 public bool IsValidLogFileName(string fileName) { if (!fileName.EndsWith(\".SLF\", StringComparison.CurrentCultureIgnoreCase)) { return false; } return true; } TDD\u795e\u6559\u7bb4\u8a00 Red-Green-Refacto The red/green concept is prevalent throughout the unit testing world and especially in test-driven development. Its mantra is \u201cRed-Green-Refactor,\u201d meaning that you start with a failing test, then pass it, and then make your code readable and more maintainable. \u5927\u591a\u7684framework\u5728\u8655\u7406\u4efb\u4f55\u672a\u9810\u671f\u7684\u4f8b\u5916\u4e5f\u6703\u4f7f\u6e2c\u8a66\u505c\u6b62\u4e26\u5931\u6557\u4eae\u7d05\u71c8 Tests can also fail if an unexpected exception suddenly gets thrown. A test that stops because of an unexpected exception will be considered a failed test for most test frameworks, if not all. It\u2019s part of the point\u2014sometimes you have bugs in the form of an exception you didn\u2019t expect. \u95dc\u65bc Test code styling \u6e2c\u8a66\u540d\u7a31\u53ef\u4ee5\u8d85\u9577\uff0c\u53ef\u8b80\u6027\u6bd4\u8f03\u91cd\u8981 \u7a7a\u884c\u5340\u52063A \u76e1\u91cf\u5340\u5206act\u548cassert \u8001\u8a71\u4e00\u53e5\uff1a Readability is one of the most important aspects when writing a test. Refactoring to parameterized tests Replace the [Test] attribute with the [TestCase] attribute. Extract all the hardcoded values the test is using into parameters for the test method. Move the values you had before into the braces of the [TestCase(param1, param2,..)] attribute. Rename this test method to a more generic name. Add a [TestCase(..)] attribute on this same test method for each of the tests you want to merge into this test method, using the other test\u2019s values. Remove the other tests so you\u2019re left with just one test method that has multiple [TestCase] attributes. [TestCase(\"filewithgoodextension.SLF\")] [TestCase(\"filewithgoodextension.slf\")] public void IsValidLogFileName_ValidExtensions_ReturnsTrue(string file) { LogAnalyzer analyzer = new LogAnalyzer(); bool result = analyzer.IsValidLogFileName(file); Assert.True(result); } \u5982\u679c\u8981\u52a0\u4e0a\u6703\u5931\u6557\u7684case\u5462? [TestCase(\"filewithgoodextension.SLF\",true)] [TestCase(\"filewithgoodextension.slf\",true)] [TestCase(\"filewithbadextension.foo\",false)] public void IsValidLogFileName_VariousExtensions_ChecksThem(string file, bool expected) { LogAnalyzer analyzer = new LogAnalyzer(); bool result = analyzer.IsValidLogFileName(file); Assert.AreEqual(expected,result); } \u7f3a\u9ede\u5927\u6982\u5fc3\u77e5\u809a\u660e I\u2019ll warn that doing this will likely create a less-readable test method because the name will have to become even more generic . Consider this a demo of the syntax, and know that this is possibly taking this technique too far in the right direction, because it makes the tests less understandable without going deeply through the code. More NUnit attributes Setup and teardown \u8a18\u5f97\u628a\u6771\u897f\u6e05\u4e7e\u6de8\uff0c\u5982\u679c\u4f60\u7684\u6e2c\u8a66\u6709dependency\u554f\u984c\u8981\u89e3\u662f\u5f88\u82b1\u6642\u9593\u7684\u3002 [SetUp] \u2014This attribute can be put on a method, just like a [Test] attribute, and it causes NUnit to run that setup method each time it runs any of the tests in your class. [TearDown] \u2014This attribute denotes a method to be executed once after each test in your class has executed. \u4e00\u6a23\uff0c\u8b39\u8a18\u4f60\u7528\u8d8a\u591a\u9019\u7a2e\u6771\u897f\u4f60\u7684\u53ef\u8b80\u6027\u8d8a\u4f4e I tell my students, \u201cImagine that the readers of your test have never met you and never will. They arrive and read your tests two years after you\u2019ve left the company. Every little thing you do to help them understand the code without needing to ask any questions is a big help. They probably have nobody around who can answer those questions, so you\u2019re their only hope.\u201d (\u53ef\u662f\u5462\uff0c\u505a\u9019\u7a2e\u4e8b\u53ea\u6709\u6280\u8853\u4eba\u54e1\u77e5\u9053\u5462) using NUnit.Framework; [TestFixture] public class LogAnalyzerTests { private LogAnalyzer m_analyzer=null; [SetUp] public void Setup() { m_analyzer = new LogAnalyzer(); } [Test] public void IsValidFileName_validFileLowerCased_ReturnsTrue() { bool result = m_analyzer .IsValidLogFileName(\"whatever.slf\"); Assert.IsTrue(result, \"filename should be valid!\"); } [Test] public void IsValidFileName_validFileUpperCased_ReturnsTrue() { bool result = m_analyzer .IsValidLogFileName(\"whatever.SLF\"); Assert.IsTrue(result, \"filename should be valid!\"); } [TearDown] public void TearDown() { //the line below is included to show an anti pattern. //This isn\u2019t really needed. Don\u2019t do it in real life. m_analyzer = null; } } Think of the setup and teardown methods as constructors and destructors for the tests in your class. \u63db\u53e5\u8a71\u8aaa(\u6216\u6211\u81ea\u5df1\u8166\u88dc)\uff0c\u4e0d\u8981\u518d\u7528constructor\uff0c\u4e0d\u904e\u4f5c\u8005\u5efa\u8b70\u9023setup\u90fd\u4e0d\u8981\u7528\uff0c\u76f4\u63a5\u4f7f\u7528\u5de5\u5ee0\u65b9\u6cd5(factory method) In real life I do not use setup methods to initialize my instances. I show it here for you to know that it exists and to avoid it. It may seem like a good idea, but soon it makes the tests below the setup method harder to read. Instead, I use factory methods to initialize my instances under test. \u53e6\u5916\u4e5f\u6709 [TestFixtureSetUp] \u548c [TestFixtureTearDown] \u9019\u7a2eattribute\uff0c\u5728\u8a2d\u7f6e\u6216\u6e05\u9664\u9700\u8981\u8f03\u9577\u6642\u9593\u7684\u6e2c\u8a66\u6642\u5f88\u597d\u7528\uff0c\u4f46\u8acb\u5343\u842c\u8b39\u614e\u4f7f\u7528\uff0c\u56e0\u70ba\u4f60\u6b63\u5728\u6e2c\u8a66\u9593\u5206\u4eab\u72c0\u614b\u3002 \u4e0d\u8981\u5728 \u55ae\u5143 \u6e2c\u8a66\u4f7f\u7528TearDown\u548cTestFixture You almost never, ever use TearDown or TestFixture methods in unit test projects. If you do, you\u2019re very likely writing an integration test, where you\u2019re touching the filesystem or a database, and you need to clean up the disk or the DB after the tests. The only time it makes sense to use a TearDown method in unit tests, I\u2019ve found, is when you need to \u201creset\u201d the state of a static variable or singleton in memory between tests. Any other time, you\u2019re likely doing integration tests. That\u2019s not a bad thing to be doing, but you should be doing it in a separate project that\u2019s dedicated to integration tests. Checking for expected exceptions public class LogAnalyzer { public bool IsValidLogFileName(string fileName) { \u2026 if (string.IsNullOrEmpty(fileName)) { throw new ArgumentException( \"filename has to be provided\"); } \u2026 } } \u904e\u53bb\u7684\u552f\u4e00\u8655\u7406\u9019\u7a2e\u72c0\u6cc1\u4f46\u4f60\u4e0d\u8a72\u4f7f\u7528\u7684API(\u4ecb\u7d39\u723d\u7684)\uff1a [Test] [ExpectedException(typeof(ArgumentException), ExpectedMessage =\"filename has to be provided\")] public void IsValidFileName_EmptyFileName_ThrowsException() { m_analyzer.IsValidLogFileName(string.Empty); } private LogAnalyzer MakeAnalyzer() { return new LogAnalyzer(); } \u9806\u4fbf\u5c55\u73fe\u4e86\u5de5\u5ee0\u65b9\u6cd5\uff0c\u597d\u8655\u662f\u7576constructor\u6709\u7570\u52d5\u4f60\u53ea\u9700\u8981\u6539\u4e00\u500b\u5730\u65b9\u800c\u4e0d\u662f\u6240\u6709\u6e2c\u8a66\u90fd\u8981\u4fee \u70ba\u4ec0\u9ebc\u4e0d\u8981\u4f7f\u7528?\u56e0\u70ba\u4ed6\u5c07\u6574\u500b\u65b9try-catch\u8d77\u4f86\uff0c\u9996\u5148\u4f60\u4e0d\u77e5\u9053\u54ea\u4e00\u884c\u51fa\u932f\uff0c\u53e6\u5916\u4f60\u6709\u53ef\u80fd\u767c\u751f\u4e00\u500bexception(\u4f8b\u5982\u5efa\u69cb\u5b50\u51fa\u932f)\u53ef\u662f\u4f60\u7684\u6e2c\u8a66\u901a\u904e\u4e86(\u56e0\u70ba\u53eacatch\u7279\u5b9aexception) \u9019\u500b\u662f\u4f60\u8a72\u7528\u7684 [Test] public void IsValidFileName_EmptyFileName_Throws() { LogAnalyzer la = MakeAnalyzer(); var ex = Assert.Catch<Exception>(() => la.IsValidLogFileName(\"\")); StringAssert.Contains(\"filename has to be provided\", ex.Message); } \u4f7f\u7528 Assert.Catch \u585elambda expression StringAssert.Contains\u662f\u53e6\u4e00\u500bNunit\u7684\u529f\u80fd\uff0c\u4f7f\u7528Contains\u800c\u4e0d\u662f\u76f4\u63a5equal\u9084\u6709\u6ffe\u9664\u5947\u602a\u6771\u897f\u7684\u529f\u80fd(\u5634) Ignoring tests \u4f60\u77e5\u9053\u7684\uff0c\u5c31\u50cfignore Flake8\u4e00\u6a23\u7684\u597d\u7528 [Test] [Ignore(\"there is a problem with this test\")] public void IsValidFileName_ValidFile_ReturnsTrue() { /// ... } \u64da\u8aaa\u6703\u4eae\u9ec3\u71c8 NUnit\u2019s fluent syntax AssertThat94\u6f6e nunit-fluent-assertions Assert.That(2+2, Is.EqualTo(4)); Setting test categories [Test] [Category(\"Fast Tests\")] public void IsValidFileName_ValidFile_ReturnsTrue() { /// ... } Testing results that are system state changes instead of return values Checking that the system\u2019s behavior is different after performing an action on the system under test. \u6aa2\u67e5\u72c0\u614b\u6539\u8b8a DEFINITION State-based testing (also called state verification ) determines whether the exercised method worked correctly by examining the changed behavior of the system under test and its collaborators (dependencies) after the method is exercised. \u4ee5\u4e0b\u8ac7\u5230\u96a8\u4fbf\u628astate\u9732\u51fa\u53ea\u70ba\u4e86\u6e2c\u8a66\u4e0d\u597d\uff0c\u53ef\u662f\u597d\u50cf\u6c92\u8b1b\u5230\u89e3\u6cd5 If you\u2019ve read other definitions of state-based testing elsewhere, you\u2019ll notice that I define it differently. That is because I view this in a slightly different light\u2014that of test maintainability. Simply testing direct state (sometimes externalizing it to make it testable) is something I wouldn\u2019t usually endorse, because it leads to less-maintainable and less-readable code. public class LogAnalyzer { public bool WasLastFileNameValid { get; set; } public bool IsValidLogFileName(string fileName) { WasLastFileNameValid = false; if (string.IsNullOrEmpty(fileName)) { throw new ArgumentException(\"filename has to be provided\"); } if (!fileName.EndsWith(\".SLF\", StringComparison.CurrentCultureIgnoreCase)) { return false; } WasLastFileNameValid = true; return true; } } \u56e0\u70ba WasLastFileNameValid \u4f9d\u8cf4\u5225\u7684method\u4fee\u6539\u4ed6\uff0c\u6240\u4ee5\u7121\u6cd5\u76f4\u63a5\u6e2c \u56e0\u70ba\u4f5c\u8005\u70ba\u6211\u5927TDD\u795e\u6559\u8654\u8aa0\u6559\u5f92\uff0c\u53c8\u518d\u5f37\u8abf\u6211\u5728\u9019\u88e1\u628acode\u5148\u8cde\u4f60\u662f\u56e0\u70ba\u6211\u6c92\u6253\u7b97\u6559\u4f60TDD\uff0c\u5982\u679c\u7528TDD could \u5beb\u51fa\u66f4\u597d\u7684\u6e2c\u8a66\uff0c\u4e0d\u904e\u4f60\u8981 \u5148\u5b78\u6703\u5beb\u6e2c\u8a66 [Test] public void IsValidFileName_WhenCalled_ChangesWasLastFileNameValid() { LogAnalyzer la = MakeAnalyzer(); la.IsValidLogFileName(\"badname.foo\"); Assert.False(la.WasLastFileNameValid); } \u9084\u662f\u4f7f\u7528method name\u7576\u6e2c\u8a66\u540d\u7a31\uff0c WasLastFileNameValid \u53ea\u662f unit of work \u7684\u4e00\u74b0 refactor\u65b0\u589e\u53cd\u5411\uff1a [TestCase(\"badfile.foo\", false)] [TestCase(\"goodfile.slf\", true)] public void IsValidFileName_WhenCalled_ChangesWasLastFileNameValid(string file, bool expected) { LogAnalyzer la = MakeAnalyzer(); la.IsValidLogFileName(file); Assert.AreEqual(expected, la.WasLastFileNameValid); } \u53e6\u5916\u4e00\u500b\u53e3\u888b\u8a08\u7b97\u6a5f\u4f8b\u5b50\uff1a public class MemCalculator { private int sum=0; public void Add(int number) { sum+=number; } public int Sum() { int temp = sum; sum = 0; return temp; } } \u8a72\u600e\u9ebc\u6e2c\u8a66\u5462\uff1fYou should always consider the simplest test to begin with. \u5c31\u5f9eSum()\u7684default\u70ba0\u958b\u59cb\uff1a [Test] public void Sum_ByDefault_ReturnsZero() { MemCalculator calc = new MemCalculator(); int lastSum = calc.Sum(); Assert.AreEqual(0,lastSum); } \u518d\u6b21\u5f37\u8abf\u6e2c\u8a66\u540d\u7a31\u7684\u91cd\u8981\u6027\uff0c\u4ee5\u9019\u500b\u70ba\u4f8b\u5c31\u50cf\u53e5\u5b50\u4e00\u822c Here\u2019s a simple list of naming conventions of scenarios I like to use in such cases: - ByDefault can be used when there\u2019s an expected return value with no prior action, as shown in the previous example. - WhenCalled or Always can be used in the second or third kind of unit of work results (change state or call a third party) when the state change is done with no prior configuration or when the third-party call is done with no prior configuration; for example, Sum_WhenCalled_CallsTheLogger or Sum_Always_CallsTheLogger . \u65b0\u589eAdd()\u7684\u6e2c\u8a66\uff1a [Test] public void Sum_ByDefault_ReturnsZero() { MemCalculator calc = MakeCalc(); int lastSum = calc.Sum(); Assert.AreEqual(0, lastSum); } [Test] public void Add_WhenCalled_ChangesSum() { MemCalculator calc = MakeCalc(); calc.Add(1); int sum = calc.Sum(); Assert.AreEqual(1, sum); } private static MemCalculator MakeCalc() { return new MemCalculator(); } Notice that this time you use a factory method to initialize MemCalculator . This is a good idea, because it saves time writing the tests, makes the code inside each test smaller and a little more readable, and makes sure MemCalculator is always initialized the same way. It\u2019s also better for test maintainability, because if the constructor for MemCalculator changes, you only need to change the initialization in one place instead of going through each test and changing the new call. always initialized the same way \u6211\u61c2\uff0c\u53ef\u662f saves time writing the tests \u6709\u55ce= =? So far, so good. But what happens when the method you\u2019re testing depends on an external resource, such as the filesystem, a database, a web service, or anything else that\u2019s hard for you to control? And how do you test the third type of result for a unit of work\u2014a call to a third party? That\u2019s when you start creating test stubs, fake objects, and mock objects, which are discussed in the next few chapters. Summary In this chapter, we looked at using NUnit to write simple tests against simple code. You used the [TestCase] , [SetUp] , and [TearDown] attributes to make sure your tests always use new and untouched state. You used factory methods to make this more maintainable. You used [Ignore] to skip tests that need to be fixed. Test categories can help you group tests in a logical way rather than by class and namespace Assert.Catch() helps you make sure your code throws exceptions when it should. Testing results that are system state changes instead of return values Finally, keep the following points in mind: - It\u2019s common practice to have one test class per tested class, one unit test project per tested project (aside from an integration tests project for that tested project), and at least one test method per unit of work (which can be as small as a method or as large as multiple classes). - Name your tests clearly using the following model: [UnitOfWork]_[Scenario]_[ExpectedBehavior] . - Use factory methods to reuse code in your tests, such as code for creating and initializing objects all your tests use. - Don\u2019t use [SetUp] and [TearDown] if you can avoid them. They make tests less understandable. Chapter 3: Using stubs to break dependencies \u7576\u4f60\u7684\u6e2c\u8a66\u76ee\u6a19\u4f9d\u8cf4\u4e0d\u53d7\u63a7\u7684\u6771\u897f\u6642(ex: webservice, time of day, threading...)\u600e\u8fa6\uff1fstubs\u767b\u5834\u3002 Introducing stubs What is external dependency? DEFINITION An external dependency is an object in your system that your code under test interacts with and over which you have no control. (Common examples are filesystems, threads, memory, time, and so on.) \u5229\u7528stub\u4f86\u89e3\u6c7aexternal dependency\u7684\u554f\u984c DEFINITION A stub is a controllable replacement for an existing dependency (or collaborator) in the system. By using a stub, you can test your code without dealing with the dependency directly. mock\u8207stub\u7684\u5dee\u5225\uff1a mocks versus stubs is that mocks are just like stubs, but you assert against the mock object, whereas you do not assert against a stub. \u984c\u5916\u8a71\uff1a xUnit Test Patterns: Refactoring Test Code by Gerard Meszaros (Addison-Wesley, 2007)\u9019\u662f\u4e00\u672c\u5f88\u7d93\u5178\u7684\u55ae\u5143\u6e2c\u8a66pattern\u66f8\uff0c\u66f8\u4e2d\u628afake\u5206\u6210\u4e86\u4e94\u7a2e\uff0c\u4e0d\u904e\u672c\u66f8\u4f5c\u8005\u53ea\u5206\u6210\u4e09\u7a2e\u8a8d\u70ba\u9019\u6a23\u6bd4\u8f03\u597d\u61c2\u3002 Identifying a filesystem dependency in LogAn \u5047\u8a2d LogAnalyzer \u628a\u6709\u6548\u7684extensions\u540d\u7a31\u5b58\u5728\u4e00\u4efd\u6a94\u6848\u88e1\u9762\u7576\u4f5cconfig\uff0c\u90a3\u9ebc IsValidLogFileName \u53ef\u80fd\u6703\u9577\u9019\u6a23\uff1a public bool IsValidLogFileName(string fileName) { //read through the configuration file //return true if configuration says extension is supported. } \u5982\u679c\u9019\u6a23\u8a2d\u8a08\u5c31\u6703\u76f4\u63a5\u76f8\u4f9d\u65bc\u6a94\u6848\u7cfb\u7d71\uff0c\u8b8a\u6210\u5728\u5beb\u6574\u5408\u6e2c\u8a66\uff0c\u4f60\u5c31\u6703\u6709\u4ee5\u4e0b\u7f3a\u9ede\uff1a \u5f88\u6162 \u9700\u8981configuration \u4e00\u6b21\u6e2c\u8a66\u592a\u591a\u6771\u897f This is the essence of test-inhibiting design: the code has some dependency on an external resource, which might break the test even though the code\u2019s logic is perfectly valid. Determining how to easily test LogAnalyzer \u201cThere is no object-oriented problem that cannot be solved by adding a layer of indirection, except, of course, too many layers of indirection.\u201d I like this quote (from http://en.wikipedia.org/wiki/Abstraction_layer ) because a lot of the \u201cart\u201d in the art of unit testing is about finding the right place to add or use a layer of indirection to test the code base. \u6709\u6771\u897f\u4e0d\u80fd\u6e2c?\u52a0\u4e00\u5c64\u628a\u4ed6\u5305\u8d77\u4f86\u7136\u5f8c\u5f04\u500b\u5047\u7684\u6771\u897f\u5047\u88dd\u4ed6\uff0c\u6216\u662f\u8b93\u4ed6\u53ef\u4ee5\u88ab\u66ff\u4ee3\u3002\u9019\u4e2d\u9593\u7684\u85dd\u8853\u5c31\u662f\u4f60\u8981\u77e5\u9053\u662f\u5426\u54ea\u66fe\u5df2\u7d93\u5b58\u5728\u6216\u8a31\u4f60\u4e0d\u9700\u8981\u65b0\u589e\uff0c\u53c8\u6216\u662f\u7cfb\u7d71\u5df2\u7d93\u592a\u8907\u96dc\u4f60\u4e0d\u8a72\u518d\u52a0\u4e00\u5c64\u3002 Pattern for breaking the dependency: Find the interface that the start of the unit of work under test works against. (In this case, \u201cinterface\u201d isn\u2019t used in the pure object-oriented sense; it refers to the defined method or class being collaborated with.) In our LogAn project, this is the filesystem configuration file. If the interface is directly connected to your unit of work under test (as in this case\u2014you\u2019re calling directly into the filesystem), make the code testable by adding a level of indirection hiding the interface. In our example, moving the direct call to the filesystem to a separate class (such as FileExtensionManager ) would be one way to add a level of indirection. We\u2019ll also look at others. (Figure 3.3 shows how the design might look after this step.) Replace the underlying implementation of that interactive interface with something that you have control over. In this case, you\u2019ll replace the instance of the class that your method calls ( FileExtensionManager ) with a stub class that you can control ( StubExtensionManager ), giving your test code control over external dependencies. Refactoring your design to be more testable DEFINITION Refactoring is the act of changing code without changing the code\u2019s functionality. That is, it does exactly the same job as it did before. No more and no less. It just looks different. A refactoring example might be renaming a method and breaking a long method into several smaller methods. You can refactor code by introducing a new seam into it without changing the original functionality of the code, which is exactly what I\u2019ve done by introducing the new IExtensionManager interface. DEFINITION Seams are places in your code where you can plug in different functionality, such as stub classes, adding a constructor parameter, adding a public settable property, making a method virtual so it can be overridden, or externalizing a delegate as a parameter or property so that it can be set from outside a class. Seams are what you get by implementing the Open-Closed Principle, where a class\u2019s functionality is open for extenuation, but its source code is closed for direct modification. (See Working Effectively with Legacy Code by Michael Feathers, for more about seams, or Clean Code by Robert Martin about the Open-Closed Principle.) \u5e79\u6709\u6c92\u6709\u9019\u9ebc\u56b4\u91cd I\u2019ll remind you that refactoring your code without having any sort of automated tests against it (integration or otherwise) can lead you down a career-ending rabbit hole if you\u2019re not careful. Type A and Type B refactorings: Type A\u2014Abstracting concrete objects into interfaces or delegates Type B\u2014Refactoring to allow injection of fake implementations of those delegates or interfaces \u5176\u4ed6\u4f8b\u5b50\uff1a Type A\u2014Extract an interface to allow replacing underlying implementation. Type B\u2014Inject stub implementation into a class under test. Type B\u2014Inject a fake at the constructor level. Type B\u2014Inject a fake as a property get or set. Type B\u2014Inject a fake just before a method call. Extracting a class that touches the filesystem and calling it public bool IsValidLogFileName(string fileName) { FileExtensionManager mgr = new FileExtensionManager(); return mgr.IsValid(fileName); } class FileExtensionManager { public bool IsValid(string fileName) { //read some file here } } Extracting an interface from a known class public class FileExtensionManager : IExtensionManager { public bool IsValid(string fileName) { ... } } public interface IExtensionManager { bool IsValid (string fileName); } //the unit of work under test: public bool IsValidLogFileName(string fileName) { IExtensionManager mgr = new FileExtensionManager(); return mgr.IsValid(fileName); } Simple stub code that always returns true public class AlwaysValidFakeExtensionManager : IExtensionManager { public bool IsValid(string fileName) { return true; } } Dependency Injection Receive an interface at the constructor level and save it in a field for later use. Receive an interface as a property get or set and save it in a field for later use. Receive an interface just before the call in the method under test using one of the following: A parameter to the method (parameter injection) A factory class A local factory method Variations on the preceding techniques Injecting your stub using constructor injection public class LogAnalyzer { private IExtensionManager manager; public LogAnalyzer(IExtensionManager mgr) { manager = mgr; } public bool IsValidLogFileName(string fileName) { return manager.IsValid(fileName); } } public interface IExtensionManager { bool IsValid(string fileName); } [TestFixture] public class LogAnalyzerTests { [Test] public void IsValidFileName_NameSupportedExtension_ReturnsTrue() { FakeExtensionManager myFakeManager = new FakeExtensionManager(); myFakeManager.WillBeValid = true; LogAnalyzer log = new LogAnalyzer (myFakeManager); bool result = log.IsValidLogFileName(\"short.ext\"); Assert.True(result); } } internal class FakeExtensionManager : IExtensionManager { public bool WillBeValid = false; public bool IsValid(string fileName) { return WillBeValid; } } NOTE The fake extension manager is located in the same file as the test code because currently the fake is used only from within this test class. It\u2019s far easier to locate, read, and maintain a handwritten fake in the same file than in a different one. If, later on, you have an additional class that needs to use this fake, you can move it to another file easily with a tool like ReSharper (which I highly recommend). \u5982\u679c\u4f7f\u7528\u5efa\u69cb\u5b50\u6ce8\u5165\u6709\u53ef\u80fd\u6703\u56e0\u70ba\u8981\u6ce8\u5165\u7684\u6771\u897f\u592a\u591a\u5c0e\u81f4\u53c3\u6578\u5f88\u9577\uff0c\u9019\u6642\u5019\u53ef\u4ee5\u7528\u4e0b\u5217\u5169\u7a2e\u65b9\u5f0f\u89e3\u6c7a\uff1a parameter object refactoring. inversion of control (IoC) containers. I seldom use containers in my real code. I find that most of the time they complicate the design and readability of things. It might be that if you need a container, your design needs changing. What do you think? \u592a\u597d\u4e86\u53ef\u4ee5\u5c11\u5b78\u4e00\u500b\u6771\u897f \u4f7f\u7528\u5efa\u69cb\u5b50\u6ce8\u5165\u96d6\u7136\u6703\u8b93\u6e2c\u8a66\u8b8a\u7b28\u91cd\uff0c\u4f46\u4ed6\u662f\u9996\u9078\uff0c\u56e0\u70ba\u53ef\u8b80\u6027\u6700\u597d\uff0c\u4e0d\u904e\u9019\u9084\u8ddf\u8a2d\u8a08\u6709\u95dc\uff0c\u76f8\u4f9d\u7269\u4ef6\u653e\u5728\u5efa\u69cb\u5b50\u7684\u610f\u601d\u540c\u6642\u4ee3\u8868\u9019\u4e9b\u6771\u897f\u662f\u4e0d\u53ef\u9078\u64c7\u7684\u3002 Simulating exceptions from fakes (\u793a\u7bc4\u800c\u5df2\uff0c\u9019\u61c9\u8a72\u4e0d\u662f\u500b\u597d\u8a2d\u8a08\uff0c\u4e14\u8981\u5728IsValidLogFileName\u88e1\u9762\u5bebtry-catch) [Test] public void IsValidFileName_ExtManagerThrowsException_ReturnsFalse() { FakeExtensionManager myFakeManager = new FakeExtensionManager(); myFakeManager.WillThrow = new Exception(\u201cthis is fake\u201d); LogAnalyzer log = new LogAnalyzer (myFakeManager); bool result = log.IsValidLogFileName(\"anything.anyextension\"); Assert.False(result); } } internal class FakeExtensionManager : IExtensionManager { public bool WillBeValid = false;; public Exception WillThrow = null ; public bool IsValid(string fileName) { if(WillThrow !=null) { throw WillThrow;} return WillBeValid; } } Injecting a fake by adding property setters to the class under test public class LogAnalyzer { private IExtensionManager manager; public LogAnalyzer () { manager = new FileExtensionManager(); } public IExtensionManager ExtensionManager { get { return manager; } set { manager = value; } } public bool IsValidLogFileName(string fileName) { return manager.IsValid(fileName); } } [Test] Public void IsValidFileName_SupportedExtension_ReturnsTrue() { //set up the stub to use, make sure it returns true ... //create analyzer and inject stub LogAnalyzer log = new LogAnalyzer (); log.ExtensionManager=someFakeManagerCreatedEarlier; //Assert logic assuming extension is supported ... } } \u4f7f\u7528property\u8a2d\u5b9a\u6703\u5f71\u97ff\u8a2d\u8a08\u6982\u5ff5\uff1a\u53ef\u4ee5\u4e0d\u9700\u8981\u9019\u500b\u6771\u897f\u4f86\u64cd\u4f5c\u9019\u500b\u985e\u5225\uff0c\u611f\u89ba\u6c92\u751a\u9ebc\u4f7f\u7528\u6642\u6a5f\u3002 Setting a factory class to return a stub when the test is running public class LogAnalyzer { private IExtensionManager manager; public LogAnalyzer () { manager = ExtensionManagerFactory.Create(); } public bool IsValidLogFileName(string fileName) { return manager.IsValid(fileName) && Path.GetFileNameWithoutExtension(fileName).Length > 5; } } [Test] public void IsValidFileName_SupportedExtension_ReturnsTrue() { //set up the stub to use, make sure it returns true ... ExtensionManagerFactory .SetManager(myFakeManager); //create analyzer and inject stub LogAnalyzer log = new LogAnalyzer (); //Assert logic assuming extension is supported ... } class ExtensionManagerFactory { private IExtensionManager customManager = null; public IExtensionManager Create() { If(customManager!=null) return customManager; Return new FileExtensionManager(); } public void SetManager(IExtensionManager mgr) { customManager = mgr; } } Here are the steps for using a factory method in your tests: In the class under test, Add a virtual factory method that returns the real instance. Use the factory method in your code, as usual. In your test project, Create a new class. Set the new class to inherit from the class under test. Create a public field (no need for property get or set) of the interface type you want to replace ( IExtensionManager ). Override the virtual factory method. Return the public field. In your test code, Create an instance of a stub class that implements the required interface ( IExtensionManager ). Create an instance of the newly derived class, not of the class under test. Configure the new instance\u2019s public field (which you created earlier) and setit to the stub you\u2019ve instantiated in your test. Faking a factory method public class LogAnalyzerUsingFactoryMethod { public bool IsValidLogFileName(string fileName) { return GetManager().IsValid(fileName); } protected virtual IExtensionManager GetManager() { return new FileExtensionManager(); } } [TestFixture] public class LogAnalyzerTests { [Test] public void overrideTest() { FakeExtensionManager stub = new FakeExtensionManager(); stub.WillBeValid = true; TestableLogAnalyzer logan = new TestableLogAnalyzer(stub); bool result = logan.IsValidLogFileName(\"file.ext\"); Assert.True(result); } } class TestableLogAnalyzer : LogAnalyzerUsingFactoryMethod { public TestableLogAnalyzer(IExtensionManager mgr) { Manager = mgr; } public IExtensionManager Manager; protected override IExtensionManager GetManager() { return Manager; } } internal class FakeExtensionManager : IExtensionManager { //no change from the previous samples ... } \u9019\u500b\u53eb\u505a Extract and Override \uff0c\u5c0d\u4ed8Legacy Code\u7684\u597d\u62db\uff0c\u4f7f\u7528\u6642\u6a5f\uff1a \u9700\u8981\u6a21\u64ec return value \u9700\u8981\u6a21\u64ec\u6574\u500binterface \u9700\u8981\u9a57\u8b49\u4e92\u52d5\u4e0d\u9069\u5408(\u5fc5\u9808\u591a\u5bebcode\u624d\u6709\u53ef\u80fd\u9054\u6210) \u5982\u679c\u6c92\u6709\u4e00\u500b\u5df2\u7d93\u770b\u8d77\u4f86\u6b20inject\u7684interface\u7684\u6642\u5019 Returning a result rather than a stub object from an extracted method public class LogAnalyzerUsingFactoryMethod { public bool IsValidLogFileName(string fileName) { return this.IsValid(fileName); } protected virtual bool IsValid(string fileName) { FileExtensionManager mgr = new FileExtensionManager(); return mgr.IsValid(fileName); } } [Test] public void overrideTestWithoutStub() { TestableLogAnalyzer logan = new TestableLogAnalyzer(); logan.IsSupported = true; bool result = logan.IsValidLogFileName(\"file.ext\"); Assert.True(result,\"...\"); } class TestableLogAnalyzer : LogAnalyzerUsingFactoryMethod { public bool IsSupported; protected override bool IsValid(string fileName) { return IsSupported; } } Overcoming the encapsulation problem \u201cDon\u2019t be silly.\u201d OO\u7684\u5c01\u88ddAPI\u4f7f\u5f97\u7269\u4ef6\u6a21\u578b\u4e0d\u6703\u88abend user\u8aa4\u7528\uff0ctest\u4e5f\u662f\u4e00\u7a2eend user\uff0c\u4ed6\u8207\u539f\u672c\u7684end user\u4e00\u6a23\u91cd\u8981\u53ea\u662f\u76ee\u6a19\u4e0d\u540c\uff0c\u4e0d\u904e\u5982\u679c\u6709\u6f54\u7656\u9084\u662f\u89ba\u5f97\u9019\u6a23\u7834\u58de\u5c01\u88dd\uff0c\u6709\u4ee5\u4e0b\u4e09\u7a2e\u65b9\u5f0f\u53ef\u7528\uff1a Using internal and [InternalsVisibleTo] Using the [Conditional] attribute Using #if and #endif with conditional compilation Summary \u82b1\u5f0finjected \u751a\u9ebc\u662ffake \u9032\u5165\u8d8a\u6df1\u5c64\u4f60\u7684\u6e2c\u8a66\u8d8a\u96e3\u61c2,\u4f46\u8d8a\u4e0a\u5c64\u4f60\u80fd\u63a7\u5236\u7684\u6771\u897f\u8d8a\u5c11 The Extract and Override method TOOD? Chapter 4: Interaction testing using mock objects \u7b2c\u4e09\u7a2e\u6e2c\u8a66\u985e\u578b\uff1a\u4e92\u52d5\uff0cmock\u767b\u5834 Value-based vs. state-based vs. interaction testing \u5230\u76ee\u524d\u70ba\u6b62\u7684\u4e09\u7a2e\u6e2c\u8a66\uff1a Value-base testing State-base testing Interaction testing DEFINITION Interaction testing is testing how an object sends messages (calls methods) to other objects. You use interaction testing when calling another object is the end result of a specific unit of work. You can also think of interaction testing as being action-driven testing. Action-driven testing means that you test a particular action an object takes (such as sending a message to another object). interaction testing\u6c38\u9060\u662f\u4f60\u7684\u6700\u5f8c\u9078\u9805\uff0c\u56e0\u70ba\u5b83\u6700\u8907\u96dc\u3002(\u4e0d\u904e\u4e26\u4e0d\u662f\u6240\u6709\u4eba\u90fd\u9019\u6a23\u8a8d\u70ba\uff0cwe'll see)\uff0c\u4f46\u5c31\u662f\u5076\u723e\u6703\u6709\u6a5f\u6703\u4f7f\u7528interaction testing\u6bd4\u5176\u4ed6\u5169\u7a2e\u7684\u8907\u96dc\u5ea6\u4f86\u7684\u4f4e\u3002 DEFINITION A mock object is a fake object in the system that decides whether the unit test has passed or failed. It does so by verifying whether the object under test called the fake object as expected. There\u2019s usually no more than one mock per test. \u65e2\u7136stub\u8207mock\u90fd\u5b9a\u7fa9\u5b8c\u4e86\u5c31\u53ef\u4ee5\u5b9a\u7fa9fake\u4e86 DEFINITION A fake is a generic term that can be used to describe either a stub or a mock object (handwritten or otherwise), because they both look like the real object. Whether a fake is a stub or a mock depends on how it\u2019s used in the current test. If it\u2019s used to check an interaction (asserted against), it\u2019s a mock object. Otherwise, it\u2019s a stub. The difference between mocks and stubs \u5b9a\u7fa9\u9019\u4e9b\u6771\u897f\u662f\u65b9\u4fbf\u4f7f\u7528framework\u6642\u53ef\u4ee5\u5feb\u901f\u8fa8\u8a8d\u5b83\u7684\u89d2\u8272\uff0c\u5c24\u5176\u7576\u4f60review\u5176\u4ed6\u4eba\u7684\u6e2c\u8a66\u767c\u73fe\u6709\u8d85\u904e\u4e00\u500bmock\u6642\u3002 The easiest way to tell you\u2019re dealing with a stub is to notice that the stub can never fail the test. The asserts that the test uses are always against the class under test. \u63db\u53e5\u8a71\u8aaa\uff0c\u6e2c\u8a66\u7a0b\u5f0f\u6703\u5c0dmock\u505aassert\u3002 A simple handwritten mock example Creating and using a mock object is much like using a stub, except that a mock will do a little more than a stub: it will save the history of communication, which will later be verified in the form of expectations . \u5047\u8a2d\u4eca\u5929LogAnalyzer\u9700\u8981\u8207webservice\u6e9d\u901a\uff0c\u7576\u6a94\u540d\u592a\u9577\u6703\u767c\u51faexception\u3002 \u7b2c\u4e00\u6b65\uff1a\u7d14\u624b\u5de5mock public interface IWebService { void LogError(string message); } public class FakeWebService:IWebService { public string LastError; public void LogError(string message) { LastError = message; } } Testing the LogAnalyzer with a mock object [Test] public void Analyze_TooShortFileName_CallsWebService() { FakeWebService mockService = new FakeWebService(); LogAnalyzer log = new LogAnalyzer(mockService); string tooShortFileName=\"abc.ext\"; log.Analyze(tooShortFileName); StringAssert.Contains(\"Filename too short:abc.ext\", mockService.LastError); } public class LogAnalyzer { private IWebService service; public LogAnalyzer(IWebService service) { this.service = service; } public void Analyze(string fileName) { if(fileName.Length<8) { service.LogError(\"Filename too short:\" + fileName); } } } Also notice that you aren\u2019t writing the tests directly inside the mock object code. There are a couple of reasons for this: - You\u2019d like to be able to reuse the mock object in other test cases, with other asserts on the message. - If the assert were put inside the handwritten fake class, whoever reads the test would have no idea what you\u2019re asserting. You\u2019d be hiding essential information from the test code, which hinders the readability and maintainability of the test. \u5728\u4e00\u500b\u6e2c\u8a66\u88e1combo\u591a\u500bstub\u548c\u4e00\u500bmock\u662f\u6b63\u5e38\u7684\uff0c\u4f46\u5982\u679c\u4f60\u6709\u591a\u500bmock\u5c31\u4ee3\u8868\u6709\u554f\u984c\uff0c\u56e0\u70ba\u4f60\u4e00\u6b21\u6e2c\u592a\u591a\u6771\u897f\u3002 Using a mock and a stub together \u8003\u616e\u66f4\u8907\u96dc\u7684\u60c5\u6cc1\uff0c\u7576web\u7684exception\u767c\u51fa\u6642\u9700\u8981\u5bc4mail if(fileName.Length<8) { try { service.LogError(\"Filename too short:\" + fileName); } catch (Exception e) { email.SendEmail(\"a\",\"subject\",e.Message); } } \u89e3\u6c7a\u65b9\u6cd5\uff1astub webservice, mock mailservice Testing the LogAnalyzer with a mock and a stub public interface IEmailService { void SendEmail(string to, string subject, string body); } public class LogAnalyzer2 { public LogAnalyzer2(IWebService service, IEmailService email) { Email = email, Service = service; } public IWebService Service { get ; set ; } public IEmailService Email { get ; set ; } public void Analyze(string fileName) { if(fileName.Length<8) { try { Service.LogError(\"Filename too short:\" + fileName); } catch (Exception e) { Email.SendEmail(\"someone@somewhere.com\", \"can\u2019t log\",e.Message); } } } } [TestFixture] public class LogAnalyzer2Tests { [Test] public void Analyze_WebServiceThrows_SendsEmail() { FakeWebService stubService = new FakeWebService(); stubService.ToThrow= new Exception(\"fake exception\"); FakeEmailService mockEmail = new FakeEmailService(); LogAnalyzer2 log = new LogAnalyzer2(stubService,mockEmail); string tooShortFileName=\"abc.ext\"; log.Analyze(tooShortFileName); StringAssert.Contains(\"someone@somewhere.com\",mockEmail.To); StringAssert.Contains(\"fake exception\",mockEmail.Body); StringAssert.Contains(\"can\u2019t log\",mockEmail.Subject); } } public class FakeWebService:IWebService { public Exception ToThrow; public void LogError(string message) { if(ToThrow!=null) { throw ToThrow; } } } public class FakeEmailService:IEmailService { public string To; public string Subject; public string Body; public void SendEmail(string to, string subject, string body) { To = to; Subject = subject; Body = body; } } \u95dc\u65bc\u4e00\u6b21assert\u591a\u500b\u7684\u53e6\u5916\u4e00\u7a2e\u8655\u7406\u65b9\u5f0f\uff1a class EmailInfo { public string Body; public string To; public string Subject; } [Test] public void Analyze_WebServiceThrows_SendsEmail() { FakeWebService stubService = new FakeWebService(); stubService.ToThrow= new Exception(\"fake exception\"); FakeEmailService mockEmail = new FakeEmailService(); LogAnalyzer2 log = new LogAnalyzer2(stubService,mockEmail); string tooShortFileName=\"abc.ext\"; log.Analyze(tooShortFileName); EmailInfo expectedEmail = new EmailInfo { Body = \"fake exception\", To = \"someone@somewhere.com\", Subject = \"can\u2019t log\" } Assert.AreEqual(expectedEmail, mockEmail.email); } public class FakeEmailService:IEmailService { public EmailInfo email = null; public void SendEmail(EmailInfo emailInfo) { email = emailInfo; } } One mock per test \u4e00\u500b\u6e2c\u8a66\u88e1\u61c9\u8a72\u53ea\u6709\u4e00\u500bmock\u5176\u4ed6\u90fd\u662fstub\uff0c\u5982\u679c\u6709\u8d85\u904e\u4e00\u500bmock\u4ee3\u8868\u4f60\u4e00\u6b21\u6e2c\u592a\u591a\u6771\u897f\u3002\u7576\u4f60\u7684\u6e2c\u8a66\u592a\u8907\u96dc\u7684\u6642\u5019\u8a18\u5f97\u554f\u81ea\u5df1\u8ab0\u624d\u662fmock\uff0c\u5982\u679c\u4f60\u5c0d\u4e00\u500bstub\u505aassert\uff0c\u6ce8\u610f\u9019\u662foverspecification\u7684\u7279\u5fb5\u3002 Overspecification is the act of specifying too many things that should happen that your test shouldn\u2019t care about; for example, that stubs were called. Overspecification\u6703\u5c0e\u81f4\u4f60\u6aa2\u67e5\u592a\u591a\u6771\u897f\uff0c\u6709\u53ef\u80fd\u6e2c\u8a66\u7d50\u679c\u662f\u597d\u7684\u7d50\u679c\u4f60\u7684\u6e2c\u8a66\u662f\u58de\u7684\u3002 Fake chains: stubs that produce mocks or other stubs \u7576\u4f60\u9047\u5230\u9019\u7a2e\u60c5\u6cc1\uff1a IServiceFactory factory = GetServiceFactory(); IService service = factory.GetService(); \u6216\u9019\u7a2e String connstring = GlobalUtil.Configuration.DBConfiguration.ConnectionString \u9019\u7a2e\u6642\u5019\u4f60\u8981stub\u4e00\u5768\u62c9\u5eab\u6771\u897f\u6700\u5f8c\u53ef\u80fd\u9084\u8981\u4e00\u500bmock\uff0c\u4ee5\u4e0b\u662f\u66f4\u4e7e\u6de8\u7684\u4f5c\u6cd5\uff1a String connstring =GetConnectionString(); Protected virtual string GetConnectionString() { Return GlobalUtil.Configuration.DBConfiguration.ConnectionString; } TIP Another good way to avoid call chains is to create special wrapper classes around the API that simplify using and testing it. For more about this method, see Working Effectively with Legacy Code by Michael Feathers. The pattern is called Adapt Parameter in that book. The problems with handwritten mocks and stubs There are several issues that crop up when using manual mocks and stubs: It takes time to write the mocks and stubs. It\u2019s difficult to write stubs and mocks for classes and interfaces that have many methods, properties, and events. To save state for multiple calls of a mock method, you need to write a lot of boilerplate code within the handwritten fakes. If you want to verify that all parameters on a method call were sent correctly by the caller, you\u2019ll need to write multiple asserts. That\u2019s a drag. It\u2019s hard to reuse mock and stub code for other tests. The basic stuff works, but once you get into more than two or three methods on the interface, everything starts getting tedious to maintain. Is there a place for a fake that is both a mock and a stub? Very rarely. And I mean maybe once or twice in a project. I\u2019ve only seen this a couple of times in the past couple of years myself. Summary A mock object is like a stub, but it also helps you to assert something in your test. Combining stubs and mocks in the same test is a powerful technique, but you must take care to have no more than one mock in each test. Stubs that produce other stubs or mocks can be a powerful way to inject fake dependencies into code that uses other objects to get its data. One of the most common problems encountered by people who write tests is using mocks too much in their tests (overspecification). You may find that writing manual mocks and stubs is inconvenient for large interfaces or for complicated interaction-testing scenarios. It is, and there are better ways to do this, as you\u2019ll see in the next chapter. But often you\u2019ll find that handwritten mocks and stubs still beat frameworks for simplicity and readability. The art lies in when you use which tool. Chapter 5: Isolation(mocking) frameworks isolation framework \u767b\u5834\u2014a reusable library that can create and configure fake objects at runtime . These objects are referred to as dynamic stubs and dynamic mocks . \u4f7f\u7528 NSubstitute Why use isolation frameworks DEFINITION An isolation framework is a set of programmable APIs that makes creating fake objects much simpler, faster, and shorter than hand-coding them. public interface IComplicatedInterface { void Method1(string a, string b, bool c, int x, object o); void Method2(string b, bool c, int x, object o); void Method3(bool c, int x, object o); } Implementing complicated interfaces with handwritten stubs class MytestableComplicatedInterface:IComplicatedInterface { public string meth1_a; public string meth1_b,meth2_b; public bool meth1_c,meth2_c,meth3_c; public int meth1_x,meth2_x,meth3_x; public int meth1_0,meth2_0,meth3_0; public void Method1(string a, string b, bool c, int x, object o) { meth1_a = a; meth1_b = b; meth1_c = c; meth1_x = x; meth1_0 = 0; } public void Method2(string b, bool c, int x, object o) { meth2_b = b; meth2_c = c; meth2_x = x; meth2_0 = 0; } public void Method3(bool c, int x, object o) { meth3_c = c; meth3_x = x; meth3_0 = 0; } } \u624b\u5beb\u9019\u500bfake\u9664\u4e86\u82b1\u6642\u9593\u3001\u7b28\u91cd\u4ee5\u5916\uff0c\u60f3\u50cf\u842c\u4e00\u4eca\u5929\u4f60\u60f3\u8981\u6e2c\u8a66\u67d0\u500b\u65b9\u6cd5\u88ab\u547c\u53eb\u5e7e\u6b21\u600e\u9ebc\u8fa6?\u6216\u662f\u4f60\u60f3\u8981\u56de\u50b3\u7279\u5b9a\u503c?\u6216\u662f\u4f60\u60f3\u8981\u547c\u53eb\u6b77\u53f2?\u4f60\u7684\u7a0b\u5f0f\u99ac\u4e0a\u5c31\u6703\u8b8a\u5f97\u5f88\u919c\u3002 Dynamically creating a fake object DEFINITION A dynamic fake object is any stub or mock that\u2019s created at runtime without needing to use a handwritten (hardcoded) implementation of that object. \u672c\u66f8\u4f7f\u7528 NSubstitute \uff0c\u4e0d\u904e\u63d0\u5230FakeItEasy\u4e5f\u4e0d\u932f\u3002 Asserting against a handwritten fake object [TestFixture] class LogAnalyzerTests { [Test] public void Analyze_TooShortFileName_CallLogger() { FakeLogger logger = new FakeLogger(); LogAnalyzer analyzer = new LogAnalyzer(logger); analyzer.MinNameLength= 6; analyzer.Analyze(\"a.txt\"); StringAssert.Contains(\"too short\",logger.LastError); } } class FakeLogger: ILogger { public string LastError; public void LogError(string message) { LastError = message; } } \u8f15\u9b06\u8f49\u63db Faking an object using NSub [Test] public void Analyze_TooShortFileName_CallLogger() { ILogger logger = Substitute.For<ILogger>(); LogAnalyzer analyzer = new LogAnalyzer(logger); analyzer.MinNameLength = 6; analyzer.Analyze(\"a.txt\"); logger.Received().LogError(\"Filename too short: a.txt\"); } \u984c\u5916\u8a71\uff1a\u4ee5\u5f80\u8981mock\u53ef\u4e0d\u662f\u9019\u9ebc\u65b9\u4fbf\uff0c\u8981\u5148recordy\u518dreplay\uff0c\u7d93\u904e\u6f2b\u9577\u7684\u9032\u5316\u624d\u8b8a\u6210\u73fe\u5728\u652f\u63f4Arrange-act-assert\u3002 Simulating fake values stub\u7684\u4f7f\u7528\u65b9\u5f0f Returning a value from a fake object [Test] public void Returns_ByDefault_WorksForHardCodedArgument() { IFileNameRules fakeRules = Substitute.For<IFileNameRules>(); fakeRules.IsValidLogFileName(\"strict.txt\").Returns(true); Assert.IsTrue(fakeRules.IsValidLogFileName(\"strict.txt\")); } \u9650\u5236\u7279\u5b9a\u985e\u578b\u7684\u53c3\u6578\uff0c\u9019\u500b\u53eb\u505a argument matcher [Test] public void Returns_ByDefault_WorksForHardCodedArgument() { IFileNameRules fakeRules = Substitute.For<IFileNameRules>(); fakeRules.IsValidLogFileName(Arg.Any<String>()) .Returns(true); Assert.IsTrue(fakeRules.IsValidLogFileName(\"anything.txt\")); } \u56fa\u5b9a\u4e1f\u51fa\u7279\u5b9aexception\uff0c\u53ef\u8b80\u6027\u964d\u4f4e\u4e0d\u5c11 \u4f5c\u8005\u88dc\u5145\uff1a(This would be easier to do in FakeItEasy, in fact, but NSub has more docs, so I chose to use it here.) [Test] public void Returns_ArgAny_Throws() { IFileNameRules fakeRules = Substitute.For<IFileNameRules>(); fakeRules.When(x => x.IsValidLogFileName(Arg.Any<string>())) .Do(context => { throw new Exception(\"fake exception\"); }); Assert.Throws<Exception>(() => fakeRules.IsValidLogFileName(\"anything\")); } \u4ee5\u4e0b\u793a\u7bc4 \u878d\u5408 \uff1a The method under test and a test that uses handwritten mocks and stubs [Test] public void Analyze_LoggerThrows_CallsWebService() { FakeWebService mockWebService = new FakeWebService(); FakeLogger2 stubLogger = new FakeLogger2(); stubLogger.WillThrow = new Exception(\"fake exception\"); var analyzer2 = new LogAnalyzer2(stubLogger, mockWebService); analyzer2.MinNameLength = 8; string tooShortFileName=\"abc.ext\"; analyzer2.Analyze(tooShortFileName); Assert.That(mockWebService.MessageToWebService, Is.StringContaining(\"fake exception\")); } } public class FakeWebService:IWebService { public string MessageToWebService; public void Write(string message) { MessageToWebService = message; } } public class FakeLogger2:ILogger { public Exception WillThrow = null; public string LoggerGotMessage = null; public void LogError(string message) { LoggerGotMessage = message; if (WillThrow != null) { throw WillThrow; } } } //---------- PRODUCTION CODE public class LogAnalyzer2 { private ILogger _logger; private IWebService _webService; public LogAnalyzer2(ILogger logger,IWebService webService) { _logger = logger; _webService = webService; } public int MinNameLength { get; set; } public void Analyze(string filename) { if (filename.Length<MinNameLength) { try { _logger.LogError( string.Format(\"Filename too short: {0}\",filename)); } catch (Exception e) { _webService.Write(\"Error From Logger: \" + e); } } } } public interface IWebService { void Write(string message); } \u4e0a\u9762\u624b\u5beb\uff0c\u4e0b\u9762\u7528Nsub Converting the previous test into one that uses NSubstitute [Test] public void Analyze_LoggerThrows_CallsWebService() { var mockWebService = Substitute.For<IWebService>(); var stubLogger = Substitute.For<ILogger>(); stubLogger.When( logger => logger.LogError(Arg.Any<string>())) .Do(info => { throw new Exception(\"fake exception\");}); var analyzer = new LogAnalyzer2(stubLogger, mockWebService); analyzer.MinNameLength = 10; analyzer.Analyze(\"Short.txt\"); mockWebService.Received() .Write(Arg.Is<string>(s => s.Contains(\"fake exception\"))); } lambda\u96d6\u7136\u8b93\u53ef\u8b80\u6027\u964d\u4f4e\uff0c\u4e0d\u904e\u9019\u662f\u751f\u6d3b\u5728C#\u7684\u5fc5\u8981\u4e4b\u60e1\uff0c\u540c\u6642\u53ef\u4ee5\u907f\u514d\u7528string\u547c\u53eb\u65b9\u6cd5\uff0c\u9019\u6703\u8b93\u4f60refactor\u6642\u8f03\u65b9\u4fbf\u3002 argument matchers\u53ef\u4ee5\u7528\u5728stub\u4e5f\u53ef\u4ee5\u7528\u5728mock \uff0c \u66f4\u591a\u7684Argument matchers \u4e0b\u9762COMPARING OBJECTS AND PROPERTIES AGAINST EACH OTHER \u5047\u8a2d\u4eca\u5929\u8981\u78ba\u8a8dErrorInfo\u9019\u500bobject\u5167\u5bb9\uff1a [Test] public void Analyze_LoggerThrows_CallsWebServiceWithNSubObject() { var mockWebService = Substitute.For<IWebService>(); var stubLogger = Substitute.For<ILogger>(); stubLogger.When( logger => logger.LogError(Arg.Any<string>())) .Do(info => { throw new Exception(\"fake exception\");}); var analyzer = new LogAnalyzer3(stubLogger, mockWebService); analyzer.MinNameLength = 10; analyzer.Analyze(\"Short.txt\"); mockWebService.Received() .Write(Arg.Is<ErrorInfo>(info => info.Severity == 1000 && info.Message.Contains(\"fake exception\"))); } \u90a3\u500b And \u5be6\u5728\u5f88\u919c\uff0c\u6709\u4e9b\u6642\u5019isolation frameworks\u7528\u7684\u8d8a\u6df1\u53ef\u8b80\u6027\u8d8a\u5dee\uff0c\u5fc5\u9808\u8981\u81ea\u5df1\u505a\u53d6\u6368\uff0c\u4e5f\u53ef\u4ee5\u8003\u616e\u56de\u53bb\u4f7f\u7528 \u624b\u5beb \u7248fake\uff0c\u6216\u8005\u4f7f\u7528 expected object \uff1a Comparing full objects [Test] public void Analyze_LoggerThrows_CallsWebServiceWithNSubObjectCompare() { var mockWebService = Substitute.For<IWebService>(); var stubLogger = Substitute.For<ILogger>(); stubLogger.When( logger => logger.LogError(Arg.Any<string>())) .Do(info => { throw new Exception(\"fake exception\");}); var analyzer = new LogAnalyzer3(stubLogger, mockWebService); analyzer.MinNameLength = 10; analyzer.Analyze(\"Short.txt\"); var expected = new ErrorInfo(1000, \"fake exception\"); mockWebService.Received().Write(expected); } Testing full objects only works when the following are true: It\u2019s easy to create the object with the expected properties. You want to test all the properties of the object in question. You know the exact values of each property, fully. The Equals() method is implemented correctly on the two objects being compared. (It\u2019s usually bad practice to rely on the out-of-the-box implementation of object.Equals() . If Equals() is not implemented, then this test will always fail, because by default Equals() will return false .) \u6ce8\u610f\u6bd4\u8f03\u6574\u500bobject\u662f\u6703\u5c0e\u81f4\u4f60\u7684\u6e2c\u8a66\u975e\u5e38\u8106\u5f31\u7684\uff0c\u96a8\u4fbf\u4e00\u6539\u52d5\u6e2c\u8a66\u5c31\u6703\u58de\u6389\uff0c\u4f60\u6703\u56e0\u70ba\u4e0d\u662f\u6b63\u78ba\u7684\u539f\u56e0(\u6709bug\u7522\u751f)\u800c\u4fee\u6b63\u6e2c\u8a66\uff0c\u800c\u4e14\u6bd4\u8f03\u6574\u500bobject\u6703\u8b93\u4f60\u7121\u6cd5\u4f7f\u7528argument matchers\uff0c\u6709\u53ef\u80fd\u4e00\u500bstring\u53ea\u662f\u591a\u4e86\u4e00\u500b\u7a7a\u767d\u5c31\u8b93\u6e2c\u8a66\u58de\u6389\uff0c\u53e6\u4e00\u500b\u9078\u64c7\u662f\u4e0d\u8981\u6bd4\u5c0d\u6574\u500bobject\uff0c\u4f60\u53ef\u4ee5\u9078\u5e7e\u500bproperties\u642d\u914dargument matchers\u505a\u6bd4\u5c0d\u5c31\u597d\u3002 Testing for event-related activities Events are a two-way street, and you can test them in two different directions: Testing that someone is listening to an event Testing that someone is triggering an event Event-related code and how to trigger it class Presenter { private readonly IView _view; public Presenter(IView view) { _view = view; this._view.Loaded += OnLoaded; } private void OnLoaded() { _view.Render(\"Hello World\"); } } public interface IView { event Action Loaded; void Render(string text); } //------ TESTS [TestFixture] public class EventRelatedTests { [Test] public void ctor_WhenViewIsLoaded_CallsViewRender() { var mockView = Substitute.For<IView>(); Presenter p = new Presenter(mockView); mockView.Loaded += Raise.Event<Action>(); mockView.Received() .Render(Arg.Is<string>(s => s.Contains(\"Hello World\"))); } } Notice the following: The mock is also a stub (you simulate an event).(raise event\u662fstub\u884c\u70ba\uff0c\u5c0d\u4ed6assert\u662fmock\u884c\u70ba) To trigger an event, you have to awkwardly register to it in the test. This is only to satisfy the compiler, because event-related properties are treated differently and are heavily guarded by the compiler. Events can only be directly invoked by their declaring class/struct. \u4ee5\u4e0b\u70ba\u4f7f\u7528stub raise event\u4f7f\u7528mock assert Simulating an event along with a separate mock [Test] public void ctor_WhenViewhasError_CallsLogger() { var stubView = Substitute.For<IView>(); var mockLogger = Substitute.For<ILogger>(); Presenter p = new Presenter(stubView, mockLogger); stubView.ErrorOccured += Raise.Event<Action<string>>(\"fake error\"); mockLogger.Received() .LogError(Arg.Is<string>(s => s.Contains(\"fake error\"))); } \u4e0b\u9762\u793a\u7bc4\u5982\u4f55\u78ba\u8a8devent\u6709\u5728\u6b63\u78ba\u7684\u6642\u9593\u88abfire Using an anonymous delegate to register to an event [Test] public void EventFiringManual() { bool loadFired = false; SomeView view = new SomeView(); view.Load+=delegate { loadFired = true; }; view.DoSomethingThatEventuallyFiresThisEvent(); Assert.IsTrue(loadFired); } Current isolation frameworks for .NET \u5f9eisolation frameworks\u7684\u6578\u91cf\u5c31\u53ef\u4ee5\u77e5\u9053\u9019\u6771\u897f\u7684\u9700\u6c42\u662f\u9ad8\u7684\u3002\u672c\u66f8\u7684append\u6709\u66f4\u591a\u7684\u6bd4\u8f03\uff0c\u5f9e\u4e2d\u9078\u4e00\u500b\u5c31\u597d\uff0c\u53ef\u4ee5\u964d\u4f4eteam member\u7684\u5b78\u7fd2\u66f2\u7dda\u3002 Why method strings are bad inside tests In many frameworks outside the .NET world, it\u2019s common to use strings to describe which methods you\u2019re about to change the behavior of. Why is this not great? If you were to change the name of a method in production, any tests using the method in a string would still compile and would only break at runtime, throwing an exception indicating that a method could not be found. With strongly typed method names (thanks to lambda expressions and delegates), changing the name of a method wouldn\u2019t be a problem, because the method is used directly in the test. Any method changes would keep the test from compiling, and you\u2019d know immediately that there was a problem with the test. With automated refactoring tools like those in Visual Studio, renaming a method is easier, but most refactorings will still ignore strings in the source code. (ReSharper for .NET is an exception. It also corrects strings, but that\u2019s only a partial solution that may prove problematic in some scenarios.) Advantages and traps of isolation frameworks \u512a\u9ede\uff1a Easier parameter verification\u2014Using handwritten mocks to test that a method was given the correct parameter values can be a tedious process, requiring time and patience. Most isolation frameworks make checking the values of parameters passed into methods a trivial process even if there are many parameters. Easier verification of multiple method calls\u2014With manually written mocks, it can be difficult to check that multiple method calls on the same method were made correctly with each having appropriate different parameter values. As you\u2019ll see later, this is a trivial process with isolation frameworks. Easier fakes creation\u2014Isolation frameworks can be used for creating both mocks and stubs more easily. \u53ef\u80fd\u7684\u7f3a\u9ede\uff1a overusing an isolation framework when a manual mock object would suffice making tests unreadable because of overusing mocks in a test, or not separating tests well enough. \u96a8\u6642\u6ce8\u610f\u4f60\u7684\u6e2c\u8a66\uff1a Unreadable test code Verifying the wrong things Having more than one mock per test Overspecifying the tests \u4ee5\u4e0b\u5efa\u8b70 \u5982\u679c\u4f60\u767c\u73fe\u4f60\u7684\u6e2c\u8a66\u8d8a\u4f86\u8d8a\u96e3\u61c2\uff0c\u53ef\u4ee5\u8a66\u8457\u62c6\u5206 \u6e2c\u8a66\u4e00\u500bobject\u6709\u6c92\u6709\u8a3b\u518a\u4e00\u500b\u4e8b\u4ef6\u4e26\u6c92\u6709\u544a\u8a34\u4f60\u4efb\u4f55\u9019\u500bobject\u7684\u529f\u80fd\uff0c\u6e2c\u8a66\u7576\u4e8b\u4ef6\u89f8\u767c\u6703\u767c\u751f\u4e00\u4e9b\u4e8b\u662f\u6bd4\u8f03\u597d\u7684\u65b9\u6cd5 \u901a\u5e38\u4e00\u500b\u6e2c\u8a66\u6307\u5074\u4e00\u4ef6\u4e8b\u624d\u662f\u597d\u7684\uff0c\u5982\u679c\u4f60\u6709\u8d85\u904e\u4e00\u500bmock\u4ee3\u8868\u4f60\u53ef\u80fd\u6e2c\u8d85\u904e\u4e00\u4ef6\u4e8b\uff0c\u5982\u679c\u4f60\u4e0d\u77e5\u9053\u600e\u9ebc\u70ba\u4f60\u7684\u6e2c\u8a66\u547d\u540d\u53ef\u80fd\u4e5f\u662f\u540c\u6a23\u60c5\u6cc1 \u76e1\u53ef\u80fd\u4e0d\u4f7f\u7528mock\uff0c\u53ea\u6709\u7576\u975e\u7528\u4e0d\u53ef\u6642\uff0c\u4e14\u61c9\u8a72\u4e0d\u662f\u5e38\u614b \u5982\u679c\u4f60\u6709\u8d85\u904e5%\u7684mock objects\uff0c\u4f60\u6709\u53ef\u80fd\u5c31\u662foverspecifying \u5982\u679c\u4f60\u7684expectations(x.received().X() and X.received().Y() and so on)\uff0c\u4f60\u7684\u6e2c\u8a66\u53ef\u80fd\u6703\u975e\u5e38\u8106\u5f31 \u6e2c\u8a66\u4e92\u52d5\u662f\u96d9\u9762\u5203\uff0c\u6e2c\u592a\u591a\u4f60\u6703\u770b\u4e0d\u5230\u5168\u8c8c\uff0c\u6e2c\u592a\u5c11\u6709\u53ef\u80fd\u6f0f\u6389\u91cd\u8981\u7684\u4e92\u52d5 \u4ee5\u4e0b\u662f\u91dd\u5c0d overspecifying \u4f60\u53ef\u4ee5\u505a\u7684\u4e00\u4e9b\u4e8b\uff1a Use nonstrict mocks when you can (strict and nonstrict mocks are explained in the next chapter) . The test will break less often because of unexpected method calls. This helps when the private methods in the production code keep changing. Use stubs instead of mocks when you can . If you have more than 5% of your tests with mock objects, you might be overdoing it. Stubs can be everywhere. Mocks, not so much. You only need to test one scenario at a time. The more mocks you have, the more verifications will take place at the end of the test, but usually only one will be the important one. The rest will be noise against the current test scenario. Avoid using stubs as mocks if humanly possible . Use a stub only for faking return values into the program under test or to throw exceptions. Don\u2019t verify that methods were called on stubs. Use a mock only for verifying that some method was called on it, but don\u2019t use it to return values into your program under test. Most of the time, you can avoid a mock that\u2019s also a stub but not always (as you saw earlier in this chapter, regarding events). Summary Mock\u6700\u5f8c\u518d\u4f7f\u7528 \u5982\u679c\u4f60\u7684mock object\u8d85\u904e5%\u4f60\u53ef\u80fdoverspecifying \u5982\u679c\u4f60\u4f7f\u7528isolation framework\u5beb\u7684\u6e2c\u8a66\u958b\u59cb\u8b8a\u919c\uff0c\u8003\u616e\u624b\u5bebmock\u6216\u662f\u62c6\u5206\u6e2c\u8a66 \u5982\u679c\u4f60\u5404\u7a2e\u5931\u6557\u5c31\u662f\u5beb\u4e0d\u51fa\u6e2c\u8a66\u4f60\u6709\u4e09\u7a2e\u9078\u64c7\uff1a use a super framework like Typemock Isolator (explained in the next chapter) change the design quit your job Chapter 6: Digging deeper into isolation frameworks The world of isolation frameworks Constrained and unconstrained frameworks \"\u4f5c\u8005\u81ea\u5df1\u5206\u985e\u7684\" Constrained frameworks Constrained frameworks in .NET include Rhino Mocks, Moq, NMock, EasyMock, NSubstitute, and FakeItEasy. In Java, jMock and EasyMock are examples of constrained frameworks. Constrained\u5c31\u662f\u53d7\u8a9e\u8a00\u672c\u8eab\u8207compiler\u9650\u5236\u3002 In .NET, constrained frameworks are unable to fake static methods, nonvirtual methods, nonpublic methods, and more. Unconstrained frameworks\u5c31\u662f\u9760\u9ed1\u79d1\u6280\u5e79\u58de\u4e8b\u3002 Unconstrained frameworks in .NET include Typemock Isolator, JustMock, and Moles (a.k.a. MS Fakes). In Java, PowerMock and JMockit are examples of unconstrained frameworks. In C++, Isolator++ and Hippo Mocks are examples of such frameworks. .NET\u4f7f\u7528\u7684\u9ed1\u5ba2\u8a08\u8f03\u505a profiling APIs In .NET, all unconstrained frameworks are profiler-based. That means they use a set of unmanaged APIs called the profiling APIs that are wrapped around the running instance of the CLR\u2014the Common Language Runtime\u2014in .NET. \u7c21\u55ae\u4f86\u8aaa\u9019\u6771\u897f\u5305\u542b\u6240\u6709CLR code\u57f7\u884c\u6642\u7684\u4e8b\u4ef6\uff0c\u53ef\u4ee5\u5728IL compile\u4e4b\u524d\u5077\u4e32\u6539\uff0c\u56e0\u70ba\u4e8b\u4ef6\u5305\u542b\u6240\u6709\u7a0b\u5f0f\u78bc\uff0c\u6240\u4ee5\u53ef\u4ee5\u5c0dprivate constructor, static method\u751a\u81f3\u662f\u4e0d\u53d7\u4f60\u63a7\u5236\u7684\u7b2c\u4e09\u65b9\u7a0b\u5f0f\u78bcfake\u3002 profiling default\u70ba\u95dc\u9589\u9700\u8981\u88ab\u555f\u7528\uff0c\u4e0d\u904eisolation framework\u901a\u5e38\u6709add-on\u53ef\u4ee5\u505a\u9019\u4ef6\u4e8b\u3002 unconstrained isolation frameworks\u7684\u512a\u9ede\uff1a You can write unit tests for previously untestable code, because you can fake things around the unit of work and isolate it, without needing to touch and refactor the code. Later, when you have tests, you can start refactoring. You can fake third-party systems that you can\u2019t control and that are potentially very hard to test with, such as if your objects have to inherit from the base class of a third-party product that contains many dependencies at a lower level (SharePoint, CRM, Entity Framework, or Silverlight, to name a few). You can choose your own level of design, rather than be forced into specific patterns. Design isn\u2019t created by a tool; it\u2019s a people issue. If you don\u2019t know what you\u2019re doing, a tool won\u2019t help you anyway. I talk more about this in chapter 11. unconstrained isolation frameworks\u7684\u7f3a\u9ede\uff1a If you don\u2019t pay close attention, you can fake your way into a corner by faking things that aren\u2019t needed, instead of looking at the unit of work at a higher level. If you don\u2019t pay close attention, some tests can become unmaintainable because you\u2019re faking APIs that you don\u2019t own. This can happen, but not as often as you might think. From my experience, if you fake a low-enough level of an API in a framework, it\u2019s very unlikely to change in the future. The deeper an API is, the more likely many things are built on top of it, and the less likely it is to change. \u95dc\u65bc.NET\u7684unconstrained isolation frameworks \u4f7f\u7528C++\u5beb\u6210\u548cCLR Profiler API\u5c0d\u63a5(Typemock Isolator) Typemock Isolator\u6709\u5c08\u5229\uff0c\u53ef\u662f\u6c92\u6709\u5f37\u5236\u4f7f\u7528\u7684\u6a23\u5b50(\u6240\u4ee5\u624d\u6709\u5176\u4ed6\u7684feameworks\u50cf\u662fJustMock and Moles) profiling APIs\u6587\u4ef6\u5f88\u5c11(\u6216\u8a31\u662f\u6545\u610f\u7684?)\uff0c\u4e0d\u904e\u53ef\u4ee5\u67e5 JitCompilationStarted and SetILFunctionBody \u7406\u8ad6\u4e0a\u6240\u6709isolation frameworks\u7684\u80fd\u529b\u61c9\u8a72\u662f\u4e00\u6a23\u7684\uff0c\u4f46\u5be6\u969b\u4e0a\u9084\u662f\u770b\u8a72framework\u63d0\u4f9b\u4e86\u751a\u9ebc\u529f\u80fd\u7d66\u4f60 Typemock\u6b77\u53f2\u6700\u60a0\u4e45\uff0cMS Fakes\u63d0\u4f9b\u4e00\u4e9bfake\u539f\u751flib\u7684\u529f\u80fd Profiler-based frameworks\u6703\u6709\u6548\u80fd\u5f71\u97ff\uff0c\u53ef\u662f\u5f88\u5c0f\uff0c\u6bd4\u8d77\u4ed6\u5e36\u4f86\u7684\u597d\u8655\u53ef\u4ee5\u7121\u8996\u3002 \u8173\u672c\u8a9e\u8a00\u50cfRuby, Python, JavaScript\u7b49\u7b49\uff0c\u6c92\u6709\u50cfC#\u9019\u9ebc\u597d\u7528\u4e14\u53ef\u8b80\u6027\u4f73\u7684isolation frameworks\uff0c\u6709\u53ef\u80fd\u662f\u6846\u67b6\u4e0d\u5920\u6210\u719f\u4e5f\u53ef\u80fd\u662f\u6e2c\u8a66\u9084\u6c92\u9054\u5230\u50cf.NET\u9019\u6a23\u76f8\u540c\u7684\u7d50\u8ad6\uff0c\u4e0d\u904e\u4e5f\u6709\u53ef\u80fd\u6211\u5011\u505a\u7684\u4e8b\u662f\u932f\u7684? Good isolation frameworks have what I call the big two values: - Future-proofing - Usability Future-proofing \u5c31\u662f\u4f60\u53ea\u80fd\u56e0\u70ba\u6b63\u78ba\u7684\u7406\u7531\u4f7f\u6e2c\u8a66\u58de\u6389(ex:bug)\uff0c\u800c Usability \u5247\u662fisolation frameworks\u5fc5\u9808\u597d\u61c2\u4e14\u5bb9\u6613\u4f7f\u7528\uff0c\u4ee5\u4e0b\u662f\u4f7f\u6e2c\u8a66\u66f4robust\u7684\u7279\u5fb5\uff1a Recursive fakes Ignored arguments by default Wide faking Nonstrict behavior of fakes Nonstrict mocks Recursive fakes \u7bc4\u4f8b\uff1a public interface IPerson { IPerson GetManager(); } [Test] public void RecursiveFakes_work() { IPerson p = Substitute.For<IPerson>(); Assert.IsNotNull(p.GetManager()); Assert.IsNotNull(p.GetManager().GetManager()); Assert.IsNotNull(p.GetManager().GetManager().GetManager()); } Ignored arguments by default \u597d\u50cf\u53ea\u6709Typemock Isolator\u6709\uff0c\u4e00\u76f4\u6253 Arg.IsAny<Type> \u9019\u7a2e\u6771\u897f\u5f88\u6d6a\u8cbb\u6642\u9593 Wide faking Typemock\u5c4c\u5c4c\u7684 Isolate.Fake.StaticMethods(typeof(HttpRuntime)); Nonstrict behavior of fakes \u5982\u679c\u4f60\u7684fake\u592a\u56b4\u683c\u5c31\u6703\u8b93\u6e2c\u8a66\u5f88\u5bb9\u6613\u58de\u6389\uff0c\u4f8b\u5982\u5728 unit of work \u88e1\u9762\u544a\u8a34\u6e2c\u8a66\u67d0\u500bmethod\u61c9\u8a72\u88ab\u547c\u53eb\uff0c\u5f80\u5f8c\u91cd\u69cb\u4f7f\u5f97\u9019\u500bmethod\u4e0d\u518d\u88ab\u547c\u53eb\u53ef\u662f\u4f60\u7684 unit of work \u7d50\u679c\u9084\u662f\u6b63\u78ba\u7684\uff0c\u537b\u56e0\u6b64\u5c0e\u81f4\u6e2c\u8a66\u58de\u6389\u3002 Nonstrict mocks Argument matching\u5c31\u662f\u4e00\u7a2enonstrict mocks\uff0c\u53ef\u4ee5\u63a5\u53d7\u4efb\u4f55\u4e00\u7a2ecall\u7684mock\u4e5f\u662f Isolation framework design antipatterns Here are some of the antipatterns found in frameworks today that we can easily alleviate: Concept confusion: \u4f8b\u5982api\u540d\u7a31\u5305\u542bmock\u8b93\u4f60\u5206\u4e0d\u6e05\u8ab0\u662fmock\u8ab0\u662fstub Record and replay: \u96e3\u8b80 Sticky behavior: \u5bb9\u6613\u8b93\u6e2c\u8a66\u58de Complex syntax: \u96e3\u7528 Concept confusion \u4f8b\u5982api\u540d\u7a31\u5305\u542bmock\u8b93\u4f60\u5206\u4e0d\u6e05\u8ab0\u662fmock\u8ab0\u662fstub Summary Isolation frameworks are divided into two categories: constrained and unconstrained frameworks. profiling APIs future-proofing and usability Chapter 7: Test hierarchies and organization \u8b1b\u5982\u4f55\u914d\u7f6e\u4f60\u7684\u6e2c\u8a66\u5011 Automated builds running automated tests If you plan to make your team more agile and equipped to handle requirement changes as they come into your shop, you need to be able to do the following: - Make a small change to your code. - Run all the tests to make sure you haven\u2019t broken any existing functionality. - Make sure your code can still integrate well and not break any other projects you depend on. - Create a deliverable package of your code and deploy it automatically at the push of a button. \u5728\u8b1bCI \u4f60\u53ef\u80fd\u9700\u8981\u5404\u7a2ebuild configurations\u548cbuild scripts \u628a\u4f60\u7684build script\u4e00\u8d77\u4e0aversion control\u624d\u53ef\u4ee5\u4e32CI A build process is a logical concept: encompassing build scripts build integration servers build triggers shared team understanding and acceptance of how code is deployed and integrated \u5718\u968a\u7684agreement\u5f88\u91cd\u8981(\u5236\u5ea6\u963f) \u628a\u4f60\u7684build\u62c6\u5206\uff0c\u624d\u53ef\u4ee5\u7576\u6210\u662ffunction\u914d\u5408CI\u547c\u53eb A continuous integration (CI) build script - compile debug mode and run fast tests A nightly build script - build release, run slow tests, deploy to stage... A deployment build script - essentially a delivery mechanism I call them nightly builds, but they can be run many times a day. At the very least, they run once a night. They give more feedback but take more time to give it. \u6709\u4e9bCI servers\u540c\u6642\u63d0\u4f9bbuild script-related tasks\uff0c\u4e0d\u904ebuild script\u61c9\u8a72\u8981\u4e00\u8d77\u9032\u7248\u63a7\uff0c\u9019\u6a23\u56de\u5230\u820a\u7248\u672c\u6642\u624d\u6703\u6709\u6b63\u78ba\u7684build script \u4f5c\u8005\u4e0d\u611b\u7528MSBuild\u56e0\u70ba\u4ed6\u89ba\u5f97xml\u5f88\u96e3maintain\uff0c\u4f60\u6703\u597d\u5e7e\u500b\u6708\u7761\u89ba\u90fd\u5922\u5230\u4e00\u5806tag A CI server\u2019s main jobs are these: Trigger a build script based on specific events Provide build script context and data such as version, source code, and artifacts Provide an overview of build history and metrics Provide the current status of all the active and inactive builds A trigger can start a build script automatically when certain events occur, such as source control updates, time passing, or another build configuration failing or succeeding. \u4f60\u53ef\u80fd\u6703\u57f7\u884c\u4e00\u9023\u4e32\u7684\u5de5\u4f5c\u4f86\u5b8c\u6210\u6700\u5f8c\u7684build\uff0c\u7a31\u4ed6\u505abuild configuration\uff0c\u5efa\u8b70\u628a\u5979\u9650\u5236\u5728\u4e00\u4efd\u53ef\u57f7\u884c\u7684build script\u4e26\u9032\u5165\u7248\u63a7\uff0c\u78ba\u4fdd\u5de5\u4f5c\u7684\u76f8\u5bb9\u6027\u6700\u5927\u5316 Artifacts are the end results of running a build script. They could be binary files, configuration files, or any type of file. Mapping out tests based on speed and type \u628a\u55ae\u5143\u6e2c\u8a66\u8207\u6574\u5408\u6e2c\u8a66\u5206\u958b\uff0c\u4e0d\u9700\u8981\u5206\u6210\u4e0d\u540c\u7684test projects\uff0c\u4e0d\u540c\u7684folder\u6216namespace\u5c31\u5920\u4e86\u3002 \u4e0d\u5206\u958b\u6703\u767c\u751f\u751a\u9ebc\u4e8b? people not running your tests \u6e2c\u8a66\u58de\u6389\u7684\u5e7e\u7a2e\u53ef\uff1a There\u2019s a bug in the code under test. The test has a problem in the way it\u2019s written. The test is no longer relevant. The test requires some configuration to run. \u6700\u5f8c\u4e00\u7a2e\u8207\u958b\u767c\u8005\u6700\u7121\u95dc\uff0c\u901a\u5e38\u6703\u88ab\u5ffd\u7565\u56e0\u70ba\u8a8d\u70ba\u4ed6\u4e0d\u91cd\u8981\uff0c\u7576\u9019\u7a2e\u6574\u5408\u6e2c\u8a66\u85cf\u5728\u4f60\u7684\u6e2c\u8a66\u88e1\u9762\u6642\uff0c\u5f88\u5bb9\u6613\u6d6a\u8cbb\u6642\u9593\u8ddf\u91d1\u9322\u53bb\u627e\u4e0d\u5b58\u5728\u7684\u554f\u984c\uff0c\u800c\u4e14\u6bcf\u4e00\u6b21\u767c\u751f\u90fd\u6703\u4f7f\u5de5\u7a0b\u5e2b\u5931\u53bb\u5c0d\u6e2c\u8a66\u7684\u4fe1\u4efb\uff0c\u4e0b\u6b21\u53c8\u6709\u6e2c\u8a66\u58de\u6389\u7684\u6642\u5019\u53ef\u80fd\u53ea\u6703\u8aaa\"\u5662~\u90a3\u6e2c\u8a66\u5076\u723e\u6703\u58de\u6389\uff0c\u6c92\u4e8b\u5152\u6c92\u4e8b\u5152~\" The safe green zone \u5275\u9020\u53ea\u6709unit test\u7684The safe green zone\u8b93\u5de5\u7a0b\u5e2b\u4e0d\u6703\u6709 \u6c92\u4e8b\u5152\u6c92\u4e8b\u5152 \u5fc3\u614b\uff0c\u7576The safe green zone\u6c92\u904e\u5c31\u4ee3\u8868\u771f\u7684\u6709\u554f\u984c\u800c\u4e0d\u662fconfiguration\u51fa\u554f\u984c\u4e86\u3002 \u9019\u7576\u7136\u4e0d\u4ee3\u8868\u6574\u5408\u6e2c\u8a66\u5c31\u4e0d\u61c9\u8a72\u904e\uff0c\u53ea\u662f\u6574\u5408\u6e2c\u8a66\u901a\u5e38\u6bd4\u8f03\u6162\uff0c\u5206\u958b\u53ef\u4ee5\u8b93\u5de5\u7a0b\u5e2b\u7522\u80fd\u66f4\u9ad8\uff0c\u8dd1\u66f4\u591a\u6b21\u7684unit test\uff0c\u800c\u5728\u6bcf\u6b21unit test\u904e\u7684\u6642\u5019\u6709\u67d0\u4e9b\u7a0b\u5ea6\u7684\u4fe1\u5fc3\u3002 \u5206\u958b\u4e5f\u53ef\u4ee5\u8b93\u6574\u5408\u6e2c\u8a66\u6709\u81ea\u5df1\u78ba\u4fdd\u80fd\u901a\u904e\u6e2c\u8a66\u7684\u74b0\u5883\uff0c\u4e5f\u53ef\u4ee5\u8a73\u7d30\u7684\u6587\u4ef6\u8a18\u9304\u5982\u4f55configuration\u3002 Ensuring tests are part of source control \u5ee2\u8a71 Mapping test classes to code under test \u6e2c\u8a66\u7684\u914d\u7f6e\u61c9\u8a72\u6eff\u8db3\u4ee5\u4e0b: Look at a project and find all the tests that relate to it Look at a class and find all the tests that relate to it Look at a method and find all the tests that relate to it \u4f5c\u8005\u7684\u914d\u7f6e\u6e2c\u8a66project\u7684\u65b9\u5f0f\uff1a xxxProject xxxProject.UnitTests xxxProject.IntegrationTests \u914d\u7f6e\u6e2c\u8a66class\u6709\u5404\u7a2e\u65b9\u5f0f\uff0c\u8a0e\u8ad6\u4e3b\u8981\u7684\u5169\u7a2e ONE TEST CLASS PER CLASS OR UNIT OF WORK UNDER TEST xxxClass xxxClass.UnitTests The one-test-class-per-class pattern (also mentioned in Meszaros\u2019s xUnit Test Patterns: Refactoring Test Code ) is the simplest and most common pattern for organizing tests. \u4e00\u500bclass\u6240\u6709\u7684method\u6e2c\u8a66\u90fd\u585e\u5728\u4e00\u500b\u5927\u6e2c\u8a66class\u88e1\uff0c\u7f3a\u9ede\u662f\u6709\u53ef\u80fd\u9019\u500b\u6e2c\u8a66class\u6703\u9577\u592a\u5927\u8b93\u4f60\u5f88\u96e3\u770b\uff0c\u6709\u6642\u5019\u4e00\u500b\u65b9\u6cd5\u7684\u6e2c\u8a66\u76f4\u63a5\u6df9\u6c92\u5176\u4ed6\u65b9\u6cd5\uff0c\u9019\u4e5f\u8868\u793a\u90a3\u500b\u65b9\u6cd5\u7684\u6e2c\u8a66\u6216\u8a31\u592a\u591a\u4e86\u3002 ONE TEST CLASS PER FEATURE An alternative is creating a separate test class for a particular feature (which could be as small as a method). The one-test-class-per-feature pattern is also mentioned in Meszaros\u2019s book. xxxClassTests xxxClassTestsyyyMethod Cross-cutting concerns injection When you\u2019re dealing with cross-cutting concerns such as time management, or exceptions, or logging, you might end up with code that\u2019s less readable and maintainable when using these techniques. \u5047\u8a2d\u6709\u96bb\u7a0b\u5f0f\u4f7f\u7528 DateTime public static class TimeLogger { public static string CreateMessage(string info) { return DateTime.Now.ToShortDateString() + \" \" + info; } } \u800c\u70ba\u4e86\u8b93\u4ed6\u80fd\u88ab\u6e2c\u8a66\u4f60\u53ef\u80fd\u9700\u8981 ITimeProvider \uff0c\u9019\u6703\u8b93\u4f60\u6bcf\u6b21\u7528\u5230 DateTime \u90fd\u9700\u8981\u82b1\u6642\u9593\u5beb\u9019\u500binterface\uff0c\u9084\u8b93\u4f60\u7684\u7a0b\u5f0f\u8b8a\u5f97\u96e3\u8b80\u4e86\u3002 \u53e6\u4e00\u7a2e\u66f4\u597d\u7684\u505a\u6cd5\uff1a\u81ea\u5df1\u5beb\u4e00\u500b SystemTime \u5305\u8d77\u4f86\uff0c\u540c\u6642\u78ba\u4fdd\u4f60\u7684\u7a0b\u5f0f\u4e0d\u518d\u4f7f\u7528 DateTime Using the SystemTime class public static class TimeLogger { public static string CreateMessage(string info) { return SystemTime.Now.ToShortDateString() + \" \" + info; } } public class SystemTime { private static DateTime _date; public static void Set(DateTime custom) { _date = custom; } public static void Reset() { _date=DateTime.MinValue; } public static DateTime Now { get { if (_date != DateTime.MinValue) { return _date; } return DateTime.Now; } } } A test using SystemTime [TestFixture] public class TimeLoggerTests { [Test] public void SettingSystemTime_Always_ChangesTime() { SistemTime.Set(new DateTime(2000,1,1)); string output = TimeLogger.CreateMessage(\"a\"); StringAssert.Contains(\"01.01.2000\", output); } [TearDown] public void afterEachTest() { SystemTime.Reset(); } } \u6709\u53ef\u80fd\u6703\u78b0\u5230\u8a9e\u8a00\u554f\u984c\uff0cNunit\u7684 CultureInfoAttribute \u53ef\u4ee5\u5e6b\u9019\u500b\u5fd9 \u8b66\u544a\uff1a This type of external abstraction of a cross-cutting concern allows you to create a fake focal point in your production code instead of many small ones. But it only makes sense for things that are used throughout the system. If you use this for everything, you end up with a system that might be just as hard to read as what you\u2019re trying to avoid. \u5982\u4f55\u78ba\u4fdd\u5927\u5bb6\u90fd\u7528SystemTime->code review\u6216replace tool Building a test API for your application \u4f60\u7684\u6e2c\u8a66\u8d8a\u5beb\u8d8a\u591a\u81ea\u7136\u6703\u6162\u6162\u4e5f\u628a\u6e2c\u8a66\u91cd\u69cb\u3001\u65b0\u589e\u61c9\u7528api\u7b49\u7b49\uff1a Use inheritance in your test classes for code reuse, guidance, and more. Create test utility classes and methods. Make your API known to developers. Using test class inheritance patterns DRY!! One of the most powerful arguments for object-oriented code is that you can reuse existing functionality instead of recreating it over and over again in other classes\u2014what Andy Hunt and Dave Thomas called the DRY (\u201cdon\u2019t repeat yourself\u201d) principle in The Pragmatic Programmer (Addison-Wesley Professional, 1999). \u963f\u56e0\u70ba\u4f60\u7684\u6e2c\u8a66\u4e5f\u662f\u7528.NET\u5beb\u7684,\u4e0d\u8981\u5c0d\u4f7f\u7528\u7e7c\u627f\u611f\u5230\u7f6a\u60e1XD Implementing a base class can help alleviate standard problems in test code in the following ways: Reusing utility and factory methods Running the same set of tests over different classes (we\u2019ll look at this one in more detail) Using common setup or teardown code (also useful for integration testing) Creating testing guidance for programmers who will derive from the base class \u4ecb\u7d39\u4e09\u7a2e\u4f7f\u7528\u7e7c\u627f\u7684\u6e2c\u8a66pattern abstract test infrastructure class Template test class Abstract test driver class \u548c\u5169\u7a2e\u53ef\u4ee5\u4f7f\u7528\u5728\u4e0a\u9762pattern\u7684\u91cd\u69cb\u6280\u5de7 Refactoring into a class hierarchy Using generics ABSTRACT TEST INFRASTRUCTURE CLASS PATTERN The abstract test infrastructure class pattern creates an abstract test class that contains essential common infrastructure for test classes deriving from it. Scenarios where you\u2019d want to create such a base class can range from having common setup and teardown code to having special custom asserts that are used throughout multiple test classes. \u5047\u8a2d\u6709\u500bLoggingFacility\u53ef\u80fd\u5f88\u591a\u5730\u65b9\u6703\u7528\u5230\uff0c\u4f8b\u5982\u9019\u88e1LogAnalyzer\u8207ConfigurationManager\u90fd\u9700\u8981\u4f7f\u7528\uff0c\u9019\u6642\u5019\u6703\u5728\u9019\u5169\u500bclass\u7684\u6e2c\u8a66\u4e2d\u5404\u5225fake LoggingFacility //This class uses the LoggingFacility Internally public class LogAnalyzer { public void Analyze(string fileName) { if (fileName.Length < 8) { LoggingFacility.Log(\"Filename too short:\" + fileName); } //rest of the method here } } //another class that uses the LoggingFacility internally public class ConfigurationManager { public bool IsConfigured(string configName) { LoggingFacility.Log(\"checking \" + configName); return result; } } public static class LoggingFacility { public static void Log(string text) { logger.Log(text); } private static ILogger logger; public static ILogger Logger { get { return logger; } set { logger = value; } } } [TestFixture] public class LogAnalyzerTests { [Test] public void Analyze_EmptyFile_ThrowsException() { LogAnalyzer la = new LogAnalyzer(); la.Analyze(\"myemptyfile.txt\"); //rest of test } [TearDown] public void teardown() { // need to reset a static resource between tests LoggingFacility.Logger = null; } } [TestFixture] public class ConfigurationManagerTests { [Test] public void Analyze_EmptyFile_ThrowsException() { ConfigurationManager cm = new ConfigurationManager(); bool configured = cm.IsConfigured(\"something\"); //rest of test } [TearDown] public void teardown() { // need to reset a static resource between tests LoggingFacility.Logger = null; } } \u5275\u9020\u4e00\u500b\u61c9\u7528\u578b\u7684base class\u4f86\u91cd\u69cb\u5b83\uff0c\u4e0d\u4f7f\u7528[SetUp]\u56e0\u70ba\u6703\u5f71\u97ff\u53ef\u8b80\u6027\uff0c\u800c\u4e14\u6703\u8b93\u6240\u6709\u6e2c\u8a66\u4e00\u5b9a\u6703\u57f7\u884c\u5b83\uff0c\u770b\u6e2c\u8a66\u7684\u4eba\u53ef\u80fd\u6703\u4e0d\u77e5\u9053\u767c\u751f\u4e86\u751a\u9ebc\u4e8b\u800c\u5fc5\u9808\u53bb\u770bbase class (\u6211\u8aaa\u9019\u7e7c\u627f\u7528\u5f97\u9084\u9817\u66b4\u529b) A refactored solution [TestFixture] public class BaseTestsClass { public ILogger FakeTheLogger() { LoggingFacility.Logger = Substitute.For<ILogger>(); return LoggingFacility.Logger; } [TearDown] public void teardown() { // need to reset a static resource between tests LoggingFacility.Logger = null; } } [TestFixture] public class ConfigurationManagerTests:BaseTestsClass { [Test] public void Analyze_EmptyFile_ThrowsException() { FakeTheLogger(); ConfigurationManager cm = new ConfigurationManager(); bool configured = cm.IsConfigured(\"something\"); //rest of test } } [TestFixture] public class LogAnalyzerTests : BaseTestsClass { [Test] public void Analyze_EmptyFile_ThrowsException() { FakeTheLogger(); LogAnalyzer la = new LogAnalyzer(); la.Analyze(\"myemptyfile.txt\"); //rest of test } } \u7f3a\u9ede\uff1a\u5f71\u97ff\u53ef\u8b80\u6027\uff0c\u5176\u4ed6\u7684\u958b\u767c\u8005\u4e0d\u78ba\u5b9a\u5982\u4f55\u4f7f\u7528\u9019\u500bbase class\u7684API\uff0c\u6240\u4ee5\u76e1\u91cf\u5c11\u7528\uff0c\u901a\u5e38\u4f7f\u7528\u4e00\u500b\u6548\u679c\u5c31\u5f88\u4e0d\u932f\u4e86\uff0c\u7136\u5f8c\u5343\u842c\u4e0d\u8981\u591a\u5c64\u7e7c\u627f\u3002 TEMPLATE TEST CLASS PATTERN Let\u2019s say you want to make sure people who test specific kinds of classes in the code never forget to go through a certain set of unit tests for them as they develop the classes; for example, network code with packets, security code, database-related code, or just plain-old parsing code. The point is, you know that when they work on this kind of class in code, some tests must exist because that kind of class has to provide a known set of services with its API. \u6211\u8981\u53eb\u4ed6 \u5f37\u8feb\u4f60\u8981\u5beb\u9019\u4e9b\u6e2c\u8a66pattern \u5047\u8a2d\u4f60\u6709\u500babstract class\u53eb BaseStringParser \uff0c\u7136\u5f8c\u6709\u4e09\u500b\u5b50\u985e\u5225 XMLStringParser , IISLogStringParser , and StandardStringParser \uff0c\u4ed6\u5011\u90fd\u652f\u63f4\u5f9eheader\u53d6\u5f97\u672c\u8cc7\u8a0a\u7684\u65b9\u6cd5\uff0c\u9996\u5148\u6311\u4e00\u500b\u5beb\uff1a An outline of a test class for StandardStringParser [TestFixture] public class StandardStringParserTests { private StandardStringParser GetParser(string input) { return new StandardStringParser(input); } [Test] public void GetStringVersionFromHeader_SingleDigit_Found() { string input = \"header;version=1;\\n\"; StandardStringParser parser = GetParser(input string versionFromHeader = parser.GetStringVersionFromHeader(); Assert.AreEqual(\"1\",versionFromHeader); } [Test] public void GetStringVersionFromHeader_WithMinorVersion_Found() { string input = \"header;version=1.1;\\n\"; StandardStringParser parser = GetParser(input); //rest of the test } [Test] public void GetStringVersionFromHeader_WithRevision_Found() { string input = \"header;version=1.1.1;\\n\"; StandardStringParser parser = GetParser(input); //rest of the test } } \u6ce8\u610f\u4e0a\u9762\u4f7f\u7528\u4e86helper method GetParser \u800c\u4e0d\u662f\u4f7f\u7528setup method\uff0c\u9019\u6a23\u624d\u53ef\u4ee5\u88e1\u7528constructor\u6bcf\u6b21\u5e36\u5165\u81ea\u5df1\u7684\u53c3\u6578\u6210\u70ba\u6bcf\u500b\u6e2c\u8a66\u81ea\u5df1\u7684parser \u5982\u4f55\u5f37\u8feb\u5b50\u985e\u5225\u4e5f\u8981\u52a0\u5165\u7279\u5b9a\u6e2c\u8a66\u5462?=>\u7e7c\u627fabstract class A template test class for testing string parsers [TestFixture] public abstract class TemplateStringParserTests { public abstract void TestGetStringVersionFromHeader_SingleDigit_Found(); public abstract void TestGetStringVersionFromHeader_WithMinorVersion_Found(); public abstract void TestGetStringVersionFromHeader_WithRevision_Found(); } [TestFixture] public class XmlStringParserTests : TemplateStringParserTests { protected IStringParser GetParser(string input) { return new XMLStringParser(input); } [Test] public override void TestGetStringVersionFromHeader_SingleDigit_Found() { IStringParser parser = GetParser(\"<Header>1</Header>\"); string versionFromHeader = parser.GetStringVersionFromHeader(); Assert.AreEqual(\"1\",versionFromHeader); } [Test] public override void TestGetStringVersionFromHeader_WithMinorVersion_Found() { IStringParser parser = GetParser(\"<Header>1.1</Header>\"); string versionFromHeader = parser.GetStringVersionFromHeader(); Assert.AreEqual(\"1.1\",versionFromHeader); } [Test] public override void TestGetStringVersionFromHeader_WithRevision_Found() { IStringParser parser = GetParser(\"<Header>1.1.1</Header>\"); string versionFromHeader = parser.GetStringVersionFromHeader(); Assert.AreEqual(\"1.1.1\",versionFromHeader); } } \u6ce8\u610f GetParser \u53ea\u662f\u500b\u4e00\u822c\u7684method\u4e0d\u542b\u5728abstract class\uff0c\u6c92\u591a\u8aaa\u70ba\u4ec0\u9ebc I use the word Test to prefix the abstract methods in the base class, so that people who override them in derived classes have an easier time finding what\u2019s important to override. ABSTRACT \u201cFILL IN THE BLANKS\u201d TEST DRIVER CLASS PATTERN \u6700\u7d42\u62db\uff1a\u628a\u6e2c\u8a66\u5beb\u5728base\uff0c\u6e2c\u8a66\u9700\u8981\u7684\u4e00\u4e9b\u5be6\u4f5c\u4ea4\u7d66\u5b50\u985e\u5225 A \u201cfill in the blanks\u201d base test class public abstract class FillInTheBlanksStringParserTests { protected abstract IStringParser GetParser(string input); protected abstract string HeaderVersion_SingleDigit { get; } protected abstract string HeaderVersion_WithMinorVersion {get;} protected abstract string HeaderVersion_WithRevision { get; } public const string EXPECTED_SINGLE_DIGIT = \"1\"; public const string EXPECTED_WITH_REVISION = \"1.1.1\"; public const string EXPECTED_WITH_MINORVERSION = \"1.1\"; [Test] public void GetStringVersionFromHeader_SingleDigit_Found() { string input = HeaderVersion_SingleDigit; IStringParser parser = GetParser(input); string versionFromHeader = parser.GetStringVersionFromHeader(); Assert.AreEqual(EXPECTED_SINGLE_DIGIT,versionFromHeader); } [Test] public void GetStringVersionFromHeader_WithMinorVersion_Found() { string input = HeaderVersion_WithMinorVersion; IStringParser parser = GetParser(input); string versionFromHeader = parser.GetStringVersionFromHeader(); Assert.AreEqual(EXPECTED_WITH_MINORVERSION,versionFromHeader); } [Test] public void GetStringVersionFromHeader_WithRevision_Found() { string input = HeaderVersion_WithRevision; IStringParser parser = GetParser(input); string versionFromHeader = parser.GetStringVersionFromHeader(); Assert.AreEqual(EXPECTED_WITH_REVISION,versionFromHeader); } } [TestFixture] public class StandardStringParserTests : FillInTheBlanksStringParserTests { protected override string HeaderVersion_SingleDigit { get { return string.Format(\"header\\tversion={0}\\t\\n\", EXPECTED_SINGLE_DIGIT); } } protected override string HeaderVersion_WithMinorVersion { get { return string.Format(\"header\\tversion={0}\\t\\n\", EXPECTED_WITH_MINORVERSION); } } protected override string HeaderVersion_WithRevision { get { return string.Format(\"header\\tversion={0}\\t\\n\", EXPECTED_WITH_REVISION); } } protected override IStringParser GetParser(string input) { return new StandardStringParser(input); } } \u5b50\u985e\u5225\u6c92\u6709\u4efb\u4f55\u6e2c\u8a66 REFACTORING YOUR TEST CLASS INTO A TEST CLASS HIERARCHY \u5982\u4f55\u628a\u65e2\u6709\u6e2c\u8a66\u91cd\u69cb\u6210\u4e0a\u9762\u90a3\u6a23? Here\u2019s a list of possible steps for refactoring your test class: Refactor: extract the superclass. Create a base class (BaseXXXTests). Move the factory methods (like GetParser) into the base class. Move all the tests to the base class. Extract the expected outputs into public fields in the base class. Extract the test inputs into abstract methods or properties that the derived classes will create. Refactor: make factory methods abstract, and return interfaces. Refactor: find all the places in the test methods where explicit class types are used, and change them to use the interfaces of those types instead. In the derived class, implement the abstract factory methods and return the explicit types. A VARIATION USING .NET GENERICS TO IMPLEMENT TEST HIERARCHY You can use generics as part of the base test class. This way, you don\u2019t need to override any methods in derived classes; just declare the type you\u2019re testing against. Implementing test case inheritance with .NET generics //An example of the same idea using Generics public abstract class GenericParserTests<T> where T:IStringParser { protected abstract string GetInputHeaderSingleDigit(); protected T GetParser(string input { return (T) Activator.CreateInstance(typeof (T), input); } [Test] public void GetStringVersionFromHeader_SingleDigit_Found() { string input = GetInputHeaderSingleDigit(); T parser = GetParser(input); bool result = parser.HasCorrectHeader(); Assert.IsFalse(result); } //more tests //... } //An example of a test inheriting from a Generic Base Class [TestFixture] public class StandardParserGenericTests:GenericParserTests<StandardStringParser> { protected override string GetInputHeaderSingleDigit() { return \"Header;1\"; } } \u53ea\u662f\u4e00\u500b\u4f8b\u5b50\uff0cgeneric\u770b\u8d77\u4f86\u4e5f\u6c92\u6709\u5176\u4ed6\u597d\u8655\uff0c\u5c24\u5176\u662f\u6e2c\u8a66\u4e0d\u592a\u9700\u8981\u9019\u7a2e\u6027\u80fd\u63d0\u5347 Creating test utility classes and methods \u6e2c\u8a66\u8d8a\u5beb\u8d8a\u591a\u5c31\u6703\u6162\u6162\u7522\u751f\u5404\u7a2eutility methods You might end up with the following types of utility methods: Factory methods for objects that are complex to create or that routinely get created by your tests. System initialization methods (such as methods for setting up the system state before testing, or changing logging facilities to use stub loggers). Object configuration methods (for example, methods that set the internal state of an object, such as setting a customer to be invalid for a transaction). Methods that set up or read from external resources such as databases, configuration files, and test input files (for example, a method that loads a text file with all the permutations you\u2019d like to use when sending in inputs for a specific method and the expected results). This is more commonly used in integration or system testing. Special assert utility methods, which may assert something that\u2019s complex or that\u2019s repeatedly tested inside the system\u2019s state. (If something was written to the system log, the method might assert that X, Y, and Z are true, but not G.) You may end up refactoring your utility methods into these types of utility classes: Special assert utility classes that contain all the custom assert methods Special factory classes that hold the factory methods Special configuration classes or database configuration classes that hold integration-style actions .NET\u4e16\u754c\u6709\u4e9b\u4e0d\u932f\u7684uitlity frameworks\u4f8b\u5982 Fluent Assertions \u64c1\u6709\u9019\u4e9bunitlity methods\u4e0d\u4ee3\u8868\u4fdd\u8b49\u4efb\u4f55\u4eba\u90fd\u6703\u4f7f\u7528\u5b83\uff0c\u4f60\u7d93\u5e38\u6703\u9047\u5230\u5de5\u7a0b\u5e2b\u91cd\u8907\u9020\u8f2a\uff0c\u6240\u4ee5\u4f60\u9700\u8981\u8b93\u5225\u4eba\u77e5\u9053\u9019\u4e9bAPI\u7684\u5b58\u5728 Making your API known to developers \u5982\u4f55\u8b93\u4f60\u7684APIs\u8b8a\u6709\u540d? Have teams of two people write tests together (at least once in a while), where one is familiar with the existing APIs and can teach the other, as they write new tests, about the existing benefits and code that could be used. Have a short document (no more than a couple of pages) or a cheat sheet that details the types of APIs out there and where to find them. You can create short documents for specific parts of your testing framework (APIs specific to the data layer, for example) or a global one for the whole application. If it\u2019s not short, no one will maintain it. One possible way to make sure it\u2019s up to date is by automating the generation process: Have a known set of prefixes or postfixes on the API helpers\u2019 names (helper [something], for example). Have a special tool that parses out the API names and their locations and generates a document that lists them and where to find them, or have some simple directives that the special tool can parse from comments you put on them. Automate the generation of this document as part of the automated build process. Discuss changes to the APIs during team meetings\u2014one or two sentences outlining the main changes and where to look for the significant parts. That way the team knows that this is important and it\u2019s always a consideration. Go over this document with new employees during their orientation. Summary Whatever testing you do\u2014however you do it\u2014automate it, use an automated build process to run it as many times as possible during the day or night, and continuously deliver the product as much as possible. Separate the integration tests from the unit tests (the slow tests from the fast ones) so that your team can have a safe green zone where all the tests must pass. Map out tests by project and by type (unit versus integration tests, slow versus fast tests), and separate them into different directories, folders, or namespaces (or all of these). I usually use all three types of separation. Use a test class hierarchy to apply the same set of tests to multiple related types under test in a hierarchy or to types that share a common interface or base class. Use helper classes and utility classes instead of hierarchies if the test class hierarchy makes tests less readable, especially if there\u2019s a shared setup method in the base class. Different people have different opinions on when to use which, but readability is usually the key reason for not using hierarchies. Make your API known to your team. If you don\u2019t, you\u2019ll lose time and money as team members unknowingly reinvent APIs over and over again. Chapter 8: The pillars of good unit tests \u6e2c\u8a66\u4e09\u672c\u67f1\uff1a Trustworthiness \u2014Developers will want to run trustworthy tests, and they\u2019ll accept the test results with confidence. Trustworthy tests don\u2019t have bugs, and they test the right things. Maintainability \u2014Unmaintainable tests are nightmares because they can ruin project schedules, or they may be sidelined when the project is put on a more aggressive schedule. Developers will simply stop maintaining and fixing tests that take too long to change or that need to change very often on very minor production code changes. Readability \u2014This means not just being able to read a test but also figuring out the problem if the test seems to be wrong. Without readability, the other two pillars fall pretty quickly. Maintaining tests becomes harder, and you can\u2019t trust them anymore because you don\u2019t understand them. Writing trustworthy tests \u6240\u8b02\u503c\u5f97\u4fe1\u8cf4\u7684\u6e2c\u8a66\u5c31\u662f\u7576\u5b83\u58de\u4e86\u4f60\u6703\u8a8d\u70ba\u771f\u7684\u662f\u4f60\u7684\u7a0b\u5f0f\u78bc\u6709\u554f\u984c\u3002 \u4e00\u4e9b\u65b9\u5f0f\u5e6b\u52a9\u4f60\u7684\u6e2c\u8a66\u66f4\u503c\u5f97\u4fe1\u4efb\uff1a Decide when to remove or change tests Avoid test logic Test only one concern Separate unit from integration tests Push for code reviews as much as you push for code coverage Deciding when to remove or change tests \u7c21\u55ae\u4f86\u8aaa\u5c31\u662f\u8981\u5b9a\u671f\u6574\u7406\u4f60\u7684\u6e2c\u8a66\u7a0b\u5f0f\u62c9 The main reason for removing a test is because it fails. A test can suddenly fail for several reasons: Production bugs\u2014There\u2019s a bug in the production code under test. Test bugs\u2014There\u2019s a bug in the test. Semantics or API changes\u2014The semantics of the code under test changed but not the functionality. Conflicting or invalid tests\u2014The production code was changed to reflect a conflicting requirement. There are also reasons for changing or removing tests when nothing is wrong with the tests or code: To rename or refactor the test To eliminate duplicate tests PRODUCTION BUGS \u662f\u6700\u6b63\u5e38\u7684\u60c5\u6cc1\uff0c\u597d\u68d2\u68d2\u3002 TEST BUGS Bugs in tests are notoriously hard to detect, because tests are assumed to be correct. \u6e2c\u8a66\u7a0b\u5f0f\u9577\u87f2\u4e4b\u958b\u767c\u8005\u56db\u968e\u6bb5\uff1a Denial \u2014The developer will keep looking for a problem in the code itself, changing it, causing all the other tests to start failing. The developer introduces new bugs into production code while hunting for the bug that\u2019s actually in the test. Amusement \u2014The developer will call another developer, if possible, and they will hunt for the nonexistent bug together. Debuggerment \u2014The developer will patiently debug the test and discover that there\u2019s a problem in the test. This can take anywhere from an hour to a couple of days. Acceptance and slappage \u2014The developer will eventually realize where the bug is and will slap their forehead. \u4fee\u6b63\u6e2c\u8a66\u4e09\u6b65\u9a5f\uff1a Fix the bug in your test. Make sure the test fails when it should. Make sure the test passes when it should. \u518d\u6b21\u91cd\u7533\u7576\u4f60\u4fee\u6b63\u5b8c\u6e2c\u8a66\u4e4b\u5f8c\u6700\u597d\u518d\u78ba\u8a8d\u4e00\u6b21\u7576\u5b83\u6b63\u5e38\u7684\u6642\u5019\u6703pass\u6709bug\u7684\u6642\u5019\u6703fail\u3002 I\u2019ve seen developers accidentally delete the asserts from their tests when fixing bugs in tests. You\u2019d be surprised how often that happens and how effective step 2 is at catching these cases. SEMANTICS OR API CHANGES \u8209\u500b\u4f8b\uff0c\u5047\u8a2d\u4eca\u5929 LogAnalyzer \u9700\u8981\u5148 Initialize \u624d\u80fd\u4f7f\u7528\uff0c\u5c31\u6703\u8b93\u9019\u500b\u539f\u672c\u5b58\u5728\u7684\u6e2c\u8a66fail A simple test against the LogAnalyzer class [Test] public void SemanticsChange() { LogAnalyzer logan = new LogAnalyzer(); Assert.IsFalse(logan.IsValid(\"abc\")); } \u4fee\u6b63\u6e2c\u8a66\uff1a The changed test using the new semantics of LogAnalyzer [Test] public void SemanticsChange() { LogAnalyzer logan = new LogAnalyzer(); logan.Initialize(); Assert.IsFalse(logan.IsValid(\"abc\")); } \u56e0\u70ba\u9019\u7a2e\u539f\u56e0\u800c\u6539\u52d5\u6e2c\u8a66\u7684\u9ad4\u9a57\u662f\u975e\u5e38\u5dee\u7684\uff0c\u5c24\u5176\u7a0b\u5f0f\u8d8a\u9577\u8d8a\u5927\u7684\u6642\u5019\u3002 A refactored test using a factory method [Test] public void SemanticsChange() { LogAnalyzer logan = MakeDefaultAnalyzer(); Assert.IsFalse(logan.IsValid(\"abc\")); } public static LogAnalyzer MakeDefaultAnalyzer() { LogAnalyzer analyzer = new LogAnalyzer(); analyzer.Initialize(); return analyzer; } \u4f7f\u7528 factory method \u4f86\u964d\u4f4e\u9019\u985e\u7dad\u8b77\u6210\u672c\uff0c\u6709\u4e9b\u5de5\u5177\u5c08\u9580\u5728\u505a\u9019\u4ef6\u4e8b\u60c5\uff0c\u4f8b\u5982 AutoFixture \uff0c\u4e0d\u904e\u5275\u500bfactory method\u4e5f\u6c92\u9ebc\u5927\u4e0d\u4e86\u3002 CONFLICTING OR INVALID TESTS \u53bb\u554f\u4f60\u5bb6PM\u5230\u5e95\u8981\u54ea\u500b\u898f\u683c\u62c9? Seriously, if I catch another person commenting out something instead of deleting it, I will write a whole book titled Why God Invented Source Control . RENAMING OR REFACTORING TESTS \u5c31\u662f\u6539\u5f97\u66f4\u597d\u8b80 ELIMINATING DUPLICATE TESTS \u91cd\u8907\u7684\u6e2c\u8a66\u4e0d\u4e00\u5b9a\u662f\u58de\u4e8b\uff1a The more (good) tests you have, the more certain you are to catch bugs. You can read the tests and see different ways or semantics of testing the same thing. \u8981\u4e0d\u8981\u780d\u4f60\u81ea\u5df1\u6c7a\u5b9a\uff1a Here are some of the cons of having duplicate tests: It may be harder to maintain several different tests that provide the same functionality. Some tests may be higher quality than others, and you need to review them all for correctness. Multiple tests may break when a single thing doesn\u2019t work. (This may not really be undesirable.) Similar tests must be named differently, or the tests can be spread across different classes. Multiple tests may create more maintainability issues. Here are some pros: Tests may have small differences and so can be thought of as testing the same things slightly differently. They may make for a larger and better picture of the object being tested. Some tests may be more expressive than others, so more tests may improve the chances of test readability. Avoiding logic in tests \u6e2c\u8a66\u5982\u679c\u52a0\u5165\u8d8a\u4f86\u8d8a\u591a\u7684\u908f\u8f2f\u5c31\u8d8a\u5bb9\u6613\u7522\u751fbug I\u2019ve seen plenty of tests that should have been simple become dynamically logic-changing, random-number-generating, thread-creating file-writing monsters that are little test engines in their own right. \u6709\u6642\u5019\u9019\u4e9b\u6771\u897f\u662f\u5fc5\u8981\u7684\uff0c\u4f46\u901a\u5e38\u6703\u653e\u5728 integration test \u800c\u4e0d\u662f unit test \u3002 unit test\u4e0d\u8a72\u6709\u9019\u4e9b\u6771\u897f\uff1a switch , if , or else statements foreach , for , or while loops \u6e2c\u8a66\u6709\u908f\u8f2f\u901a\u5e38\u4ee3\u8868\u4e00\u6b21\u6e2c\u8d85\u904e\u4e00\u7a2e\u6771\u897f\uff0c\u4e14\u53ef\u8b80\u6027\u5dee\u53c8\u8106\u5f31\uff0c\u5f88\u6709\u53ef\u80fd\u96b1\u85cfbug\u3002unit test\u4e0d\u61c9\u8a72\u6709control flows\u751a\u81f3\u9023try-catch\u90fd\u4e0d\u8a72\u6709\uff0c\u9019\u4e9b\u6703\u9020\u6210\u4ee5\u4e0b\u554f\u984c\uff1a The test is harder to read and understand. The test is hard to re-create. (Imagine a multithreaded test or a test with random numbers that suddenly fails.) The test is more likely to have a bug or to test the wrong thing. Naming the test may be harder because it does multiple things. \u5982\u679c\u4f60\u5fc5\u9808\u8981\u5beb\u9019\u7a2e monster test \uff0c\u8acb\u4e0d\u8981\u7528\u5b83\u4f86\u53d6\u4ee3\u4efb\u4f55\u65e2\u6709\u7684\u6e2c\u8a66\uff0c\u4e14\u5fc5\u9808\u6a19\u660e\u5b83\u662f integration test \u3002 \u53e6\u4e00\u7a2e\u4f9d\u8a72\u8981\u907f\u514d\u5730\u542b\u6709\u908f\u8f2f\u7684\u6e2c\u8a66\uff1a [Test] public void ProductionLogicProblem() { string user =\"USER\"; string greeting=\"GREETING\"; string actual = MessageBuilder.Build(user,greeting); Assert.AreEqual(user + greeting,actual); } \u9019\u500b\u6e2c\u8a66\u7684\u554f\u984c\u5728expected result\u662f\u52d5\u614b\u751f\u6210\uff0c\u4ed6\u91cd\u8907\u4e86production code\u7684\u7f85\u908f\u8f2f\uff0c\u56e0\u70ba\u5beb\u6e2c\u8a66\u8207\u5bebproduction code\u7684\u901a\u5e38\u662f\u540c\u4e00\u4eba\u3002\u5be6\u969b\u4e0a\u9019\u6bb5\u6e2c\u8a66\u8ddfproduction code\u540c\u6a23\u90fd\u5c11\u4e86\u4e00\u500b\u7a7a\u767d\u3002 [Test] public void ProductionLogicProblem() { string actual = MessageBuilder.Build(\"user\",\"greeting\"); Assert.AreEqual\"user greeting\",actual); } \u5728\u6e2c\u8a66\u7684\u4e16\u754c hardcod \u624d\u662f\u738b\u9053\u3002 Testing only one concern A concern, as explained before, is a single end result from a unit of work: a return value, a change to system state, or a call to a third-party object. For example, if your unit test asserts on more than a single object, it may be testing more than one concern. \u6e2c\u8a66\u8d85\u904e\u4e00\u4ef6\u4e8b\u807d\u8d77\u4f86\u4e0d\u50cf\u58de\u4e8b\u2013\u76f4\u5230\u7576\u4f60\u9700\u8981\u70ba\u4ed6\u547d\u540d\u6216\u7576\u6e2c\u8a66\u6c92\u904e\u4f60\u9700\u8981\u77e5\u9053\u70ba\u4ec0\u9ebc\u7684\u6642\u5019\u3002 \u901a\u5e38test frameworks\u6703\u88ab\u8a2d\u8a08\u4e00\u78b0\u5230exception\u5c31\u4e0d\u6703\u5728\u5f80\u4e0b\u8dd1\uff0c\u5982\u679c\u4f60\u6c92\u6709\u628a\u6e2c\u8a66\u62c6\u5206\uff0c\u4f60\u5c31\u6c92\u8fa6\u6cd5\u6536\u96c6\u5230\u66f4\u591a\u7684\u75c7\u72c0\u4f86\u89e3\u6c7a\u4f60\u7684\u554f\u984c\u3002 Separate unit from integration tests \u518d\u6b21\u5f37\u8abf\u4e00\u5b9a\u8981\u6709 Safe green zone \uff0c\u624d\u80fd\u8b93\u5de5\u7a0b\u5e2b\u76f8\u4fe1\u4f60\u7684\u6e2c\u8a66\u9858\u610f\u8dd1\u4f60\u7684\u6e2c\u8a66\u3002 This green zone is easily created by having a separate unit tests project in which only tests that run in memory, are consistent, and are repeatable exist. Assuring code review with code coverage What does it mean when you have 100% code coverage? Nothing, without a code review. Your CEO might have asked all employees to \u201cget over 95% code coverage,\u201d and they might have done exactly what they were asked. Maybe those tests don\u2019t even have asserts. People tend to do what they need to do to achieve a given goal metric. \u5982\u679c\u4f60\u505a\u4e86code review\u548ctest review\u78ba\u8a8d\u4e86\u6240\u6709\u6e2c\u8a66\u6c92\u554f\u984c\u4e14\u8986\u84cb\u4e86\u6240\u6709\u7684code\uff0c\u4f60\u5c31\u5275\u9020\u4e86\u4e00\u5f35\u5b89\u5168\u7db2\u9632\u6b62\u81ea\u5df1\u5e79\u8822\u4e8b\uff0c\u540c\u6642\u4e5f\u5206\u4eab\u7d66\u4e86\u4f60\u7684\u5718\u968a\u8b93\u4ed6\u5011\u53d7\u60e0\u3002 coverage\u5de5\u5177 To ensure good coverage for your new code, use one of the automated tools (for example, dotCover from JetBrains, OpenCover, NCover, or Visual Studio Pro). My personal recommendation these days is NCrunch, which gives a real-time coverage red/green view of your code that changes as you\u2019re coding. When you add a new test that was missing, check whether you\u2019ve added the correct test with these steps: Comment out the production code you think isn\u2019t being covered. Run all the tests. If all the tests pass, you\u2019re missing a test or are testing the wrong thing. Otherwise, there would have been a test somewhere that was expecting that line to be called or some resulting consequence of that line of code to be true, and that missing test would now fail. Once you\u2019ve found a missing test, you\u2019ll need to add it. Keep the code commented out and write a new test that fails, proving that the code you\u2019ve commented is missing. Uncomment the code you commented before. The test you wrote should now pass. You\u2019ve detected and added a missing test! If the test still fails, it means the test may have a bug or is testing the wrong thing. Modify the test until it passes. Now you\u2019ll want to see that the test is OK, making sure it not only passes when it should, but also fails when it should. To make sure the test fails when it should, reintroduce the bug into your code (commenting out the line of production code) and see if the test indeed fails. Writing maintainable tests Maintainability is one of the core issues most developers face when writing unit tests. Eventually the tests seem to become harder and harder to maintain and understand, and every little change to the system seems to break one test or another, even if bugs don\u2019t exist. Testing only against public contracts Removing duplication in tests Enforcing test isolation. Testing private or protected methods private method\u901a\u5e38\u662f\u958b\u767c\u8005\u6709\u500b\u597d\u7684\u7406\u7531\u8a8d\u70ba\u4ed6\u61c9\u8a72\u662fprivate method\uff0c\u5982\u679c\u5c0dprivate method\u505a\u6e2c\u662f\u6709\u53ef\u80fd\u6703\u975e\u5e38\u8106\u5f31\uff0c\u53ea\u8981\u78b0\u5230refactor\u4f60\u7684\u6e2c\u8a66\u5c31\u6703\u58de\u6389\uff0c\u5118\u7ba1\u6700\u5f8c\u7684\u6574\u500b\u529f\u80fd\u9084\u662f\u6b63\u5e38\u7684\u3002public contract\u624d\u61c9\u8a72\u662f\u4f60\u6e2c\u8a66\u7684\u76ee\u6a19\uff0c\u5982\u679c\u4f60\u60f3\u6e2c\u8a66\u4e00\u500bprivate method\uff0c\u627e\u5230\u4f7f\u7528\u4ed6\u7684public method\u7684use case\u505a\u6e2c\u8a66\uff0c\u5982\u679c\u4f60\u53ea\u91dd\u5c0dprivate method\u505a\u6e2c\u8a66\u4e0d\u4ee3\u8868\u6240\u6709\u7684public method\u90fd\u6b63\u78ba\u4f7f\u7528\u9019\u500bprivate method\u3002\u6709\u6642\u5019\u4f60\u53ef\u80fd\u6703\u770b\u5230\u503c\u5f97\u6e2c\u8a66\u7684private method\uff0c\u4f60\u53ef\u4ee5\u8003\u616e\u4ee5\u4e0b\u89e3\u6cd5\uff1a MAKING METHODS PUBLIC \u96d6\u7136\u597d\u50cf\u9055\u53cdOO\u539f\u5247\uff0c\u4f46\u628a\u65b9\u6cd5\u8b8a\u516c\u958b\u4e0d\u4e00\u5b9a\u662f\u58de\u4e8b\u3002\u60f3\u8981\u5c0d\u4e00\u500b\u65b9\u6cd5\u5beb\u6e2c\u8a66\u4ee3\u8868\u5c0d\u547c\u53eb\u4ed6\u7684\u4ee3\u78bc\u6709\u5df2\u77e5\u7684\u884c\u70ba\u6216\u5951\u7d04\uff0c\u4f60\u53ea\u662f\u628a\u4ed6\u8b8a\u6210 official \u3002\u4fdd\u6301private\u4ee3\u8868\u7684\u662f\u544a\u8a34\u5176\u4ed6\u958b\u767c\u8005\u53ef\u4ee5\u6539\u8b8a\u4ed6\u7684\u5be6\u4f5c\u800c\u4e0d\u7528\u6015\u6709\u4e0d\u77e5\u9053\u7684\u5730\u65b9\u4f7f\u7528\u4ed6\u3002 EXTRACTING METHODS TO NEW CLASSES If your method contains a lot of logic that can stand on its own, or it uses state in the class that\u2019s relevant only to the method in question, it may be a good idea to extract the method into a new class, with a specific role in the system. You can then test that class separately. MAKING METHODS STATIC If your method doesn\u2019t use any of its class\u2019s variables, you might want to refactor the method by making it static. That makes it much more testable but also states that this method is a sort of utility method that has a known public contract specified by its name. MAKING METHODS INTERNAL When all else fails, and you can\u2019t afford to expose the method in an official way, you might want to make it internal and then use the [InternalsVisibleTo(\"Test- Assembly\")] attribute on the production code assembly so that tests can still call that method. This is my least favorite approach, but sometimes there\u2019s no choice (perhaps because of security reasons, lack of control over the code\u2019s design, and so on). Removing duplication LogAnalyzer\u8b8a\u5f97\u9700\u8981init\u7684\u4f8b\u5b50\u518d\u8b1b\u4e00\u6b21\uff1a A class under test and a test that uses it public class LogAnalyzer { public bool IsValid(string fileName) { if (fileName.Length < 8) { return true; } return false; } } [TestFixture] public class LogAnalyzerTestsMaintainable { [Test] public void IsValid_LengthBiggerThan8_IsFalse() { LogAnalyzer logan = new LogAnalyzer(); bool valid = logan.IsValid(\"123456789\"); Assert.IsFalse(valid); } } Two tests with duplication [Test] public void IsValid_LengthBiggerThan8_IsFalse() { LogAnalyzer logan = new LogAnalyzer(); bool valid = logan.IsValid(\"123456789\"); Assert.IsFalse(valid); } [Test] public void IsValid_LengthSmallerThan8_IsTrue() { LogAnalyzer logan = new LogAnalyzer(); bool valid = logan.IsValid(\"1234567\"); Assert.IsTrue(valid); } LogAnalyzer with changed semantics that now requires initialization public class LogAnalyzer { private bool initialized=false; public bool IsValid(string fileName) { if(!initialized) { throw new NotInitializedException( \"The analyzer.Initialize() method should be\" + \"called before any other operation!\"); } if (fileName.Length < 8) { return true; } return false; } public void Initialize() { //initialization logic here ... initialized=true; } } REMOVING DUPLICATION USING A HELPER METHOD Adding the Initialize() call in the factory method [Test] public void IsValid_LengthBiggerThan8_IsFalse() { LogAnalyzer logan = GetNewAnalyzer(); bool valid = logan.IsValid(\"123456789\"); Assert.IsFalse(valid); } [Test] public void IsValid_LengthSmallerThan8_IsTrue() { LogAnalyzer logan = GetNewAnalyzer(); bool valid = logan.IsValid(\"1234567\"); Assert.IsTrue(valid); } private LogAnalyzer GetNewAnalyzer() { LogAnalyzer analyzer = new LogAnalyzer(); analyzer.Initialize(); return analyzer; } REMOVING DUPLICATION USING [SETUP] Using a setup method to remove duplication [SetUp] public void Setup() { logan=new LogAnalyzer(); logan.Initialize(); } private LogAnalyzer logan= null; [Test] public void IsValid_LengthBiggerThan8_IsFalse() { bool valid = logan.IsValid(\"123456789\"); Assert.IsFalse(valid); } [Test] public void IsValid_LengthSmallerThan8_IsTrue() { bool valid = logan.IsValid(\"1234567\"); Assert.IsTrue(valid); } Using setup methods in a maintainable manner Setup()\u592a\u597d\u7528\u4e86\uff0c\u597d\u7528\u5230\u8acb\u4f60\u4e0d\u8981\u4e82\u7528\u4ed6\uff0c\u53e6\u5916\u4ed6\u6709\u4ee5\u4e0b\u9650\u5236\uff1a Setup methods can only help when you need to initialize things. Setup methods aren\u2019t always the best candidates for duplication removal. Removing duplication isn\u2019t always about creating and initializing new instances of objects. Sometimes it\u2019s about removing duplication in assertion logic, calling out code in a specific way. Setup methods can\u2019t have parameters or return values. Setup methods can\u2019t be used as factory methods that return values. They\u2019re run before the test executes, so they must be more generic in the way they work. Tests sometimes need to request specific things or call shared code with a parameter for the specific test (for example, retrieve an object and set its property to a specific value). Setup methods should only contain code that applies to all the tests in the current test class, or the method will be harder to read and understand. \u4f86\u770b\u770b\u4ee5\u4e0b\u5e7e\u7a2e\u6feb\u7528setup\u7684\u60c5\u5883\uff1a Initializing objects in the setup method that are used in only some tests in the class Having setup code that\u2019s lengthy and hard to understand Setting up mocks and fake objects within the setup method INITIALIZING OBJECTS THAT ARE USED BY ONLY SOME OF THE TESTS This sin is a deadly one. A poorly implemented Setup() method [SetUp] public void Setup() { logan=new LogAnalyzer(); logan.Initialize(); fileInfo=new FileInfo(\"c:\\\\someFile.txt\"); } private FileInfo fileInfo = null; private LogAnalyzer logan= null; [Test] public void IsValid_LengthBiggerThan8_IsFalse() { bool valid = logan.IsValid(\"123456789\"); Assert.IsFalse(valid); } [Test] public void IsValid_BadFileInfoInput_returnsFalse() { bool valid = logan.IsValid(fileInfo); Assert.IsFalse(valid); } [Test] public void IsValid_LengthSmallerThan8_IsTrue() { bool valid = logan.IsValid(\"1234567\"); Assert.IsTrue(valid); } private LogAnalyzer GetNewAnalyzer() { ... } Why is the setup method in the listing less maintainable? Because, to read the tests for the first time and understand why they break, you need to do the following: Go through the setup method to understand what\u2019s being initialized. Assume that objects in the setup method are used in all tests. Find out later you were wrong, and read the tests again more carefully to see which test uses the objects that may be causing the problems. Dive deeper into the test code for no good reason, taking more time and effort to understand what the code does. HAVING SETUP CODE THAT\u2019S LENGTHY AND HARD TO UNDERSTAND One solution is to refactor the calls to initialize specific things into helper methods that are called from the setup method. This means that refactoring the setup method is usually a good idea. \u4e0d\u8981\u6210\u70ba\u91cd\u69cb\u9b54\u4eba But there\u2019s a fine line between over-refactoring and readability. Over-refactoring can lead to less-readable code. This is a matter of personal preference . You need to watch for when your code is becoming less readable. I recommend getting feedback from a partner during the refactoring. We all can become too enamored with code we\u2019ve written, and having a second pair of eyes involved in refactoring can lead to good and objective results. Having a peer do a code review (a test review) after the fact is also good but not as productive as doing it as it happens. SETTING UP FAKES IN THE SETUP METHOD Please don\u2019t arrange fakes in a setup method. Doing so will make it hard to read and maintain the tests. \u8981\u8b93\u6bcf\u500b\u6e2c\u8a66\u6e05\u695a\u770b\u5230\u4ed6\u7684mock\u548cstub My preference is to have each test create its own mocks and stubs by calling helper methods within the test, so that the reader of the test knows exactly what\u2019s going on, without needing to jump from test to setup to understand the full picture. STOP USING SETUP METHODS I\u2019ve stopped using setup methods for tests I write. They\u2019re a relic from a time when it was OK to write crappy, unreadable tests, but that time is over. \u53e6\u4e00\u500b\u53bb\u91cd\u8907\u7684\u65b9\u6cd5\uff1aparameterized ([TestCase] in NUnit, [Theory] in XUnit.net, or [OopsWeStillDontHaveThatFeatureAfterFiveYears] in MSTest). OK, bad joke, but MSTest still has no simple support for this. Enforcing test isolation \u56e0\u70ba\u9694\u96e2\u6c92\u505a\u597d\uff0c\u6e2c\u8a66\u6642\u597d\u6642\u58de\uff0c\u9019\u7a2e\u554f\u984c\u975e\u5e38\u96e3\u67e5\uff0c\u72fc\u4f86\u4e86\u7684\u6545\u4e8b\u4e5f\u5728\u958b\u767c\u8005\u9593\u767c\u751f\u3002 There are several test \u201csmells\u201d that can hint at broken test isolation: Constrained test order \u2014Tests expecting to be run in a specific order or expecting information from other test results Hidden test call \u2014Tests calling other tests Shared-state corruption \u2014Tests sharing in-memory state without rolling back External shared-state corruption \u2014Integration tests with shared resources and no rollback ANTIPATTERN: CONSTRAINED TEST ORDER Constrained test order: the second test will fail if it runs first Myriad problems can occur when tests don\u2019t enforce isolation: A test may suddenly start breaking when a new version of the test framework is introduced that runs the tests in a different order. Running a subset of the tests may produce different results than running all the tests or a different subset of the tests. Maintaining the tests is more cumbersome, because you need to worry about how other tests relate to particular tests and how each one affects state. Your tests may fail or pass for the wrong reasons; for example, a different test may have failed or passed before it, leaving the resources in an unknown state. Removing or changing some tests may affect the outcomes of others. It\u2019s difficult to name your tests appropriately because they test more than a single thing. There are a couple of common patterns that lead to poor test isolation: Flow testing\u2014A developer writes tests that must run in a specific order so that they can test flow execution, a big use case composed of many actions, or a full integration test where each test is one step in that full test. Laziness in cleanup\u2014A developer is lazy and doesn\u2019t return any state their test may have changed back to its original form, and other developers write tests that depend on this shortcoming knowingly or unknowingly. These problems can be solved in various manners: Flow testing\u2014Instead of writing flow-related tests in unit tests (long-running use cases, for example), consider using some sort of integration testing framework like FIT or FitNesse or QA-related products such as AutomatedQA and WinRunner. Laziness in cleanup\u2014If you\u2019re too lazy to clean up your database after testing, your filesystem after testing, or your memory-based objects, consider moving to a different profession. This isn\u2019t a job for you. ANTIPATTERN: HIDDEN TEST CALL This type of dependency can cause several problems: Running a subset of the tests may produce different results than running all the tests or a different subset of the tests. Maintaining the tests is more cumbersome, because you need to worry about how other tests relate to particular tests and how and when they call each other. Tests may fail or pass for the wrong reasons. For example, a different test may have failed, thus failing your test or not calling it at all. Or a different test may have left shared variables in an unknown state. Changing some tests may affect the outcome of others. It\u2019s difficult to clearly name tests that call other tests. How we got here: Flow testing \u2014A developer writes tests that need to run in a specific order so that they can test flow execution, a big use case composed of many actions, or a full integration test where each test is one step in that full test. Trying to remove duplication \u2014A developer tries to remove duplication in the tests by calling other tests (which have code they don\u2019t want the current test to repeat). Laziness about separating the tests \u2014A developer is lazy and doesn\u2019t take the time to create a separate test and refactor the code appropriately, instead taking a shortcut and calling a different test. Here are some solutions: Flow testing \u2014Instead of writing flow-related tests in unit tests (long-running use cases, for example), consider using an integration testing framework like FIT or FitNesse, or QA-related products such as AutomatedQA and WinRunner. Trying to remove duplication \u2014Don\u2019t ever remove duplication by calling another test from a test. You\u2019re preventing that test from relying on the setup and teardown methods in the class and are essentially running two tests in one (because the calling test has an assertion as does the test being called). Instead, refactor the code you don\u2019t want to write twice into a third method that both your test and the other test call. Laziness about separating the tests \u2014If you\u2019re too lazy to separate your tests, think of all the extra work you\u2019ll have to do if you don\u2019t separate them. Try to imagine a world where the current test you\u2019re writing is the only test in the system, so it can\u2019t rely on any other test. Please don't do things like this ANTIPATTERN: SHARED-STATE CORRUPTION This antipattern manifests in two major ways, independent of each other: Tests touch shared resources (either in memory or in external resources, such as databases, filesystems, and so on) without cleaning up or rolling back any changes they make to those resources. Tests don\u2019t set up the initial state they need before they start running, relying on the state to be there. This type of problem causes a number of symptoms: Running a subset of the tests may produce different results than running all the tests or a different subset of the tests. Maintaining the test is more cumbersome, because you may break the state for other tests, breaking those tests without realizing it. Your test may fail or pass for the wrong reason; a different test may have failed or passed before it, leaving the shared state in a problematic condition, or it may not have cleaned up after it ran. Changing some tests may affect the outcomes of other tests, seemingly randomly. Here is how we got here: Not setting up state before each test \u2014A developer doesn\u2019t set up the state required for the test or assumes the state was already correct. Using shared state \u2014A developer uses shared memory or external resources for more than one test without taking precautions. Using static instances in tests \u2014A developer sets static state that\u2019s used in other tests. Here are some solutions: Not setting up state before each test \u2014This is a mandatory practice when writing unit tests. Either use a setup method or call specific helper methods at the beginning of the test to ensure the state is what you expect it to be. Using shared state \u2014In many cases, you don\u2019t need to share state at all. Having separate instances of an object for each test is the safest way to go. Using static instances in tests \u2014You need to be careful how your tests manage static state. Be sure to clean up the static state using setup or teardown methods. Sometimes it\u2019s effective to use direct helper method calls to clearly reset the static state from within the test. If you\u2019re testing singletons, it\u2019s worth adding public or internal setters so your tests can reset them to a clean object instance. ANTIPATTERN: EXTERNAL SHARED-STATE CORRUPTION This antipattern is similar to the in-memory, shared-state corruption pattern, but it happens in integration-style testing: Tests touch shared resources (either in memory or in external resources, such as databases and filesystems) without cleaning up or rolling back any changes they make to those resources. Tests don\u2019t set up the initial state they need before they start running, relying on the state to be there. Avoiding multiple asserts on different concerns If only one assert fails, you never know if the other asserts in that same test method would have failed or not. You may think you know, but it\u2019s an assumption until you can prove it with a failing or passing assert. \u9019\u6703\u5c0e\u81f4\u4f60\u5224\u65b7\u932f\u8aa4\uff0c\u6709\u53ef\u80fd\u671d\u932f\u8aa4\u7684\u65b9\u5411\u4fee\u6b63\u3002 There are several ways to achieve the same goal: Create a separate test for each assert. Use parameterized tests. Wrap the assert call with try-catch. USING PARAMETERIZED TESTS [TestCase] WRAPPING WITH TRY-CATCH don't do thing like this Comparing objects \u9019\u662f\u4e00\u7a2e\u5408\u7406\u4f7f\u7528\u591a\u500bassert\u5728\u540c\u500btest\u88e1\u9762\u7684case\uff0c\u4e0d\u904e\u6709\u4e9b\u66f4\u597d\u7684\u505a\u6cd5\u3002 MAKING TESTS MORE MAINTAINABLE \u5efa\u4e00\u500b\u8cc7\u6599class\u4f86\u505a\u5b8c\u6574\u7684\u6bd4\u8f03\uff0c\u6ce8\u610f\u901a\u5e38\u9700\u8981override Equals() \u4f86\u9054\u6210\u9019\u4ef6\u4e8b\uff0c\u6216\u8a31\u4f60\u6703\u89ba\u5f97\u5f88\u7169\uff0c\u4e0d\u904e\u6709\u4e9b\u5de5\u5177\u53ef\u4ee5\u5e6b\u4f60\u81ea\u52d5\u7522\u751f\u9019\u4e9b\u65b9\u6cd5\uff0c\u4f8b\u5982 ReSharper \u3002 OVERRIDING TOSTRING() \u56e0\u70baNunit\u7684output\u662f\u547c\u53eb\u5169\u500b\u6bd4\u8f03object\u7684ToString()\uff0c\u76f4\u63a5override ToString() \u5728\u88e1\u9762\u5370\u51fa\u6240\u6709property\u3002 \u9019\u62db\u5e79\u66b4\u6f6e\u8036 Avoiding overspecification An overspecified test is one that contains assumptions about how a specific unit under test (production code) should implement its internal behavior, instead of only checking that the end behavior is correct. \u5c31\u6aa2\u67e5\u592a\u591a\u6771\u897f Here are ways unit tests are often overspecified: A test asserts purely internal state in an object under test. A test uses multiple mocks. A test uses stubs also as mocks. A test assumes specific order or exact string matches when it isn\u2019t required. SPECIFYING PURELY INTERNAL BEHAVIOR \u5167\u90e8\u7684\u72c0\u614b\u5be6\u4f5c\u7d93\u5e38\u53ef\u80fd\u88ab\u66f4\u52d5\uff0c\u4f46\u90a3\u4e26\u4e0d\u5f71\u97ff\u6700\u5f8c\u7d50\u679c\u3002 USING STUBS ALSO AS MOCKS \u5e38\u898b\u7684\u932f\u8aa4\u662f\u53bb\u6aa2\u67e5\u67d0\u500bmethod\u662f\u5426\u88ab\u547c\u53eb\u904e\uff0c\u4f46\u4ed6\u6709\u6c92\u6709\u88ab\u547c\u53eb\u6839\u672c\u4e0d\u5f71\u97ff\u6700\u5f8c\u7684\u7d50\u679c\u3002 ASSUMING AN ORDER OR EXACT MATCH WHEN IT\u2019S NOT NEEDED \u7d93\u5e38\u554f\u81ea\u5df1\uff0c\u662f\u5426\u771f\u7684\u8981\u6aa2\u67e5\u6574\u500bobject\u5167\u5bb9\uff1f\u662f\u5426\u53ea\u6aa2\u67e5\u5e7e\u500bproperties\u5c31\u597d?\u6216\u662f\u5426\u53ef\u4ee5\u4f7f\u7528 string.Contains() \u800c\u4e0d\u662f string.Equals() \uff1f Writing readable tests Without readability the tests you write are almost meaningless. Readability is the connecting thread between the person who wrote the test and the poor soul who has to read it a few months later. Tests are stories you tell the next generation of programmers on a project. They allow a developer to see exactly what an application is made of and where it started. There are several facets to readability: Naming unit tests Naming variables Creating good assert messages Separating asserts from actions Naming unit tests Naming standards are important because they give you comfortable rules and templates that outline what you should explain about the test. The test name has three parts: The name of the method being tested \u2014This is essential, so that you can easily see where the tested logic is. Having this as the first part of the test name allows easy navigation and as-you-type intellisense (if your IDE supports it) in the test class. The scenario under which it\u2019s being tested \u2014This part gives you the \u201cwith\u201d part of the name: \u201cWhen I call method X with a null value , then it should do Y.\u201d The expected behavior when the scenario is invoked \u2014This part specifies in plain English what the method should do or return, or how it should behave, based on the current scenario: \u201cWhen I call method X with a null value, then it should do Y .\u201d A common way to write these three parts of the test name is to separate them with underscores, like this: MethodUnderTest_Scenario_Behavior() . Naming variables \u6709\u6642\u5019\u9019\u500b\u6bd4production code\u7684naming\u66f4\u91cd\u8981\uff0c\u4f60\u5fc5\u9808\u7528\u6700\u5feb\u7684\u901f\u5ea6\u8b93\u8b80\u6e2c\u8a66\u7684\u4eba\u77e5\u9053\u4f60\u60f3\u8b49\u660e\u751a\u9ebc\u3002\u4f86\u770b\u4e00\u500b\u4f8b\u5b50\uff1a An unreadable test name [Test] public void BadlyNamedTest() { LogAnalyzer log = new LogAnalyzer(); int result= log.GetLineCount(\"abc.txt\"); Assert.AreEqual(-100,result); } -100 \u5230\u5e95\u662f\u5e79\u561b\u7528\u7684\uff0c\u9019\u6642\u5019\u4f60\u53ea\u80fd\u8166\u88dc\uff0c\u6216\u8a31\u4ed6\u662f\u4f8b\u5916?\uff0c\u4f60\u6709\u4ee5\u4e0b\u5169\u7a2e\u8f03\u597d\u7684\u8655\u7406\u65b9\u5f0f\uff1a You can change the design of the API to throw an exception instead of returning -100 (assuming -100 is some sort of illegal result value). You can compare the result to some sort of constant or aptly named variable, as shown in the following listing. Asserting yourself with meaning Avoid writing your own custom assert messages. Please. This section is for those who find they absolutely have to write a custom assert message, because the test really needs it, and you can\u2019t find a way to make the test clearer without it. \u5bebcustom assert message\u5c31\u50cf\u5bebcustom exception message\u4e00\u6a23\u56f0\u96e3\u3002 There are several key points to remember when writing a message for an assert clause: Don\u2019t repeat what the built-in test framework outputs to the console. Don\u2019t repeat what the test name explains. If you don\u2019t have anything good to say, don\u2019t say anything. Write what should have happened or what failed to happen, and possibly mention when it should have happened. Separating asserts from actions \u597d Separating the assert from the thing asserted, improving readability [Test] public void BadAssertMessage() { //some code here int result= log.GetLineCount(\"abc.txt\"); Assert.AreEqual(COULD_NOT_READ_FILE,result); } \u4e0d\u597d Not separating the assert from the thing asserted, making reading difficult [Test] public void BadAssertMessage() { //some code here Assert.AreEqual(COULD_NOT_READ_FILE,log.GetLineCount(\"abc.txt\")); } Setting up and tearing down \u4f7f\u7528setup\u6216teardown\u53ef\u80fd\u6703\u8b93\u6e2c\u8a66\u8b8a\u5f97\u96e3\u7406\u89e3\uff0c\u8209\u4f8b\u5728setup\u88e1\u9762\u4f7f\u7528mocks\u6216stubs\u6709\u53ef\u80fd\u8b93\u5225\u4eba\u4e0d\u77e5\u9053\u9019\u6771\u897f\u7684\u5b58\u5728\u3002\u6700\u597d\u662f\u5beb\u4e00\u500bhelper method\uff0c\u5728\u6bcf\u500b\u4f7f\u7528\u5230\u7684\u6e2c\u8a66\u88e1\u9762\u547c\u53eb\u4ed6\uff0c\u9019\u6a23\u8b80\u6e2c\u8a66\u7684\u4eba\u4e0d\u9700\u8981\u770b\u591a\u500b\u5730\u65b9\u3002 TIP I\u2019ve several times written full test classes that didn\u2019t have a setup method, only helper methods being called from each test, for the sake of maintainability. The classes were still readable and maintainable. Summary \u963f\u5c31\u4e09\u672c\u67f1\u8b1b\u4e00\u904d Chapter 9: Integrating unit testing into the organization","title":"Art of Unit Testing"},{"location":"Finished/Art%20of%20Unit%20Testing/#art-of-unit-testing","text":"","title":"Art of Unit Testing"},{"location":"Finished/Art%20of%20Unit%20Testing/#about-this-book","text":"\u70ba\u4ec0\u9ebc\u5beb\u9019\u672c\u66f8 To truly learn something, teach it. \u6c38\u9060\u7684\u8a5b\u5492 The curse is that the more experience you have, the more stupid you feel. \u7b2c\u4e8c\u7248\u5c0dUnit test\u7684\u65b0\u9ad4\u609f There are parts of the first edition that today I do not agree with\u2014for example, that a unit refers to a method. That\u2019s not true at all. A unit is a unit of work, as I discuss in chapter 1 of this second edition. It can be as small as a method, or as big as several classes (possibly assemblies)","title":"About this book"},{"location":"Finished/Art%20of%20Unit%20Testing/#whats-new-in-the-second-edition","text":"I no longer use RhinoMocks. Stay away from it. It is dead. At least for now. I use NSubstitute for examples of Isolation Framework Basics, and I also recommend FakeItEasy. I am still not crazy about MOQ, for reasons detailed in chapter 6. \u4e0d\u8981\u518d\u4f7f\u7528property setter\u4f86\u505aDI There are plenty of design changes in the code I show in the book. Mostly I stopped using property setters and am mostly using constructor injection.","title":"What\u2019s new in the second edition"},{"location":"Finished/Art%20of%20Unit%20Testing/#who-should-read-this-book","text":"The book is for anyone who writes code and is interested in learning best practices for unit testing. All the examples are written in C# using Visual Studio, so .NET developers will find the examples particularly useful. But the lessons I teach apply equally to most, if not all, object-oriented and statically typed languages (VB.NET, Java, and C++, to name a few). If you\u2019re an architect, developer, team lead, QA engineer (who writes code), or novice programmer, this book should suit you well.","title":"Who should read this book"},{"location":"Finished/Art%20of%20Unit%20Testing/#roadmap","text":"\u5982\u679c\u8981\u958b\u5206\u4eab\u6703\u53ef\u4ee5\u56de\u982d\u770b","title":"Roadmap"},{"location":"Finished/Art%20of%20Unit%20Testing/#chapter-1-the-basics-of-unit-testing","text":"unit test\u5b9a\u7fa9\u9032\u5316\u8ad6","title":"Chapter 1: The basics of unit testing"},{"location":"Finished/Art%20of%20Unit%20Testing/#defining-unit-testing-step-by-step","text":"Wiki\u4e0a\u5c0d\u65bcunit test\u7684\u7d93\u5178\u5b9a\u7fa9\uff1a DEFINITION 1.0 A unit test is a piece of a code (usually a method) that invokes another piece of code and checks the correctness of some assumptions afterward. If the assumptions turn out to be wrong, the unit test has failed. A unit is a method or function. \u4f5c\u8005\u539f\u672c\u8a8d\u70ba\u5c31\u6280\u8853\u4e0a\u4f86\u8aaa\u9019\u500b\u5b9a\u7fa9\u662f\u6b63\u78ba\u7684 Yes, feel. There is no science in this book. Just art. \u4f46\u662f\u904e\u4e86\u5e7e\u5e74\u4e4b\u5f8c\u4f5c\u8005\u8b8a\u5fc3\u4e86 To me, a unit stands for \u201cunit of work\u201d or a \u201cuse case\u201d inside the system. \u4e00\u500b\u55ae\u5143\u7684\u5de5\u4f5c(? Definition A unit of work is the sum of actions that take place between the invocation of a public method in the system and a single noticeable end result by a test of that system. A noticeable end result can be observed without looking at the internal state of the system and only through its public APIs and behavior. An end result is any of the following: The invoked public method returns a value (a function that\u2019s not void). There\u2019s a noticeable change to the state or behavior of the system before and after invocation that can be determined without interrogating private state. (Examples: the system can log in a previously nonexistent user, or the system\u2019s properties change if the system is a state machine.) There\u2019s a callout to a third-party system over which the test has no control, and that third-party system doesn\u2019t return any value, or any return value from that system is ignored. (Example: calling a third-party logging system that was not written by you and you don\u2019t have the source to.) \u55ae\u5143\u6e2c\u8a66\u4e2d\u7684\"\u55ae\u5143\"\u4e0d\u518d\u5c40\u9650\u65bc\u4e00\u500bclass\u88e1\u7684\u4e00\u500bmethod This idea of a unit of work means, to me, that a unit can span as little as a single method and up to multiple classes and functions to achieve its purpose. \u4f60\u4e0d\u8a72\u523b\u610f\u6700\u5c0f\u5316\u4f60\u7684\u6e2c\u8a66\uff0c\u5982\u679c\u4f60\u7684\u6e2c\u8a66\u5927\u4e00\u9ede\u537b\u66f4\u6709\u53ef\u8b80\u6027\u90a3\u4f60\u7684\u6e2c\u8a66\u5c31\u66f4\u597d\u7dad\u8b77\u3002 If you try to minimize the size of a unit of work, you end up faking things down the line that aren\u2019t really end results to the user of a public API but instead are just train stops on the way to the main station. \u66f4\u65b0\u5b9a\u7fa9 UPDATED DEFINITION 1.1 A unit test is a piece of code that invokes a unit of work and checks one specific end result of that unit of work. If the assumptions on the end result turn out to be wrong, the unit test has failed. A unit test\u2019s scope can span as little as a method or as much as multiple classes. UI\u4e0a\u7684\u4e00\u9846\u6309\u9215\uff0c\u5b83\u4e5f\u5f88\u63a5\u8fd1\u5178\u578b\u7684 \u55ae\u5143\u6e2c\u8a66 \u5b9a\u7fa9\uff0c\u4f46\u5b83\u4e26\u4e0d\u662f\u500b \u597d\u7684 \u55ae\u5143\u6e2c\u8a66 No matter what programming language you\u2019re using, one of the most difficult aspects of defining a unit test is defining what\u2019s meant by a \u201cgood\u201d one. \u5982\u679c\u4f60\u4e0d\u77e5\u9053\u600e\u9ebc\u5beb\u4e00\u500b\u597d\u7684\u55ae\u5143\u6e2c\u8a66\u90a3\u9ebc\u4e0d\u5982\u4e0d\u5beb\uff0c\u4e0d\u8981\u6d6a\u8cbb\u4f60\u7684\u6642\u9593\u56e0\u70ba\u4f60\u5f88\u96e3\u7dad\u8b77\u5b83 \u8ac7\u6e2c\u8a66\u7684\u91cd\u8981\u6027 How do you make sure that the code works today?","title":"Defining unit testing, step by step"},{"location":"Finished/Art%20of%20Unit%20Testing/#properties-of-a-good-unit-test","text":"A unit test should have the following properties: It should be automated and repeatable. It should be easy to implement. It should be relevant tomorrow. Anyone should be able to run it at the push of a button. It should run quickly. It should be consistent in its results (it always returns the same result if you don\u2019t change anything between runs). It should have full control of the unit under test. It should be fully isolated (runs independently of other tests). When it fails, it should be easy to detect what was expected and determine how to pinpoint the problem. \u5982\u679c\u4ee5\u4e0b\u4efb\u4f55\u554f\u984c\u4f60\u7684\u56de\u7b54\u662f\u4e0d\uff0c\u90a3\u4f60\u5f88\u6709\u53ef\u80fd\u662f\u5728\u505a\u6574\u5408\u6e2c\u8a66 Can I run and get results from a unit test I wrote two weeks or months or years ago? Can any member of my team run and get results from unit tests I wrote two months ago? Can I run all the unit tests I\u2019ve written in no more than a few minutes? Can I run all the unit tests I\u2019ve written at the push of a button? Can I write a basic test in no more than a few minutes? \u6574\u5408\u6e2c\u8a66\u548c\u55ae\u5143\u6e2c\u8a66\u4e00\u6a23\u91cd\u8981\uff0c\u4f46\u662f\u6709\u7f3a\u9ede","title":"Properties of a good unit test"},{"location":"Finished/Art%20of%20Unit%20Testing/#integration-tests","text":"\u4e0d\u662f\"\u597d\"\u7684\u55ae\u5143\u6e2c\u8a66\u90fd\u6b78\u985e\u7d66\u6574\u5408\u6e2c\u8a66\u5c31\u5c0d\u60f9 I consider integration tests as any tests that aren\u2019t fast and consistent and that use one or more real dependencies of the units under test. For example, if the test uses the real system time, the real filesystem, or a real database, it has stepped into the realm of integration testing. DateTime.Now \u9019\u662f\u500b\u7d93\u5178\u7684\u4f8b\u5b50\uff0c\u56e0\u70ba\u4f60\u6bcf\u6b21\u8dd1\u5167\u5bb9\u90fd\u4e0d\u4e00\u6a23\u6240\u4ee5\u9019\u500b\u6e2c\u8a66\u4e26\u4e0d consistent \u6574\u5408\u6e2c\u8a66\u4e0d\u662f\u4e0d\u597d\uff0c\u4ed6\u8207\u55ae\u5143\u6e2c\u8a66\u540c\u7b49\u91cd\u8981\uff0c\u53ea\u662f\u5169\u8005\u61c9\u8a72\u5206\u958b \u6574\u5408\u6e2c\u8a66\u7684\u4e00\u4e9b\u7f3a\u9ede\uff1a \u6162 \u5916\u90e8\u4f9d\u8cf4\u8b93\u4f60\u6bd4\u8f03\u96e3\u6d88\u9664\u6e2c\u8a66\u6b98\u7559\u7684\u5783\u573e(ex:database) \u4e00\u6b21\u6e2c\u592a\u591a\u6771\u897f\uff0c\u58de\u6389\u4e86\u4f60\u5f88\u96e3\u627e\u662f\u54ea\u908a\u51fa\u932f DEFINITION Integration testing is testing a unit of work without having full control over all of it and using one or more of its real dependencies, such as time, network, database, threads, random number generators, and so on. \u4e0d\u81ea\u52d5\u5316\u6574\u5408\u6e2c\u8a66\u7684\u7f3a\u9ede(\u963f\u4e0d\u5c31\u624b\u52d5\u6e2c\u8a66...)\uff1a \u6162 \u7f3a\u5c11 regression test \uff0c\u4e0d\u6562\u6539\u52d5 legacy code \u53ef\u80fd\u9700\u8981\u5148\u8a2d\u5b9a\u6a5f\u5668\u74b0\u5883(configuration)\u624d\u80fd\u8dd1\uff0c\u5c31\u6703 \u4e0d\u60f3\u8dd1 \u6e2c\u8a66\u7684\u7bc4\u570d\u592a\u5927\u5c0e\u81f4\u5f88\u591a\u5c0f\u5730\u65b9\u6c92\u6e2c\u5230 \u6c92\u8fa6\u6cd5\u5f88\u5feb\u5beb\u51fa\u4f86\uff0c\u6709\u53ef\u80fd\u76f8\u4f9d\u592a\u591a\uff0c\u5f88\u96e3\u5beb\u6210\u81ea\u52d5\u6e2c\u8a66\uff1b\u5982\u679c\u4e0d\u5beb\u6210\u81ea\u52d5\u4f60\u53c8\u6703\u5931\u53bb\u81ea\u52d5\u5316\u7684\u512a\u9ede \u4e0d\u904e\u5c0d\u65bc \u5f88\u5feb \u751f\u51fa\u55ae\u5143\u6e2c\u8a66\u6709\u4ee5\u4e0b\u8b66\u544a Small warning: even experienced unit testers can find that it may take 30 minutes or more to figure out how to write the very first unit test against an object model they\u2019ve never unit tested before. This is part of the work, and is expected. The second and subsequent tests on that object model should be very easy to accomplish. \u5b9a\u7fa9regression\uff1a DEFINITION A regression is one or more units of work that once worked and now don\u2019t. \u5b9a\u7fa9legacy code\uff1a DEFINITION Legacy code is defined by Wikipedia as \u201csource code that relates to a no-longer supported or manufactured operating system or other computer technology,\u201d but many shops refer to any older version of the application currently under maintenance as legacy code. It often refers to code that\u2019s hard to work with, hard to test, and usually even hard to read. \u672c\u66f8\u4f7f\u7528\u907a~~\u7559\u4ee3\u78bc\u4e4b\u7236~~\u7684\u5b9a\u7fa9 Many people like to define legacy code as \u201ccode that has no tests.\u201d Working Effectively with Legacy Code by Michael Feathers (Prentice Hall, 2004) uses this as an official definition of legacy code, and it\u2019s a definition to be considered while reading this book.","title":"Integration tests"},{"location":"Finished/Art%20of%20Unit%20Testing/#what-makes-unit-tests-good","text":"\u597d\u9577\u4e00\u6bb5\u6545\u4e8b\u7d42\u65bc\u8b1b\u5b8c\u4e86\u7d42\u65bc\u8981\u505a\u6700\u5f8c\u7684\u5b9a\u7fa9\u4e86(once and for all)\u3002 UPDATED AND FINAL DEFINITION 1.2 A unit test is an automated piece of code that invokes the unit of work being tested, and then checks some assumptions about a single end result of that unit. A unit test is almost always written using a unit testing framework. It can be written easily and runs quickly. It\u2019s trustworthy, readable, and maintainable. It\u2019s consistent in its results as long as production code hasn\u2019t changed. \u61f6\u4eba\u5305\uff1a 94\u8981\u81ea\u52d5 \u53ea\u6e2c\u4e00\u500b\u7d50\u679c \u597d\u5beb\u3001\u8dd1\u5f97\u5feb \u53ea\u8981\u7522\u54c1\u6c92\u52d5\uff0c\u6e2c\u8a66\u7d50\u679c\u61c9\u8a72\u8981\u4e00\u81f4 \u6e2c\u8a66\u4e0d\u4e00\u5b9a\u53ea\u91dd\u5c0d Control flow code \uff0c\u4f8b\u5982 Property \uff0c\u901a\u5e38\u4ed6\u4e0d\u5305\u542b\u908f\u8f2f\u4f46\u662f\u4ed6\u6709\u53ef\u80fd\u662f unit of work \u7684\u4e00\u74b0\u3002 DEFINITION Control flow code is any piece of code that has some sort of logic in it, small as it may be. It has one or more of the following: an if statement, a loop, switch, or case statement, calculations, or any other type of decisionmaking code.","title":"What makes unit tests good"},{"location":"Finished/Art%20of%20Unit%20Testing/#a-simple-unit-test-example","text":"\u6559\u4f60\u53e4\u65e9\u6c92\u6709framework\u7684\u6642\u5019\u81ea\u52d5\u6e2c\u8a66\u53ef\u80fd\u6703\u9577\u5565\u6a23\u3002","title":"A simple unit test example"},{"location":"Finished/Art%20of%20Unit%20Testing/#test-driven-development","text":"TDD\u7a2e\u985e\u5f88\u591a\uff0c\u9019\u88e1\u8b1b\u7684\u662fTest Driven Development\uff0c\u4e0d\u5305\u542bDesign\u3002 Test Driven Development: the idea of writing your code in a test first manner. You may already have an existing design in place. \u9019\u672c\u66f8\u4e0d\u6703\u6559\u4f60TDD\uff0cTDD\u6709\u8a31\u591a\u597d\u8655\uff0c\u4f46\u662f\u6709\u4ee3\u50f9\u7684(\u8981\u5b78)\u3002 Test-driven development\u2014 a bird\u2019s-eye view. Notice the spiral nature of the process: write test, write code, refactor, write next test. It shows the incremental nature of TDD: small steps lead to a quality end result. TDD\u8ddf\u5beb\u4e00\u500b\u597d\u6e2c\u8a66\u662f\u6c92\u95dc\u4fc2\u7684\uff0c\u4f7f\u7528TDD\u4e0d\u80fd\u4fdd\u8b49\u4f60\u7684\u6e2c\u8a66\u597d\u8b80\u597d\u7dad\u8b77\u3002 TDD\u6b65\u9a5f\uff1a Write a failing test to prove code or functionality is missing from the end product. Make the test pass by writing production code that meets the expectations of your test. Refactor your code. \u91cd\u69cb\u53ef\u4ee5\u767c\u751f\u5728\u4e00\u5806\u6e2c\u8a66\u4e4b\u5f8c\u6216\u662f\u5beb\u4e00\u500b\u99ac\u4e0a\u91cd\u69cb\uff0c\u5b83\u7684\u76ee\u7684\u662f\u8b93\u4f60\u7684\u7a0b\u5f0f\u66f4\u597d\u8b80\u66f4\u597d\u7dad\u8b77\u3002 DEFINITION Refactoring means changing a piece of code without changing its functionality. If you\u2019ve ever renamed a method, you\u2019ve done refactoring. If you\u2019ve ever split a large method into multiple smaller method calls, you\u2019ve refactored your code. The code still does the same thing, but it becomes easier to maintain, read, debug, and change. TDD\u7528\u7684\u597d\uff0c\u7a0b\u5f0f\u54c1\u8cea\u4e0a\u5347\u3001bug\u6e1b\u5c11\u3001\u5c0dcode\u66f4\u6709\u4fe1\u5fc3\u3001\u627ebug\u7684\u6642\u9593\u8b8a\u5c11\u3001code\u7684\u8a2d\u8a08\u66f4\u597d\u548c\u8b93manager\u958b\u85b0\uff1b\u53cd\u4e4b\u7528\u5f97\u4e0d\u597d\uff0c\u6703\u8b93\u6642\u7a0bdelay\u3001\u8b93\u4f60\u66f4\u6c92\u52d5\u529b\u3001\u7a0b\u5f0f\u54c1\u8cea\u4e0b\u964d\uff0c\u662f\u4e00\u628a\u96d9\u9762\u5203\u3002 TDD\u6700\u5927\u7684\u597d\u8655\u4e4b\u4e00\uff1a\u6e2c\u8a66\u6e2c\u8a66\u672c\u8eab\uff0c\u56e0\u70ba\u4f60\u89aa\u773c\u770b\u904e\u4ed6\u7d05\u71c8\u518d\u7da0\u71c8\uff0c\u8b93\u4f60\u5c0d\u6e2c\u8a66\u672c\u8eab\u66f4\u6709\u81ea\u4fe1\uff0c\u6240\u4ee5\u4f60\u70ba\u4e86\"\u4ee5\u9632\u842c\u4e00\"\u800c\u505a\u7684\u6e2c\u8a66\u6703\u8b8a\u5c11\u3002","title":"Test-driven development"},{"location":"Finished/Art%20of%20Unit%20Testing/#the-three-core-skills-of-successful-tdd","text":"~~\u963f\u4e0d\u662f\u8aaa\u4e0d\u6559\u9084\u4e00\u76f4\u8b1b~~ To be successful in test-driven development you need three different skill sets: knowing how to write good tests, writing them test-first, and designing them well. \u4ee5\u4e0b\u958b\u59cb\u50b3\u6559 Just because you write your tests first doesn\u2019t mean they\u2019re maintainable, readable, or trustworthy. \u6240\u4ee5\u624d\u6709\u9019\u672c\u66f8 Just because you write readable, maintainable tests doesn\u2019t mean you get the same benefitsas when writing them test-first. \u63a8\u85a6Kent Beck\u2019s Test-Driven Development: by Example (Addison-Wesley Professional, 2002). Just because you write your tests first, and they\u2019re readable and maintainable, doesn\u2019tmean you\u2019ll end up with a well-designed system. \u63a8\u85a6 Growing Object-Oriented Software, Guided by Tests by Steve Freeman and Nat Pryce (Addison-Wesley Professional, 2009) and Clean Code by Robert C. Martin (Prentice Hall, 2008) \u7c21\u55ae\u4f86\u8aaa\u4f60\u8981\u6703\u597d\u7684TDD\u4f60~~\u4ed6\u5abd~~\u9084\u8981\u518d\u770b\u5169\u672c\u66f8 \u5efa\u8b70\u4e00\u6b21\u5c08\u6ce8\u5b78\u7fd2\u4e00\u500b\u6280\u80fd \u5ffd\u7565\u5176\u4ed6\u6280\u80fd\u5c31\u597d\uff0c\u4e0d\u7136\u4f60\u6703\u5f88\u5bb9\u6613\u653e\u68c4(the wall is too high to climb.)","title":"The three core skills of successful TDD"},{"location":"Finished/Art%20of%20Unit%20Testing/#summary","text":"\u597d\u6e2c\u8a66\u61f6\u4eba\u5305\uff1a It\u2019s an automated piece of code that invokes a different method and then checks some assumptions on the logical behavior of that method or class. It\u2019s written using a unit testing framework. It can be written easily. It runs quickly. It can be executed repeatedly by anyone on the development team. \u4f60\u4e86\u89e3\u4e86\u6574\u5408\u6e2c\u8a66\u8207\u55ae\u5143\u6e2c\u8a66\u7684\u5340\u5225\uff0c\u7576\u4f60\u9762\u5c0d\u554f\u984c\u7684\u6642\u5019\u9700\u8981\u505a\u6289\u64c7\u662f\u6709\u54ea\u7a2e\u6e2c\u8a66\u624d\u80fd\u89e3\u6c7a\u4f60\u7684\u554f\u984c\u3002 \u4f60\u4e86\u89e3TDD\u7684\u4e00\u4e9b\u597d\u8655\uff0c\u4f46\u5728\u9019\u4e4b\u524d\u4f60\u8981\u5148\u6703\u5beb\u597d\u7684\u6e2c\u8a66\u3002","title":"Summary"},{"location":"Finished/Art%20of%20Unit%20Testing/#chapter-2-a-first-unit-test","text":"Nunit\u767b\u5834","title":"Chapter 2: A first unit test"},{"location":"Finished/Art%20of%20Unit%20Testing/#frameworks-for-unit-testing","text":"Manual tests suck. \u6c92\u6709\u9019\u6771\u897f\u4f60\u5e73\u5e38\u662f\u600e\u9ebc\u6e2c\u4f60\u7684code\u7684? Unit testing practice How the framework helps Write tests easily and in a structured manner. Framework supplies the developer with a class libarary that contains - Base classes or interfaces to inherit - Attributes to place in your code to note which of your methods are tests - Assertion classes that have special assertion methods you invoke to verify your code Execute one or all of the unit tests. Framework provides a test runner (a console or GUI tool) that - Identifies tests in your code - Runs tests automatically - Indicates status while running - Can be automated by the command line Review the results of the test runs. The test runners will usually provide information such as - How many tests ran - How many tests didn\u2019t run - How many tests failed - Which tests failed - The reason tests failed - The ASSERT message you wrote - The code location that failed - Possibly a full stack trace of any exceptions that caused the test to fail, and will let you go to the various method calls inside the call stack NOTE Using a unit testing framework doesn\u2019t ensure that the tests you write are readable, maintainable, or trustworthy or that they cover all the logic you\u2019d like to test.","title":"Frameworks for unit testing"},{"location":"Finished/Art%20of%20Unit%20Testing/#introducing-the-logan-project","text":"\u5f9e\u7c21\u55ae\u958b\u59cb Here\u2019s the scenario. Your company has many internal products it uses to monitor its applications at customer sites. All these products write log files and place them in a special directory. The log files are written in a proprietary format that your company has come up with that can\u2019t be parsed by any existing third-party tools. You\u2019re tasked with building a product, LogAn, that can analyze these log files and find special cases and events in them. When it finds these cases and events, it should alert the appropriate parties.","title":"Introducing the LogAn project"},{"location":"Finished/Art%20of%20Unit%20Testing/#first-steps-with-nunit","text":"\u5148\u5b89\u88ddR\u5e79~ NUnit3\u4e0d\u77e5\u9053\u9084\u6709\u6c92\u6709GUI public class LogAnalyzer { public bool IsValidLogFileName(string fileName) { if(fileName.EndsWith(\".SLF\")) { return false; } return true; } } Add a new class library project to the solution, which will contain your test classes. Name it LogAn.UnitTests (assuming the original project name is LogAn.csproj). To that library, add a new class that will hold your test methods. Name it LogAnalyzerTests (assuming that your class under test is named LogAnalyzer.cs). Add a new method to the preceding test case named IsValidLogFileName_BadExtension_ReturnsFalse(). Add a reference to the project under test for the new testing project. Basic rules for placing and naming tests Object to be tested Object to create on the testing side Project Create a test project named [ProjectUnderTest].UnitTests . Class For a class located in ProjectUnderTest, create a class with the name [ClassName] Tests. Unit of work (a method, or a logical grouping of several methods, or several classes) For each unit of work, create a test method with the following name: [UnitOfWorkName]_[ScenarioUnderTest]_[ExpectedBehavior] . The unit of work name could be as simple as a method name (if that\u2019s the whole unit of work) or more abstract if it\u2019s a use case that encompasses multiple methods or classes such as UserLogin or RemoveUser or Startup. You might feel more comfortable starting with method names and moving to more abstract names later. Just make sure that if these are method names, those methods are public, or they don\u2019t really represent the start of a unit of work. \u53cd\u6b63\u91cd\u9ede\u4f60\u4e5f\u77e5\u9053\uff1a\u597d\u627e \u4f60\u7684\u6e2c\u8a66\u61c9\u8a72\u76f4\u63a5\u5beb\u5728production code project\u88e1\u9084\u662f\u53e6\u958btest\u5c08\u7528project\u5462\uff1f\u5206\u958b\u53ef\u4ee5\u8b93\u4f60\u7684production code\u4e7e\u6de8\u4e00\u9ede\u597d\u8b80\u4e00\u9ede\uff0c\u4f46\u5beb\u5728production code\u65c1\u908a\u53ef\u4ee5\u5728deployment\u4e4b\u5f8c\u505ahealth test\uff0cYou can actually have your cake and eat. \u4f86\u4eba\uff0c\u4e0aAttribute [TestFixture] public class LogAnalyzerTests { [Test] public void IsValidFileName_BadExtension_ReturnsFalse() { } } The NUnit runner needs at least two attributes to know what to run: The [TestFixture] attribute that denotes a class that holds automated NUnit tests. (If you replace the word Fixture with Class, it makes much more sense, but only as a mental exercise. It won\u2019t compile if you literally change the code that way.) Put this attribute on top of your new LogAnalyzerTests class. The [Test] attribute that can be put on a method to denote it as an automated test to be invoked. Put this attribute on your new test method.","title":"First steps with NUnit"},{"location":"Finished/Art%20of%20Unit%20Testing/#writing-your-first-test","text":"How do you test your code? A unit test usually comprises three main actions: 1. Arrange objects, creating and setting them up as necessary. 2. Act on an object. 3. Assert that something is as expected. [Test] public void IsValidFileName_BadExtension_ReturnsFalse() { LogAnalyzer analyzer = new LogAnalyzer(); bool result = analyzer.IsValidLogFileName(\"filewithbadextension.foo\"); Assert.False(result); }","title":"Writing your first test"},{"location":"Finished/Art%20of%20Unit%20Testing/#the-assert-class","text":"Assert.AreEqual(expectedObject, actualObject, message); Assert.AreEqual(2, 1+1, \"Math is broken\"); Assert.AreSame(expectedObject, actualObject, message); Assert.AreSame(int.Parse(\"1\"),int.Parse(\"1\"), \"this test should fail\"). \u53eb\u4f60\u4e0d\u8981\u7528message\u8fa3\uff1a Also note that all the assert methods take a last parameter of type \u201cstring,\u201d which gets displayed in addition to the framework output, in case of a test failure. Please, never, ever , use this parameter (it\u2019s always optional to use). Just make sure your test name explains what\u2019s supposed to happen. Often, people write the trivially obvious things like \u201ctest failed\u201d or \u201cexpected x instead of y,\u201d which the framework already provides. Much like comments in code, if you have to use this parameter, your method name should be clearer. \u958b\u8dd1\u56c9 There are at least four ways you can run this test: Using the NUnit GUI Using Visual Studio 2012 Test Runner with an NUnit Runner Extension, called the NUnit Test Adapter in the NUget Gallery Using the ReSharper test runner (a well-known commercial plug-in for VS) Using the TestDriven.NET test runner (another well-known commercial plug-in for VS) \u597d\u4e86\u4f60\u770b\u5230\u7d05\u71c8\u4e86\uff0c\u4fee\u6210\u7da0\u71c8\u5427 if(!fileName.EndsWith(\".SLF\")) { return false; } You\u2019ve seen that bad extensions are flagged as such, but who\u2019s to say that good ones do get approved by this little method? If you were doing this in a test-driven way, a missing test here would have been obvious, but because you\u2019re writing the tests after the code, you have to come up with good test ideas that will cover all the paths. [Test] public void IsValidLogFileName_GoodExtensionLowercase_ReturnsTrue() { LogAnalyzer analyzer = new LogAnalyzer(); bool result = analyzer .IsValidLogFileName(\"filewithgoodextension.slf\"); Assert.True(result); } [Test] public void IsValidLogFileName_GoodExtensionUppercase_ReturnsTrue() { LogAnalyzer analyzer = new LogAnalyzer(); bool result = analyzer .IsValidLogFileName(\"filewithgoodextension.SLF\"); Assert.True(result); } \u4fee\u6b63 public bool IsValidLogFileName(string fileName) { if (!fileName.EndsWith(\".SLF\", StringComparison.CurrentCultureIgnoreCase)) { return false; } return true; } TDD\u795e\u6559\u7bb4\u8a00 Red-Green-Refacto The red/green concept is prevalent throughout the unit testing world and especially in test-driven development. Its mantra is \u201cRed-Green-Refactor,\u201d meaning that you start with a failing test, then pass it, and then make your code readable and more maintainable. \u5927\u591a\u7684framework\u5728\u8655\u7406\u4efb\u4f55\u672a\u9810\u671f\u7684\u4f8b\u5916\u4e5f\u6703\u4f7f\u6e2c\u8a66\u505c\u6b62\u4e26\u5931\u6557\u4eae\u7d05\u71c8 Tests can also fail if an unexpected exception suddenly gets thrown. A test that stops because of an unexpected exception will be considered a failed test for most test frameworks, if not all. It\u2019s part of the point\u2014sometimes you have bugs in the form of an exception you didn\u2019t expect. \u95dc\u65bc Test code styling \u6e2c\u8a66\u540d\u7a31\u53ef\u4ee5\u8d85\u9577\uff0c\u53ef\u8b80\u6027\u6bd4\u8f03\u91cd\u8981 \u7a7a\u884c\u5340\u52063A \u76e1\u91cf\u5340\u5206act\u548cassert \u8001\u8a71\u4e00\u53e5\uff1a Readability is one of the most important aspects when writing a test.","title":"The Assert class"},{"location":"Finished/Art%20of%20Unit%20Testing/#refactoring-to-parameterized-tests","text":"Replace the [Test] attribute with the [TestCase] attribute. Extract all the hardcoded values the test is using into parameters for the test method. Move the values you had before into the braces of the [TestCase(param1, param2,..)] attribute. Rename this test method to a more generic name. Add a [TestCase(..)] attribute on this same test method for each of the tests you want to merge into this test method, using the other test\u2019s values. Remove the other tests so you\u2019re left with just one test method that has multiple [TestCase] attributes. [TestCase(\"filewithgoodextension.SLF\")] [TestCase(\"filewithgoodextension.slf\")] public void IsValidLogFileName_ValidExtensions_ReturnsTrue(string file) { LogAnalyzer analyzer = new LogAnalyzer(); bool result = analyzer.IsValidLogFileName(file); Assert.True(result); } \u5982\u679c\u8981\u52a0\u4e0a\u6703\u5931\u6557\u7684case\u5462? [TestCase(\"filewithgoodextension.SLF\",true)] [TestCase(\"filewithgoodextension.slf\",true)] [TestCase(\"filewithbadextension.foo\",false)] public void IsValidLogFileName_VariousExtensions_ChecksThem(string file, bool expected) { LogAnalyzer analyzer = new LogAnalyzer(); bool result = analyzer.IsValidLogFileName(file); Assert.AreEqual(expected,result); } \u7f3a\u9ede\u5927\u6982\u5fc3\u77e5\u809a\u660e I\u2019ll warn that doing this will likely create a less-readable test method because the name will have to become even more generic . Consider this a demo of the syntax, and know that this is possibly taking this technique too far in the right direction, because it makes the tests less understandable without going deeply through the code.","title":"Refactoring to parameterized tests"},{"location":"Finished/Art%20of%20Unit%20Testing/#more-nunit-attributes","text":"","title":"More NUnit attributes"},{"location":"Finished/Art%20of%20Unit%20Testing/#setup-and-teardown","text":"\u8a18\u5f97\u628a\u6771\u897f\u6e05\u4e7e\u6de8\uff0c\u5982\u679c\u4f60\u7684\u6e2c\u8a66\u6709dependency\u554f\u984c\u8981\u89e3\u662f\u5f88\u82b1\u6642\u9593\u7684\u3002 [SetUp] \u2014This attribute can be put on a method, just like a [Test] attribute, and it causes NUnit to run that setup method each time it runs any of the tests in your class. [TearDown] \u2014This attribute denotes a method to be executed once after each test in your class has executed. \u4e00\u6a23\uff0c\u8b39\u8a18\u4f60\u7528\u8d8a\u591a\u9019\u7a2e\u6771\u897f\u4f60\u7684\u53ef\u8b80\u6027\u8d8a\u4f4e I tell my students, \u201cImagine that the readers of your test have never met you and never will. They arrive and read your tests two years after you\u2019ve left the company. Every little thing you do to help them understand the code without needing to ask any questions is a big help. They probably have nobody around who can answer those questions, so you\u2019re their only hope.\u201d (\u53ef\u662f\u5462\uff0c\u505a\u9019\u7a2e\u4e8b\u53ea\u6709\u6280\u8853\u4eba\u54e1\u77e5\u9053\u5462) using NUnit.Framework; [TestFixture] public class LogAnalyzerTests { private LogAnalyzer m_analyzer=null; [SetUp] public void Setup() { m_analyzer = new LogAnalyzer(); } [Test] public void IsValidFileName_validFileLowerCased_ReturnsTrue() { bool result = m_analyzer .IsValidLogFileName(\"whatever.slf\"); Assert.IsTrue(result, \"filename should be valid!\"); } [Test] public void IsValidFileName_validFileUpperCased_ReturnsTrue() { bool result = m_analyzer .IsValidLogFileName(\"whatever.SLF\"); Assert.IsTrue(result, \"filename should be valid!\"); } [TearDown] public void TearDown() { //the line below is included to show an anti pattern. //This isn\u2019t really needed. Don\u2019t do it in real life. m_analyzer = null; } } Think of the setup and teardown methods as constructors and destructors for the tests in your class. \u63db\u53e5\u8a71\u8aaa(\u6216\u6211\u81ea\u5df1\u8166\u88dc)\uff0c\u4e0d\u8981\u518d\u7528constructor\uff0c\u4e0d\u904e\u4f5c\u8005\u5efa\u8b70\u9023setup\u90fd\u4e0d\u8981\u7528\uff0c\u76f4\u63a5\u4f7f\u7528\u5de5\u5ee0\u65b9\u6cd5(factory method) In real life I do not use setup methods to initialize my instances. I show it here for you to know that it exists and to avoid it. It may seem like a good idea, but soon it makes the tests below the setup method harder to read. Instead, I use factory methods to initialize my instances under test. \u53e6\u5916\u4e5f\u6709 [TestFixtureSetUp] \u548c [TestFixtureTearDown] \u9019\u7a2eattribute\uff0c\u5728\u8a2d\u7f6e\u6216\u6e05\u9664\u9700\u8981\u8f03\u9577\u6642\u9593\u7684\u6e2c\u8a66\u6642\u5f88\u597d\u7528\uff0c\u4f46\u8acb\u5343\u842c\u8b39\u614e\u4f7f\u7528\uff0c\u56e0\u70ba\u4f60\u6b63\u5728\u6e2c\u8a66\u9593\u5206\u4eab\u72c0\u614b\u3002 \u4e0d\u8981\u5728 \u55ae\u5143 \u6e2c\u8a66\u4f7f\u7528TearDown\u548cTestFixture You almost never, ever use TearDown or TestFixture methods in unit test projects. If you do, you\u2019re very likely writing an integration test, where you\u2019re touching the filesystem or a database, and you need to clean up the disk or the DB after the tests. The only time it makes sense to use a TearDown method in unit tests, I\u2019ve found, is when you need to \u201creset\u201d the state of a static variable or singleton in memory between tests. Any other time, you\u2019re likely doing integration tests. That\u2019s not a bad thing to be doing, but you should be doing it in a separate project that\u2019s dedicated to integration tests.","title":"Setup and teardown"},{"location":"Finished/Art%20of%20Unit%20Testing/#checking-for-expected-exceptions","text":"public class LogAnalyzer { public bool IsValidLogFileName(string fileName) { \u2026 if (string.IsNullOrEmpty(fileName)) { throw new ArgumentException( \"filename has to be provided\"); } \u2026 } } \u904e\u53bb\u7684\u552f\u4e00\u8655\u7406\u9019\u7a2e\u72c0\u6cc1\u4f46\u4f60\u4e0d\u8a72\u4f7f\u7528\u7684API(\u4ecb\u7d39\u723d\u7684)\uff1a [Test] [ExpectedException(typeof(ArgumentException), ExpectedMessage =\"filename has to be provided\")] public void IsValidFileName_EmptyFileName_ThrowsException() { m_analyzer.IsValidLogFileName(string.Empty); } private LogAnalyzer MakeAnalyzer() { return new LogAnalyzer(); } \u9806\u4fbf\u5c55\u73fe\u4e86\u5de5\u5ee0\u65b9\u6cd5\uff0c\u597d\u8655\u662f\u7576constructor\u6709\u7570\u52d5\u4f60\u53ea\u9700\u8981\u6539\u4e00\u500b\u5730\u65b9\u800c\u4e0d\u662f\u6240\u6709\u6e2c\u8a66\u90fd\u8981\u4fee \u70ba\u4ec0\u9ebc\u4e0d\u8981\u4f7f\u7528?\u56e0\u70ba\u4ed6\u5c07\u6574\u500b\u65b9try-catch\u8d77\u4f86\uff0c\u9996\u5148\u4f60\u4e0d\u77e5\u9053\u54ea\u4e00\u884c\u51fa\u932f\uff0c\u53e6\u5916\u4f60\u6709\u53ef\u80fd\u767c\u751f\u4e00\u500bexception(\u4f8b\u5982\u5efa\u69cb\u5b50\u51fa\u932f)\u53ef\u662f\u4f60\u7684\u6e2c\u8a66\u901a\u904e\u4e86(\u56e0\u70ba\u53eacatch\u7279\u5b9aexception) \u9019\u500b\u662f\u4f60\u8a72\u7528\u7684 [Test] public void IsValidFileName_EmptyFileName_Throws() { LogAnalyzer la = MakeAnalyzer(); var ex = Assert.Catch<Exception>(() => la.IsValidLogFileName(\"\")); StringAssert.Contains(\"filename has to be provided\", ex.Message); } \u4f7f\u7528 Assert.Catch \u585elambda expression StringAssert.Contains\u662f\u53e6\u4e00\u500bNunit\u7684\u529f\u80fd\uff0c\u4f7f\u7528Contains\u800c\u4e0d\u662f\u76f4\u63a5equal\u9084\u6709\u6ffe\u9664\u5947\u602a\u6771\u897f\u7684\u529f\u80fd(\u5634)","title":"Checking for expected exceptions"},{"location":"Finished/Art%20of%20Unit%20Testing/#ignoring-tests","text":"\u4f60\u77e5\u9053\u7684\uff0c\u5c31\u50cfignore Flake8\u4e00\u6a23\u7684\u597d\u7528 [Test] [Ignore(\"there is a problem with this test\")] public void IsValidFileName_ValidFile_ReturnsTrue() { /// ... } \u64da\u8aaa\u6703\u4eae\u9ec3\u71c8","title":"Ignoring tests"},{"location":"Finished/Art%20of%20Unit%20Testing/#nunits-fluent-syntax","text":"AssertThat94\u6f6e nunit-fluent-assertions Assert.That(2+2, Is.EqualTo(4));","title":"NUnit\u2019s fluent syntax"},{"location":"Finished/Art%20of%20Unit%20Testing/#setting-test-categories","text":"[Test] [Category(\"Fast Tests\")] public void IsValidFileName_ValidFile_ReturnsTrue() { /// ... }","title":"Setting test categories"},{"location":"Finished/Art%20of%20Unit%20Testing/#testing-results-that-are-system-state-changes-instead-of-return-values","text":"Checking that the system\u2019s behavior is different after performing an action on the system under test. \u6aa2\u67e5\u72c0\u614b\u6539\u8b8a DEFINITION State-based testing (also called state verification ) determines whether the exercised method worked correctly by examining the changed behavior of the system under test and its collaborators (dependencies) after the method is exercised. \u4ee5\u4e0b\u8ac7\u5230\u96a8\u4fbf\u628astate\u9732\u51fa\u53ea\u70ba\u4e86\u6e2c\u8a66\u4e0d\u597d\uff0c\u53ef\u662f\u597d\u50cf\u6c92\u8b1b\u5230\u89e3\u6cd5 If you\u2019ve read other definitions of state-based testing elsewhere, you\u2019ll notice that I define it differently. That is because I view this in a slightly different light\u2014that of test maintainability. Simply testing direct state (sometimes externalizing it to make it testable) is something I wouldn\u2019t usually endorse, because it leads to less-maintainable and less-readable code. public class LogAnalyzer { public bool WasLastFileNameValid { get; set; } public bool IsValidLogFileName(string fileName) { WasLastFileNameValid = false; if (string.IsNullOrEmpty(fileName)) { throw new ArgumentException(\"filename has to be provided\"); } if (!fileName.EndsWith(\".SLF\", StringComparison.CurrentCultureIgnoreCase)) { return false; } WasLastFileNameValid = true; return true; } } \u56e0\u70ba WasLastFileNameValid \u4f9d\u8cf4\u5225\u7684method\u4fee\u6539\u4ed6\uff0c\u6240\u4ee5\u7121\u6cd5\u76f4\u63a5\u6e2c \u56e0\u70ba\u4f5c\u8005\u70ba\u6211\u5927TDD\u795e\u6559\u8654\u8aa0\u6559\u5f92\uff0c\u53c8\u518d\u5f37\u8abf\u6211\u5728\u9019\u88e1\u628acode\u5148\u8cde\u4f60\u662f\u56e0\u70ba\u6211\u6c92\u6253\u7b97\u6559\u4f60TDD\uff0c\u5982\u679c\u7528TDD could \u5beb\u51fa\u66f4\u597d\u7684\u6e2c\u8a66\uff0c\u4e0d\u904e\u4f60\u8981 \u5148\u5b78\u6703\u5beb\u6e2c\u8a66 [Test] public void IsValidFileName_WhenCalled_ChangesWasLastFileNameValid() { LogAnalyzer la = MakeAnalyzer(); la.IsValidLogFileName(\"badname.foo\"); Assert.False(la.WasLastFileNameValid); } \u9084\u662f\u4f7f\u7528method name\u7576\u6e2c\u8a66\u540d\u7a31\uff0c WasLastFileNameValid \u53ea\u662f unit of work \u7684\u4e00\u74b0 refactor\u65b0\u589e\u53cd\u5411\uff1a [TestCase(\"badfile.foo\", false)] [TestCase(\"goodfile.slf\", true)] public void IsValidFileName_WhenCalled_ChangesWasLastFileNameValid(string file, bool expected) { LogAnalyzer la = MakeAnalyzer(); la.IsValidLogFileName(file); Assert.AreEqual(expected, la.WasLastFileNameValid); } \u53e6\u5916\u4e00\u500b\u53e3\u888b\u8a08\u7b97\u6a5f\u4f8b\u5b50\uff1a public class MemCalculator { private int sum=0; public void Add(int number) { sum+=number; } public int Sum() { int temp = sum; sum = 0; return temp; } } \u8a72\u600e\u9ebc\u6e2c\u8a66\u5462\uff1fYou should always consider the simplest test to begin with. \u5c31\u5f9eSum()\u7684default\u70ba0\u958b\u59cb\uff1a [Test] public void Sum_ByDefault_ReturnsZero() { MemCalculator calc = new MemCalculator(); int lastSum = calc.Sum(); Assert.AreEqual(0,lastSum); } \u518d\u6b21\u5f37\u8abf\u6e2c\u8a66\u540d\u7a31\u7684\u91cd\u8981\u6027\uff0c\u4ee5\u9019\u500b\u70ba\u4f8b\u5c31\u50cf\u53e5\u5b50\u4e00\u822c Here\u2019s a simple list of naming conventions of scenarios I like to use in such cases: - ByDefault can be used when there\u2019s an expected return value with no prior action, as shown in the previous example. - WhenCalled or Always can be used in the second or third kind of unit of work results (change state or call a third party) when the state change is done with no prior configuration or when the third-party call is done with no prior configuration; for example, Sum_WhenCalled_CallsTheLogger or Sum_Always_CallsTheLogger . \u65b0\u589eAdd()\u7684\u6e2c\u8a66\uff1a [Test] public void Sum_ByDefault_ReturnsZero() { MemCalculator calc = MakeCalc(); int lastSum = calc.Sum(); Assert.AreEqual(0, lastSum); } [Test] public void Add_WhenCalled_ChangesSum() { MemCalculator calc = MakeCalc(); calc.Add(1); int sum = calc.Sum(); Assert.AreEqual(1, sum); } private static MemCalculator MakeCalc() { return new MemCalculator(); } Notice that this time you use a factory method to initialize MemCalculator . This is a good idea, because it saves time writing the tests, makes the code inside each test smaller and a little more readable, and makes sure MemCalculator is always initialized the same way. It\u2019s also better for test maintainability, because if the constructor for MemCalculator changes, you only need to change the initialization in one place instead of going through each test and changing the new call. always initialized the same way \u6211\u61c2\uff0c\u53ef\u662f saves time writing the tests \u6709\u55ce= =? So far, so good. But what happens when the method you\u2019re testing depends on an external resource, such as the filesystem, a database, a web service, or anything else that\u2019s hard for you to control? And how do you test the third type of result for a unit of work\u2014a call to a third party? That\u2019s when you start creating test stubs, fake objects, and mock objects, which are discussed in the next few chapters.","title":"Testing results that are system state changes instead of return values"},{"location":"Finished/Art%20of%20Unit%20Testing/#summary_1","text":"In this chapter, we looked at using NUnit to write simple tests against simple code. You used the [TestCase] , [SetUp] , and [TearDown] attributes to make sure your tests always use new and untouched state. You used factory methods to make this more maintainable. You used [Ignore] to skip tests that need to be fixed. Test categories can help you group tests in a logical way rather than by class and namespace Assert.Catch() helps you make sure your code throws exceptions when it should. Testing results that are system state changes instead of return values Finally, keep the following points in mind: - It\u2019s common practice to have one test class per tested class, one unit test project per tested project (aside from an integration tests project for that tested project), and at least one test method per unit of work (which can be as small as a method or as large as multiple classes). - Name your tests clearly using the following model: [UnitOfWork]_[Scenario]_[ExpectedBehavior] . - Use factory methods to reuse code in your tests, such as code for creating and initializing objects all your tests use. - Don\u2019t use [SetUp] and [TearDown] if you can avoid them. They make tests less understandable.","title":"Summary"},{"location":"Finished/Art%20of%20Unit%20Testing/#chapter-3-using-stubs-to-break-dependencies","text":"\u7576\u4f60\u7684\u6e2c\u8a66\u76ee\u6a19\u4f9d\u8cf4\u4e0d\u53d7\u63a7\u7684\u6771\u897f\u6642(ex: webservice, time of day, threading...)\u600e\u8fa6\uff1fstubs\u767b\u5834\u3002","title":"Chapter 3: Using stubs to break dependencies"},{"location":"Finished/Art%20of%20Unit%20Testing/#introducing-stubs","text":"What is external dependency? DEFINITION An external dependency is an object in your system that your code under test interacts with and over which you have no control. (Common examples are filesystems, threads, memory, time, and so on.) \u5229\u7528stub\u4f86\u89e3\u6c7aexternal dependency\u7684\u554f\u984c DEFINITION A stub is a controllable replacement for an existing dependency (or collaborator) in the system. By using a stub, you can test your code without dealing with the dependency directly. mock\u8207stub\u7684\u5dee\u5225\uff1a mocks versus stubs is that mocks are just like stubs, but you assert against the mock object, whereas you do not assert against a stub. \u984c\u5916\u8a71\uff1a xUnit Test Patterns: Refactoring Test Code by Gerard Meszaros (Addison-Wesley, 2007)\u9019\u662f\u4e00\u672c\u5f88\u7d93\u5178\u7684\u55ae\u5143\u6e2c\u8a66pattern\u66f8\uff0c\u66f8\u4e2d\u628afake\u5206\u6210\u4e86\u4e94\u7a2e\uff0c\u4e0d\u904e\u672c\u66f8\u4f5c\u8005\u53ea\u5206\u6210\u4e09\u7a2e\u8a8d\u70ba\u9019\u6a23\u6bd4\u8f03\u597d\u61c2\u3002","title":"Introducing stubs"},{"location":"Finished/Art%20of%20Unit%20Testing/#identifying-a-filesystem-dependency-in-logan","text":"\u5047\u8a2d LogAnalyzer \u628a\u6709\u6548\u7684extensions\u540d\u7a31\u5b58\u5728\u4e00\u4efd\u6a94\u6848\u88e1\u9762\u7576\u4f5cconfig\uff0c\u90a3\u9ebc IsValidLogFileName \u53ef\u80fd\u6703\u9577\u9019\u6a23\uff1a public bool IsValidLogFileName(string fileName) { //read through the configuration file //return true if configuration says extension is supported. } \u5982\u679c\u9019\u6a23\u8a2d\u8a08\u5c31\u6703\u76f4\u63a5\u76f8\u4f9d\u65bc\u6a94\u6848\u7cfb\u7d71\uff0c\u8b8a\u6210\u5728\u5beb\u6574\u5408\u6e2c\u8a66\uff0c\u4f60\u5c31\u6703\u6709\u4ee5\u4e0b\u7f3a\u9ede\uff1a \u5f88\u6162 \u9700\u8981configuration \u4e00\u6b21\u6e2c\u8a66\u592a\u591a\u6771\u897f This is the essence of test-inhibiting design: the code has some dependency on an external resource, which might break the test even though the code\u2019s logic is perfectly valid.","title":"Identifying a filesystem dependency in LogAn"},{"location":"Finished/Art%20of%20Unit%20Testing/#determining-how-to-easily-test-loganalyzer","text":"\u201cThere is no object-oriented problem that cannot be solved by adding a layer of indirection, except, of course, too many layers of indirection.\u201d I like this quote (from http://en.wikipedia.org/wiki/Abstraction_layer ) because a lot of the \u201cart\u201d in the art of unit testing is about finding the right place to add or use a layer of indirection to test the code base. \u6709\u6771\u897f\u4e0d\u80fd\u6e2c?\u52a0\u4e00\u5c64\u628a\u4ed6\u5305\u8d77\u4f86\u7136\u5f8c\u5f04\u500b\u5047\u7684\u6771\u897f\u5047\u88dd\u4ed6\uff0c\u6216\u662f\u8b93\u4ed6\u53ef\u4ee5\u88ab\u66ff\u4ee3\u3002\u9019\u4e2d\u9593\u7684\u85dd\u8853\u5c31\u662f\u4f60\u8981\u77e5\u9053\u662f\u5426\u54ea\u66fe\u5df2\u7d93\u5b58\u5728\u6216\u8a31\u4f60\u4e0d\u9700\u8981\u65b0\u589e\uff0c\u53c8\u6216\u662f\u7cfb\u7d71\u5df2\u7d93\u592a\u8907\u96dc\u4f60\u4e0d\u8a72\u518d\u52a0\u4e00\u5c64\u3002 Pattern for breaking the dependency: Find the interface that the start of the unit of work under test works against. (In this case, \u201cinterface\u201d isn\u2019t used in the pure object-oriented sense; it refers to the defined method or class being collaborated with.) In our LogAn project, this is the filesystem configuration file. If the interface is directly connected to your unit of work under test (as in this case\u2014you\u2019re calling directly into the filesystem), make the code testable by adding a level of indirection hiding the interface. In our example, moving the direct call to the filesystem to a separate class (such as FileExtensionManager ) would be one way to add a level of indirection. We\u2019ll also look at others. (Figure 3.3 shows how the design might look after this step.) Replace the underlying implementation of that interactive interface with something that you have control over. In this case, you\u2019ll replace the instance of the class that your method calls ( FileExtensionManager ) with a stub class that you can control ( StubExtensionManager ), giving your test code control over external dependencies.","title":"Determining how to easily test LogAnalyzer"},{"location":"Finished/Art%20of%20Unit%20Testing/#refactoring-your-design-to-be-more-testable","text":"DEFINITION Refactoring is the act of changing code without changing the code\u2019s functionality. That is, it does exactly the same job as it did before. No more and no less. It just looks different. A refactoring example might be renaming a method and breaking a long method into several smaller methods. You can refactor code by introducing a new seam into it without changing the original functionality of the code, which is exactly what I\u2019ve done by introducing the new IExtensionManager interface. DEFINITION Seams are places in your code where you can plug in different functionality, such as stub classes, adding a constructor parameter, adding a public settable property, making a method virtual so it can be overridden, or externalizing a delegate as a parameter or property so that it can be set from outside a class. Seams are what you get by implementing the Open-Closed Principle, where a class\u2019s functionality is open for extenuation, but its source code is closed for direct modification. (See Working Effectively with Legacy Code by Michael Feathers, for more about seams, or Clean Code by Robert Martin about the Open-Closed Principle.) \u5e79\u6709\u6c92\u6709\u9019\u9ebc\u56b4\u91cd I\u2019ll remind you that refactoring your code without having any sort of automated tests against it (integration or otherwise) can lead you down a career-ending rabbit hole if you\u2019re not careful. Type A and Type B refactorings: Type A\u2014Abstracting concrete objects into interfaces or delegates Type B\u2014Refactoring to allow injection of fake implementations of those delegates or interfaces \u5176\u4ed6\u4f8b\u5b50\uff1a Type A\u2014Extract an interface to allow replacing underlying implementation. Type B\u2014Inject stub implementation into a class under test. Type B\u2014Inject a fake at the constructor level. Type B\u2014Inject a fake as a property get or set. Type B\u2014Inject a fake just before a method call. Extracting a class that touches the filesystem and calling it public bool IsValidLogFileName(string fileName) { FileExtensionManager mgr = new FileExtensionManager(); return mgr.IsValid(fileName); } class FileExtensionManager { public bool IsValid(string fileName) { //read some file here } } Extracting an interface from a known class public class FileExtensionManager : IExtensionManager { public bool IsValid(string fileName) { ... } } public interface IExtensionManager { bool IsValid (string fileName); } //the unit of work under test: public bool IsValidLogFileName(string fileName) { IExtensionManager mgr = new FileExtensionManager(); return mgr.IsValid(fileName); } Simple stub code that always returns true public class AlwaysValidFakeExtensionManager : IExtensionManager { public bool IsValid(string fileName) { return true; } } Dependency Injection Receive an interface at the constructor level and save it in a field for later use. Receive an interface as a property get or set and save it in a field for later use. Receive an interface just before the call in the method under test using one of the following: A parameter to the method (parameter injection) A factory class A local factory method Variations on the preceding techniques Injecting your stub using constructor injection public class LogAnalyzer { private IExtensionManager manager; public LogAnalyzer(IExtensionManager mgr) { manager = mgr; } public bool IsValidLogFileName(string fileName) { return manager.IsValid(fileName); } } public interface IExtensionManager { bool IsValid(string fileName); } [TestFixture] public class LogAnalyzerTests { [Test] public void IsValidFileName_NameSupportedExtension_ReturnsTrue() { FakeExtensionManager myFakeManager = new FakeExtensionManager(); myFakeManager.WillBeValid = true; LogAnalyzer log = new LogAnalyzer (myFakeManager); bool result = log.IsValidLogFileName(\"short.ext\"); Assert.True(result); } } internal class FakeExtensionManager : IExtensionManager { public bool WillBeValid = false; public bool IsValid(string fileName) { return WillBeValid; } } NOTE The fake extension manager is located in the same file as the test code because currently the fake is used only from within this test class. It\u2019s far easier to locate, read, and maintain a handwritten fake in the same file than in a different one. If, later on, you have an additional class that needs to use this fake, you can move it to another file easily with a tool like ReSharper (which I highly recommend). \u5982\u679c\u4f7f\u7528\u5efa\u69cb\u5b50\u6ce8\u5165\u6709\u53ef\u80fd\u6703\u56e0\u70ba\u8981\u6ce8\u5165\u7684\u6771\u897f\u592a\u591a\u5c0e\u81f4\u53c3\u6578\u5f88\u9577\uff0c\u9019\u6642\u5019\u53ef\u4ee5\u7528\u4e0b\u5217\u5169\u7a2e\u65b9\u5f0f\u89e3\u6c7a\uff1a parameter object refactoring. inversion of control (IoC) containers. I seldom use containers in my real code. I find that most of the time they complicate the design and readability of things. It might be that if you need a container, your design needs changing. What do you think? \u592a\u597d\u4e86\u53ef\u4ee5\u5c11\u5b78\u4e00\u500b\u6771\u897f \u4f7f\u7528\u5efa\u69cb\u5b50\u6ce8\u5165\u96d6\u7136\u6703\u8b93\u6e2c\u8a66\u8b8a\u7b28\u91cd\uff0c\u4f46\u4ed6\u662f\u9996\u9078\uff0c\u56e0\u70ba\u53ef\u8b80\u6027\u6700\u597d\uff0c\u4e0d\u904e\u9019\u9084\u8ddf\u8a2d\u8a08\u6709\u95dc\uff0c\u76f8\u4f9d\u7269\u4ef6\u653e\u5728\u5efa\u69cb\u5b50\u7684\u610f\u601d\u540c\u6642\u4ee3\u8868\u9019\u4e9b\u6771\u897f\u662f\u4e0d\u53ef\u9078\u64c7\u7684\u3002 Simulating exceptions from fakes (\u793a\u7bc4\u800c\u5df2\uff0c\u9019\u61c9\u8a72\u4e0d\u662f\u500b\u597d\u8a2d\u8a08\uff0c\u4e14\u8981\u5728IsValidLogFileName\u88e1\u9762\u5bebtry-catch) [Test] public void IsValidFileName_ExtManagerThrowsException_ReturnsFalse() { FakeExtensionManager myFakeManager = new FakeExtensionManager(); myFakeManager.WillThrow = new Exception(\u201cthis is fake\u201d); LogAnalyzer log = new LogAnalyzer (myFakeManager); bool result = log.IsValidLogFileName(\"anything.anyextension\"); Assert.False(result); } } internal class FakeExtensionManager : IExtensionManager { public bool WillBeValid = false;; public Exception WillThrow = null ; public bool IsValid(string fileName) { if(WillThrow !=null) { throw WillThrow;} return WillBeValid; } } Injecting a fake by adding property setters to the class under test public class LogAnalyzer { private IExtensionManager manager; public LogAnalyzer () { manager = new FileExtensionManager(); } public IExtensionManager ExtensionManager { get { return manager; } set { manager = value; } } public bool IsValidLogFileName(string fileName) { return manager.IsValid(fileName); } } [Test] Public void IsValidFileName_SupportedExtension_ReturnsTrue() { //set up the stub to use, make sure it returns true ... //create analyzer and inject stub LogAnalyzer log = new LogAnalyzer (); log.ExtensionManager=someFakeManagerCreatedEarlier; //Assert logic assuming extension is supported ... } } \u4f7f\u7528property\u8a2d\u5b9a\u6703\u5f71\u97ff\u8a2d\u8a08\u6982\u5ff5\uff1a\u53ef\u4ee5\u4e0d\u9700\u8981\u9019\u500b\u6771\u897f\u4f86\u64cd\u4f5c\u9019\u500b\u985e\u5225\uff0c\u611f\u89ba\u6c92\u751a\u9ebc\u4f7f\u7528\u6642\u6a5f\u3002 Setting a factory class to return a stub when the test is running public class LogAnalyzer { private IExtensionManager manager; public LogAnalyzer () { manager = ExtensionManagerFactory.Create(); } public bool IsValidLogFileName(string fileName) { return manager.IsValid(fileName) && Path.GetFileNameWithoutExtension(fileName).Length > 5; } } [Test] public void IsValidFileName_SupportedExtension_ReturnsTrue() { //set up the stub to use, make sure it returns true ... ExtensionManagerFactory .SetManager(myFakeManager); //create analyzer and inject stub LogAnalyzer log = new LogAnalyzer (); //Assert logic assuming extension is supported ... } class ExtensionManagerFactory { private IExtensionManager customManager = null; public IExtensionManager Create() { If(customManager!=null) return customManager; Return new FileExtensionManager(); } public void SetManager(IExtensionManager mgr) { customManager = mgr; } } Here are the steps for using a factory method in your tests: In the class under test, Add a virtual factory method that returns the real instance. Use the factory method in your code, as usual. In your test project, Create a new class. Set the new class to inherit from the class under test. Create a public field (no need for property get or set) of the interface type you want to replace ( IExtensionManager ). Override the virtual factory method. Return the public field. In your test code, Create an instance of a stub class that implements the required interface ( IExtensionManager ). Create an instance of the newly derived class, not of the class under test. Configure the new instance\u2019s public field (which you created earlier) and setit to the stub you\u2019ve instantiated in your test. Faking a factory method public class LogAnalyzerUsingFactoryMethod { public bool IsValidLogFileName(string fileName) { return GetManager().IsValid(fileName); } protected virtual IExtensionManager GetManager() { return new FileExtensionManager(); } } [TestFixture] public class LogAnalyzerTests { [Test] public void overrideTest() { FakeExtensionManager stub = new FakeExtensionManager(); stub.WillBeValid = true; TestableLogAnalyzer logan = new TestableLogAnalyzer(stub); bool result = logan.IsValidLogFileName(\"file.ext\"); Assert.True(result); } } class TestableLogAnalyzer : LogAnalyzerUsingFactoryMethod { public TestableLogAnalyzer(IExtensionManager mgr) { Manager = mgr; } public IExtensionManager Manager; protected override IExtensionManager GetManager() { return Manager; } } internal class FakeExtensionManager : IExtensionManager { //no change from the previous samples ... } \u9019\u500b\u53eb\u505a Extract and Override \uff0c\u5c0d\u4ed8Legacy Code\u7684\u597d\u62db\uff0c\u4f7f\u7528\u6642\u6a5f\uff1a \u9700\u8981\u6a21\u64ec return value \u9700\u8981\u6a21\u64ec\u6574\u500binterface \u9700\u8981\u9a57\u8b49\u4e92\u52d5\u4e0d\u9069\u5408(\u5fc5\u9808\u591a\u5bebcode\u624d\u6709\u53ef\u80fd\u9054\u6210) \u5982\u679c\u6c92\u6709\u4e00\u500b\u5df2\u7d93\u770b\u8d77\u4f86\u6b20inject\u7684interface\u7684\u6642\u5019 Returning a result rather than a stub object from an extracted method public class LogAnalyzerUsingFactoryMethod { public bool IsValidLogFileName(string fileName) { return this.IsValid(fileName); } protected virtual bool IsValid(string fileName) { FileExtensionManager mgr = new FileExtensionManager(); return mgr.IsValid(fileName); } } [Test] public void overrideTestWithoutStub() { TestableLogAnalyzer logan = new TestableLogAnalyzer(); logan.IsSupported = true; bool result = logan.IsValidLogFileName(\"file.ext\"); Assert.True(result,\"...\"); } class TestableLogAnalyzer : LogAnalyzerUsingFactoryMethod { public bool IsSupported; protected override bool IsValid(string fileName) { return IsSupported; } }","title":"Refactoring your design to be more testable"},{"location":"Finished/Art%20of%20Unit%20Testing/#overcoming-the-encapsulation-problem","text":"\u201cDon\u2019t be silly.\u201d OO\u7684\u5c01\u88ddAPI\u4f7f\u5f97\u7269\u4ef6\u6a21\u578b\u4e0d\u6703\u88abend user\u8aa4\u7528\uff0ctest\u4e5f\u662f\u4e00\u7a2eend user\uff0c\u4ed6\u8207\u539f\u672c\u7684end user\u4e00\u6a23\u91cd\u8981\u53ea\u662f\u76ee\u6a19\u4e0d\u540c\uff0c\u4e0d\u904e\u5982\u679c\u6709\u6f54\u7656\u9084\u662f\u89ba\u5f97\u9019\u6a23\u7834\u58de\u5c01\u88dd\uff0c\u6709\u4ee5\u4e0b\u4e09\u7a2e\u65b9\u5f0f\u53ef\u7528\uff1a Using internal and [InternalsVisibleTo] Using the [Conditional] attribute Using #if and #endif with conditional compilation","title":"Overcoming the encapsulation problem"},{"location":"Finished/Art%20of%20Unit%20Testing/#summary_2","text":"\u82b1\u5f0finjected \u751a\u9ebc\u662ffake \u9032\u5165\u8d8a\u6df1\u5c64\u4f60\u7684\u6e2c\u8a66\u8d8a\u96e3\u61c2,\u4f46\u8d8a\u4e0a\u5c64\u4f60\u80fd\u63a7\u5236\u7684\u6771\u897f\u8d8a\u5c11 The Extract and Override method TOOD?","title":"Summary"},{"location":"Finished/Art%20of%20Unit%20Testing/#chapter-4-interaction-testing-using-mock-objects","text":"\u7b2c\u4e09\u7a2e\u6e2c\u8a66\u985e\u578b\uff1a\u4e92\u52d5\uff0cmock\u767b\u5834","title":"Chapter 4: Interaction testing using mock objects"},{"location":"Finished/Art%20of%20Unit%20Testing/#value-based-vs-state-based-vs-interaction-testing","text":"\u5230\u76ee\u524d\u70ba\u6b62\u7684\u4e09\u7a2e\u6e2c\u8a66\uff1a Value-base testing State-base testing Interaction testing DEFINITION Interaction testing is testing how an object sends messages (calls methods) to other objects. You use interaction testing when calling another object is the end result of a specific unit of work. You can also think of interaction testing as being action-driven testing. Action-driven testing means that you test a particular action an object takes (such as sending a message to another object). interaction testing\u6c38\u9060\u662f\u4f60\u7684\u6700\u5f8c\u9078\u9805\uff0c\u56e0\u70ba\u5b83\u6700\u8907\u96dc\u3002(\u4e0d\u904e\u4e26\u4e0d\u662f\u6240\u6709\u4eba\u90fd\u9019\u6a23\u8a8d\u70ba\uff0cwe'll see)\uff0c\u4f46\u5c31\u662f\u5076\u723e\u6703\u6709\u6a5f\u6703\u4f7f\u7528interaction testing\u6bd4\u5176\u4ed6\u5169\u7a2e\u7684\u8907\u96dc\u5ea6\u4f86\u7684\u4f4e\u3002 DEFINITION A mock object is a fake object in the system that decides whether the unit test has passed or failed. It does so by verifying whether the object under test called the fake object as expected. There\u2019s usually no more than one mock per test. \u65e2\u7136stub\u8207mock\u90fd\u5b9a\u7fa9\u5b8c\u4e86\u5c31\u53ef\u4ee5\u5b9a\u7fa9fake\u4e86 DEFINITION A fake is a generic term that can be used to describe either a stub or a mock object (handwritten or otherwise), because they both look like the real object. Whether a fake is a stub or a mock depends on how it\u2019s used in the current test. If it\u2019s used to check an interaction (asserted against), it\u2019s a mock object. Otherwise, it\u2019s a stub.","title":"Value-based vs. state-based vs. interaction testing"},{"location":"Finished/Art%20of%20Unit%20Testing/#the-difference-between-mocks-and-stubs","text":"\u5b9a\u7fa9\u9019\u4e9b\u6771\u897f\u662f\u65b9\u4fbf\u4f7f\u7528framework\u6642\u53ef\u4ee5\u5feb\u901f\u8fa8\u8a8d\u5b83\u7684\u89d2\u8272\uff0c\u5c24\u5176\u7576\u4f60review\u5176\u4ed6\u4eba\u7684\u6e2c\u8a66\u767c\u73fe\u6709\u8d85\u904e\u4e00\u500bmock\u6642\u3002 The easiest way to tell you\u2019re dealing with a stub is to notice that the stub can never fail the test. The asserts that the test uses are always against the class under test. \u63db\u53e5\u8a71\u8aaa\uff0c\u6e2c\u8a66\u7a0b\u5f0f\u6703\u5c0dmock\u505aassert\u3002","title":"The difference between mocks and stubs"},{"location":"Finished/Art%20of%20Unit%20Testing/#a-simple-handwritten-mock-example","text":"Creating and using a mock object is much like using a stub, except that a mock will do a little more than a stub: it will save the history of communication, which will later be verified in the form of expectations . \u5047\u8a2d\u4eca\u5929LogAnalyzer\u9700\u8981\u8207webservice\u6e9d\u901a\uff0c\u7576\u6a94\u540d\u592a\u9577\u6703\u767c\u51faexception\u3002 \u7b2c\u4e00\u6b65\uff1a\u7d14\u624b\u5de5mock public interface IWebService { void LogError(string message); } public class FakeWebService:IWebService { public string LastError; public void LogError(string message) { LastError = message; } } Testing the LogAnalyzer with a mock object [Test] public void Analyze_TooShortFileName_CallsWebService() { FakeWebService mockService = new FakeWebService(); LogAnalyzer log = new LogAnalyzer(mockService); string tooShortFileName=\"abc.ext\"; log.Analyze(tooShortFileName); StringAssert.Contains(\"Filename too short:abc.ext\", mockService.LastError); } public class LogAnalyzer { private IWebService service; public LogAnalyzer(IWebService service) { this.service = service; } public void Analyze(string fileName) { if(fileName.Length<8) { service.LogError(\"Filename too short:\" + fileName); } } } Also notice that you aren\u2019t writing the tests directly inside the mock object code. There are a couple of reasons for this: - You\u2019d like to be able to reuse the mock object in other test cases, with other asserts on the message. - If the assert were put inside the handwritten fake class, whoever reads the test would have no idea what you\u2019re asserting. You\u2019d be hiding essential information from the test code, which hinders the readability and maintainability of the test. \u5728\u4e00\u500b\u6e2c\u8a66\u88e1combo\u591a\u500bstub\u548c\u4e00\u500bmock\u662f\u6b63\u5e38\u7684\uff0c\u4f46\u5982\u679c\u4f60\u6709\u591a\u500bmock\u5c31\u4ee3\u8868\u6709\u554f\u984c\uff0c\u56e0\u70ba\u4f60\u4e00\u6b21\u6e2c\u592a\u591a\u6771\u897f\u3002","title":"A simple handwritten mock example"},{"location":"Finished/Art%20of%20Unit%20Testing/#using-a-mock-and-a-stub-together","text":"\u8003\u616e\u66f4\u8907\u96dc\u7684\u60c5\u6cc1\uff0c\u7576web\u7684exception\u767c\u51fa\u6642\u9700\u8981\u5bc4mail if(fileName.Length<8) { try { service.LogError(\"Filename too short:\" + fileName); } catch (Exception e) { email.SendEmail(\"a\",\"subject\",e.Message); } } \u89e3\u6c7a\u65b9\u6cd5\uff1astub webservice, mock mailservice Testing the LogAnalyzer with a mock and a stub public interface IEmailService { void SendEmail(string to, string subject, string body); } public class LogAnalyzer2 { public LogAnalyzer2(IWebService service, IEmailService email) { Email = email, Service = service; } public IWebService Service { get ; set ; } public IEmailService Email { get ; set ; } public void Analyze(string fileName) { if(fileName.Length<8) { try { Service.LogError(\"Filename too short:\" + fileName); } catch (Exception e) { Email.SendEmail(\"someone@somewhere.com\", \"can\u2019t log\",e.Message); } } } } [TestFixture] public class LogAnalyzer2Tests { [Test] public void Analyze_WebServiceThrows_SendsEmail() { FakeWebService stubService = new FakeWebService(); stubService.ToThrow= new Exception(\"fake exception\"); FakeEmailService mockEmail = new FakeEmailService(); LogAnalyzer2 log = new LogAnalyzer2(stubService,mockEmail); string tooShortFileName=\"abc.ext\"; log.Analyze(tooShortFileName); StringAssert.Contains(\"someone@somewhere.com\",mockEmail.To); StringAssert.Contains(\"fake exception\",mockEmail.Body); StringAssert.Contains(\"can\u2019t log\",mockEmail.Subject); } } public class FakeWebService:IWebService { public Exception ToThrow; public void LogError(string message) { if(ToThrow!=null) { throw ToThrow; } } } public class FakeEmailService:IEmailService { public string To; public string Subject; public string Body; public void SendEmail(string to, string subject, string body) { To = to; Subject = subject; Body = body; } } \u95dc\u65bc\u4e00\u6b21assert\u591a\u500b\u7684\u53e6\u5916\u4e00\u7a2e\u8655\u7406\u65b9\u5f0f\uff1a class EmailInfo { public string Body; public string To; public string Subject; } [Test] public void Analyze_WebServiceThrows_SendsEmail() { FakeWebService stubService = new FakeWebService(); stubService.ToThrow= new Exception(\"fake exception\"); FakeEmailService mockEmail = new FakeEmailService(); LogAnalyzer2 log = new LogAnalyzer2(stubService,mockEmail); string tooShortFileName=\"abc.ext\"; log.Analyze(tooShortFileName); EmailInfo expectedEmail = new EmailInfo { Body = \"fake exception\", To = \"someone@somewhere.com\", Subject = \"can\u2019t log\" } Assert.AreEqual(expectedEmail, mockEmail.email); } public class FakeEmailService:IEmailService { public EmailInfo email = null; public void SendEmail(EmailInfo emailInfo) { email = emailInfo; } }","title":"Using a mock and a stub together"},{"location":"Finished/Art%20of%20Unit%20Testing/#one-mock-per-test","text":"\u4e00\u500b\u6e2c\u8a66\u88e1\u61c9\u8a72\u53ea\u6709\u4e00\u500bmock\u5176\u4ed6\u90fd\u662fstub\uff0c\u5982\u679c\u6709\u8d85\u904e\u4e00\u500bmock\u4ee3\u8868\u4f60\u4e00\u6b21\u6e2c\u592a\u591a\u6771\u897f\u3002\u7576\u4f60\u7684\u6e2c\u8a66\u592a\u8907\u96dc\u7684\u6642\u5019\u8a18\u5f97\u554f\u81ea\u5df1\u8ab0\u624d\u662fmock\uff0c\u5982\u679c\u4f60\u5c0d\u4e00\u500bstub\u505aassert\uff0c\u6ce8\u610f\u9019\u662foverspecification\u7684\u7279\u5fb5\u3002 Overspecification is the act of specifying too many things that should happen that your test shouldn\u2019t care about; for example, that stubs were called. Overspecification\u6703\u5c0e\u81f4\u4f60\u6aa2\u67e5\u592a\u591a\u6771\u897f\uff0c\u6709\u53ef\u80fd\u6e2c\u8a66\u7d50\u679c\u662f\u597d\u7684\u7d50\u679c\u4f60\u7684\u6e2c\u8a66\u662f\u58de\u7684\u3002","title":"One mock per test"},{"location":"Finished/Art%20of%20Unit%20Testing/#fake-chains-stubs-that-produce-mocks-or-other-stubs","text":"\u7576\u4f60\u9047\u5230\u9019\u7a2e\u60c5\u6cc1\uff1a IServiceFactory factory = GetServiceFactory(); IService service = factory.GetService(); \u6216\u9019\u7a2e String connstring = GlobalUtil.Configuration.DBConfiguration.ConnectionString \u9019\u7a2e\u6642\u5019\u4f60\u8981stub\u4e00\u5768\u62c9\u5eab\u6771\u897f\u6700\u5f8c\u53ef\u80fd\u9084\u8981\u4e00\u500bmock\uff0c\u4ee5\u4e0b\u662f\u66f4\u4e7e\u6de8\u7684\u4f5c\u6cd5\uff1a String connstring =GetConnectionString(); Protected virtual string GetConnectionString() { Return GlobalUtil.Configuration.DBConfiguration.ConnectionString; } TIP Another good way to avoid call chains is to create special wrapper classes around the API that simplify using and testing it. For more about this method, see Working Effectively with Legacy Code by Michael Feathers. The pattern is called Adapt Parameter in that book.","title":"Fake chains: stubs that produce mocks or other stubs"},{"location":"Finished/Art%20of%20Unit%20Testing/#the-problems-with-handwritten-mocks-and-stubs","text":"There are several issues that crop up when using manual mocks and stubs: It takes time to write the mocks and stubs. It\u2019s difficult to write stubs and mocks for classes and interfaces that have many methods, properties, and events. To save state for multiple calls of a mock method, you need to write a lot of boilerplate code within the handwritten fakes. If you want to verify that all parameters on a method call were sent correctly by the caller, you\u2019ll need to write multiple asserts. That\u2019s a drag. It\u2019s hard to reuse mock and stub code for other tests. The basic stuff works, but once you get into more than two or three methods on the interface, everything starts getting tedious to maintain. Is there a place for a fake that is both a mock and a stub? Very rarely. And I mean maybe once or twice in a project. I\u2019ve only seen this a couple of times in the past couple of years myself.","title":"The problems with handwritten mocks and stubs"},{"location":"Finished/Art%20of%20Unit%20Testing/#summary_3","text":"A mock object is like a stub, but it also helps you to assert something in your test. Combining stubs and mocks in the same test is a powerful technique, but you must take care to have no more than one mock in each test. Stubs that produce other stubs or mocks can be a powerful way to inject fake dependencies into code that uses other objects to get its data. One of the most common problems encountered by people who write tests is using mocks too much in their tests (overspecification). You may find that writing manual mocks and stubs is inconvenient for large interfaces or for complicated interaction-testing scenarios. It is, and there are better ways to do this, as you\u2019ll see in the next chapter. But often you\u2019ll find that handwritten mocks and stubs still beat frameworks for simplicity and readability. The art lies in when you use which tool.","title":"Summary"},{"location":"Finished/Art%20of%20Unit%20Testing/#chapter-5-isolationmocking-frameworks","text":"isolation framework \u767b\u5834\u2014a reusable library that can create and configure fake objects at runtime . These objects are referred to as dynamic stubs and dynamic mocks . \u4f7f\u7528 NSubstitute","title":"Chapter 5: Isolation(mocking) frameworks"},{"location":"Finished/Art%20of%20Unit%20Testing/#why-use-isolation-frameworks","text":"DEFINITION An isolation framework is a set of programmable APIs that makes creating fake objects much simpler, faster, and shorter than hand-coding them. public interface IComplicatedInterface { void Method1(string a, string b, bool c, int x, object o); void Method2(string b, bool c, int x, object o); void Method3(bool c, int x, object o); } Implementing complicated interfaces with handwritten stubs class MytestableComplicatedInterface:IComplicatedInterface { public string meth1_a; public string meth1_b,meth2_b; public bool meth1_c,meth2_c,meth3_c; public int meth1_x,meth2_x,meth3_x; public int meth1_0,meth2_0,meth3_0; public void Method1(string a, string b, bool c, int x, object o) { meth1_a = a; meth1_b = b; meth1_c = c; meth1_x = x; meth1_0 = 0; } public void Method2(string b, bool c, int x, object o) { meth2_b = b; meth2_c = c; meth2_x = x; meth2_0 = 0; } public void Method3(bool c, int x, object o) { meth3_c = c; meth3_x = x; meth3_0 = 0; } } \u624b\u5beb\u9019\u500bfake\u9664\u4e86\u82b1\u6642\u9593\u3001\u7b28\u91cd\u4ee5\u5916\uff0c\u60f3\u50cf\u842c\u4e00\u4eca\u5929\u4f60\u60f3\u8981\u6e2c\u8a66\u67d0\u500b\u65b9\u6cd5\u88ab\u547c\u53eb\u5e7e\u6b21\u600e\u9ebc\u8fa6?\u6216\u662f\u4f60\u60f3\u8981\u56de\u50b3\u7279\u5b9a\u503c?\u6216\u662f\u4f60\u60f3\u8981\u547c\u53eb\u6b77\u53f2?\u4f60\u7684\u7a0b\u5f0f\u99ac\u4e0a\u5c31\u6703\u8b8a\u5f97\u5f88\u919c\u3002","title":"Why use isolation frameworks"},{"location":"Finished/Art%20of%20Unit%20Testing/#dynamically-creating-a-fake-object","text":"DEFINITION A dynamic fake object is any stub or mock that\u2019s created at runtime without needing to use a handwritten (hardcoded) implementation of that object. \u672c\u66f8\u4f7f\u7528 NSubstitute \uff0c\u4e0d\u904e\u63d0\u5230FakeItEasy\u4e5f\u4e0d\u932f\u3002 Asserting against a handwritten fake object [TestFixture] class LogAnalyzerTests { [Test] public void Analyze_TooShortFileName_CallLogger() { FakeLogger logger = new FakeLogger(); LogAnalyzer analyzer = new LogAnalyzer(logger); analyzer.MinNameLength= 6; analyzer.Analyze(\"a.txt\"); StringAssert.Contains(\"too short\",logger.LastError); } } class FakeLogger: ILogger { public string LastError; public void LogError(string message) { LastError = message; } } \u8f15\u9b06\u8f49\u63db Faking an object using NSub [Test] public void Analyze_TooShortFileName_CallLogger() { ILogger logger = Substitute.For<ILogger>(); LogAnalyzer analyzer = new LogAnalyzer(logger); analyzer.MinNameLength = 6; analyzer.Analyze(\"a.txt\"); logger.Received().LogError(\"Filename too short: a.txt\"); } \u984c\u5916\u8a71\uff1a\u4ee5\u5f80\u8981mock\u53ef\u4e0d\u662f\u9019\u9ebc\u65b9\u4fbf\uff0c\u8981\u5148recordy\u518dreplay\uff0c\u7d93\u904e\u6f2b\u9577\u7684\u9032\u5316\u624d\u8b8a\u6210\u73fe\u5728\u652f\u63f4Arrange-act-assert\u3002","title":"Dynamically creating a fake object"},{"location":"Finished/Art%20of%20Unit%20Testing/#simulating-fake-values","text":"stub\u7684\u4f7f\u7528\u65b9\u5f0f Returning a value from a fake object [Test] public void Returns_ByDefault_WorksForHardCodedArgument() { IFileNameRules fakeRules = Substitute.For<IFileNameRules>(); fakeRules.IsValidLogFileName(\"strict.txt\").Returns(true); Assert.IsTrue(fakeRules.IsValidLogFileName(\"strict.txt\")); } \u9650\u5236\u7279\u5b9a\u985e\u578b\u7684\u53c3\u6578\uff0c\u9019\u500b\u53eb\u505a argument matcher [Test] public void Returns_ByDefault_WorksForHardCodedArgument() { IFileNameRules fakeRules = Substitute.For<IFileNameRules>(); fakeRules.IsValidLogFileName(Arg.Any<String>()) .Returns(true); Assert.IsTrue(fakeRules.IsValidLogFileName(\"anything.txt\")); } \u56fa\u5b9a\u4e1f\u51fa\u7279\u5b9aexception\uff0c\u53ef\u8b80\u6027\u964d\u4f4e\u4e0d\u5c11 \u4f5c\u8005\u88dc\u5145\uff1a(This would be easier to do in FakeItEasy, in fact, but NSub has more docs, so I chose to use it here.) [Test] public void Returns_ArgAny_Throws() { IFileNameRules fakeRules = Substitute.For<IFileNameRules>(); fakeRules.When(x => x.IsValidLogFileName(Arg.Any<string>())) .Do(context => { throw new Exception(\"fake exception\"); }); Assert.Throws<Exception>(() => fakeRules.IsValidLogFileName(\"anything\")); } \u4ee5\u4e0b\u793a\u7bc4 \u878d\u5408 \uff1a The method under test and a test that uses handwritten mocks and stubs [Test] public void Analyze_LoggerThrows_CallsWebService() { FakeWebService mockWebService = new FakeWebService(); FakeLogger2 stubLogger = new FakeLogger2(); stubLogger.WillThrow = new Exception(\"fake exception\"); var analyzer2 = new LogAnalyzer2(stubLogger, mockWebService); analyzer2.MinNameLength = 8; string tooShortFileName=\"abc.ext\"; analyzer2.Analyze(tooShortFileName); Assert.That(mockWebService.MessageToWebService, Is.StringContaining(\"fake exception\")); } } public class FakeWebService:IWebService { public string MessageToWebService; public void Write(string message) { MessageToWebService = message; } } public class FakeLogger2:ILogger { public Exception WillThrow = null; public string LoggerGotMessage = null; public void LogError(string message) { LoggerGotMessage = message; if (WillThrow != null) { throw WillThrow; } } } //---------- PRODUCTION CODE public class LogAnalyzer2 { private ILogger _logger; private IWebService _webService; public LogAnalyzer2(ILogger logger,IWebService webService) { _logger = logger; _webService = webService; } public int MinNameLength { get; set; } public void Analyze(string filename) { if (filename.Length<MinNameLength) { try { _logger.LogError( string.Format(\"Filename too short: {0}\",filename)); } catch (Exception e) { _webService.Write(\"Error From Logger: \" + e); } } } } public interface IWebService { void Write(string message); } \u4e0a\u9762\u624b\u5beb\uff0c\u4e0b\u9762\u7528Nsub Converting the previous test into one that uses NSubstitute [Test] public void Analyze_LoggerThrows_CallsWebService() { var mockWebService = Substitute.For<IWebService>(); var stubLogger = Substitute.For<ILogger>(); stubLogger.When( logger => logger.LogError(Arg.Any<string>())) .Do(info => { throw new Exception(\"fake exception\");}); var analyzer = new LogAnalyzer2(stubLogger, mockWebService); analyzer.MinNameLength = 10; analyzer.Analyze(\"Short.txt\"); mockWebService.Received() .Write(Arg.Is<string>(s => s.Contains(\"fake exception\"))); } lambda\u96d6\u7136\u8b93\u53ef\u8b80\u6027\u964d\u4f4e\uff0c\u4e0d\u904e\u9019\u662f\u751f\u6d3b\u5728C#\u7684\u5fc5\u8981\u4e4b\u60e1\uff0c\u540c\u6642\u53ef\u4ee5\u907f\u514d\u7528string\u547c\u53eb\u65b9\u6cd5\uff0c\u9019\u6703\u8b93\u4f60refactor\u6642\u8f03\u65b9\u4fbf\u3002 argument matchers\u53ef\u4ee5\u7528\u5728stub\u4e5f\u53ef\u4ee5\u7528\u5728mock \uff0c \u66f4\u591a\u7684Argument matchers \u4e0b\u9762COMPARING OBJECTS AND PROPERTIES AGAINST EACH OTHER \u5047\u8a2d\u4eca\u5929\u8981\u78ba\u8a8dErrorInfo\u9019\u500bobject\u5167\u5bb9\uff1a [Test] public void Analyze_LoggerThrows_CallsWebServiceWithNSubObject() { var mockWebService = Substitute.For<IWebService>(); var stubLogger = Substitute.For<ILogger>(); stubLogger.When( logger => logger.LogError(Arg.Any<string>())) .Do(info => { throw new Exception(\"fake exception\");}); var analyzer = new LogAnalyzer3(stubLogger, mockWebService); analyzer.MinNameLength = 10; analyzer.Analyze(\"Short.txt\"); mockWebService.Received() .Write(Arg.Is<ErrorInfo>(info => info.Severity == 1000 && info.Message.Contains(\"fake exception\"))); } \u90a3\u500b And \u5be6\u5728\u5f88\u919c\uff0c\u6709\u4e9b\u6642\u5019isolation frameworks\u7528\u7684\u8d8a\u6df1\u53ef\u8b80\u6027\u8d8a\u5dee\uff0c\u5fc5\u9808\u8981\u81ea\u5df1\u505a\u53d6\u6368\uff0c\u4e5f\u53ef\u4ee5\u8003\u616e\u56de\u53bb\u4f7f\u7528 \u624b\u5beb \u7248fake\uff0c\u6216\u8005\u4f7f\u7528 expected object \uff1a Comparing full objects [Test] public void Analyze_LoggerThrows_CallsWebServiceWithNSubObjectCompare() { var mockWebService = Substitute.For<IWebService>(); var stubLogger = Substitute.For<ILogger>(); stubLogger.When( logger => logger.LogError(Arg.Any<string>())) .Do(info => { throw new Exception(\"fake exception\");}); var analyzer = new LogAnalyzer3(stubLogger, mockWebService); analyzer.MinNameLength = 10; analyzer.Analyze(\"Short.txt\"); var expected = new ErrorInfo(1000, \"fake exception\"); mockWebService.Received().Write(expected); } Testing full objects only works when the following are true: It\u2019s easy to create the object with the expected properties. You want to test all the properties of the object in question. You know the exact values of each property, fully. The Equals() method is implemented correctly on the two objects being compared. (It\u2019s usually bad practice to rely on the out-of-the-box implementation of object.Equals() . If Equals() is not implemented, then this test will always fail, because by default Equals() will return false .) \u6ce8\u610f\u6bd4\u8f03\u6574\u500bobject\u662f\u6703\u5c0e\u81f4\u4f60\u7684\u6e2c\u8a66\u975e\u5e38\u8106\u5f31\u7684\uff0c\u96a8\u4fbf\u4e00\u6539\u52d5\u6e2c\u8a66\u5c31\u6703\u58de\u6389\uff0c\u4f60\u6703\u56e0\u70ba\u4e0d\u662f\u6b63\u78ba\u7684\u539f\u56e0(\u6709bug\u7522\u751f)\u800c\u4fee\u6b63\u6e2c\u8a66\uff0c\u800c\u4e14\u6bd4\u8f03\u6574\u500bobject\u6703\u8b93\u4f60\u7121\u6cd5\u4f7f\u7528argument matchers\uff0c\u6709\u53ef\u80fd\u4e00\u500bstring\u53ea\u662f\u591a\u4e86\u4e00\u500b\u7a7a\u767d\u5c31\u8b93\u6e2c\u8a66\u58de\u6389\uff0c\u53e6\u4e00\u500b\u9078\u64c7\u662f\u4e0d\u8981\u6bd4\u5c0d\u6574\u500bobject\uff0c\u4f60\u53ef\u4ee5\u9078\u5e7e\u500bproperties\u642d\u914dargument matchers\u505a\u6bd4\u5c0d\u5c31\u597d\u3002","title":"Simulating fake values"},{"location":"Finished/Art%20of%20Unit%20Testing/#testing-for-event-related-activities","text":"Events are a two-way street, and you can test them in two different directions: Testing that someone is listening to an event Testing that someone is triggering an event Event-related code and how to trigger it class Presenter { private readonly IView _view; public Presenter(IView view) { _view = view; this._view.Loaded += OnLoaded; } private void OnLoaded() { _view.Render(\"Hello World\"); } } public interface IView { event Action Loaded; void Render(string text); } //------ TESTS [TestFixture] public class EventRelatedTests { [Test] public void ctor_WhenViewIsLoaded_CallsViewRender() { var mockView = Substitute.For<IView>(); Presenter p = new Presenter(mockView); mockView.Loaded += Raise.Event<Action>(); mockView.Received() .Render(Arg.Is<string>(s => s.Contains(\"Hello World\"))); } } Notice the following: The mock is also a stub (you simulate an event).(raise event\u662fstub\u884c\u70ba\uff0c\u5c0d\u4ed6assert\u662fmock\u884c\u70ba) To trigger an event, you have to awkwardly register to it in the test. This is only to satisfy the compiler, because event-related properties are treated differently and are heavily guarded by the compiler. Events can only be directly invoked by their declaring class/struct. \u4ee5\u4e0b\u70ba\u4f7f\u7528stub raise event\u4f7f\u7528mock assert Simulating an event along with a separate mock [Test] public void ctor_WhenViewhasError_CallsLogger() { var stubView = Substitute.For<IView>(); var mockLogger = Substitute.For<ILogger>(); Presenter p = new Presenter(stubView, mockLogger); stubView.ErrorOccured += Raise.Event<Action<string>>(\"fake error\"); mockLogger.Received() .LogError(Arg.Is<string>(s => s.Contains(\"fake error\"))); } \u4e0b\u9762\u793a\u7bc4\u5982\u4f55\u78ba\u8a8devent\u6709\u5728\u6b63\u78ba\u7684\u6642\u9593\u88abfire Using an anonymous delegate to register to an event [Test] public void EventFiringManual() { bool loadFired = false; SomeView view = new SomeView(); view.Load+=delegate { loadFired = true; }; view.DoSomethingThatEventuallyFiresThisEvent(); Assert.IsTrue(loadFired); }","title":"Testing for event-related activities"},{"location":"Finished/Art%20of%20Unit%20Testing/#current-isolation-frameworks-for-net","text":"\u5f9eisolation frameworks\u7684\u6578\u91cf\u5c31\u53ef\u4ee5\u77e5\u9053\u9019\u6771\u897f\u7684\u9700\u6c42\u662f\u9ad8\u7684\u3002\u672c\u66f8\u7684append\u6709\u66f4\u591a\u7684\u6bd4\u8f03\uff0c\u5f9e\u4e2d\u9078\u4e00\u500b\u5c31\u597d\uff0c\u53ef\u4ee5\u964d\u4f4eteam member\u7684\u5b78\u7fd2\u66f2\u7dda\u3002 Why method strings are bad inside tests In many frameworks outside the .NET world, it\u2019s common to use strings to describe which methods you\u2019re about to change the behavior of. Why is this not great? If you were to change the name of a method in production, any tests using the method in a string would still compile and would only break at runtime, throwing an exception indicating that a method could not be found. With strongly typed method names (thanks to lambda expressions and delegates), changing the name of a method wouldn\u2019t be a problem, because the method is used directly in the test. Any method changes would keep the test from compiling, and you\u2019d know immediately that there was a problem with the test. With automated refactoring tools like those in Visual Studio, renaming a method is easier, but most refactorings will still ignore strings in the source code. (ReSharper for .NET is an exception. It also corrects strings, but that\u2019s only a partial solution that may prove problematic in some scenarios.)","title":"Current isolation frameworks for .NET"},{"location":"Finished/Art%20of%20Unit%20Testing/#advantages-and-traps-of-isolation-frameworks","text":"\u512a\u9ede\uff1a Easier parameter verification\u2014Using handwritten mocks to test that a method was given the correct parameter values can be a tedious process, requiring time and patience. Most isolation frameworks make checking the values of parameters passed into methods a trivial process even if there are many parameters. Easier verification of multiple method calls\u2014With manually written mocks, it can be difficult to check that multiple method calls on the same method were made correctly with each having appropriate different parameter values. As you\u2019ll see later, this is a trivial process with isolation frameworks. Easier fakes creation\u2014Isolation frameworks can be used for creating both mocks and stubs more easily. \u53ef\u80fd\u7684\u7f3a\u9ede\uff1a overusing an isolation framework when a manual mock object would suffice making tests unreadable because of overusing mocks in a test, or not separating tests well enough. \u96a8\u6642\u6ce8\u610f\u4f60\u7684\u6e2c\u8a66\uff1a Unreadable test code Verifying the wrong things Having more than one mock per test Overspecifying the tests \u4ee5\u4e0b\u5efa\u8b70 \u5982\u679c\u4f60\u767c\u73fe\u4f60\u7684\u6e2c\u8a66\u8d8a\u4f86\u8d8a\u96e3\u61c2\uff0c\u53ef\u4ee5\u8a66\u8457\u62c6\u5206 \u6e2c\u8a66\u4e00\u500bobject\u6709\u6c92\u6709\u8a3b\u518a\u4e00\u500b\u4e8b\u4ef6\u4e26\u6c92\u6709\u544a\u8a34\u4f60\u4efb\u4f55\u9019\u500bobject\u7684\u529f\u80fd\uff0c\u6e2c\u8a66\u7576\u4e8b\u4ef6\u89f8\u767c\u6703\u767c\u751f\u4e00\u4e9b\u4e8b\u662f\u6bd4\u8f03\u597d\u7684\u65b9\u6cd5 \u901a\u5e38\u4e00\u500b\u6e2c\u8a66\u6307\u5074\u4e00\u4ef6\u4e8b\u624d\u662f\u597d\u7684\uff0c\u5982\u679c\u4f60\u6709\u8d85\u904e\u4e00\u500bmock\u4ee3\u8868\u4f60\u53ef\u80fd\u6e2c\u8d85\u904e\u4e00\u4ef6\u4e8b\uff0c\u5982\u679c\u4f60\u4e0d\u77e5\u9053\u600e\u9ebc\u70ba\u4f60\u7684\u6e2c\u8a66\u547d\u540d\u53ef\u80fd\u4e5f\u662f\u540c\u6a23\u60c5\u6cc1 \u76e1\u53ef\u80fd\u4e0d\u4f7f\u7528mock\uff0c\u53ea\u6709\u7576\u975e\u7528\u4e0d\u53ef\u6642\uff0c\u4e14\u61c9\u8a72\u4e0d\u662f\u5e38\u614b \u5982\u679c\u4f60\u6709\u8d85\u904e5%\u7684mock objects\uff0c\u4f60\u6709\u53ef\u80fd\u5c31\u662foverspecifying \u5982\u679c\u4f60\u7684expectations(x.received().X() and X.received().Y() and so on)\uff0c\u4f60\u7684\u6e2c\u8a66\u53ef\u80fd\u6703\u975e\u5e38\u8106\u5f31 \u6e2c\u8a66\u4e92\u52d5\u662f\u96d9\u9762\u5203\uff0c\u6e2c\u592a\u591a\u4f60\u6703\u770b\u4e0d\u5230\u5168\u8c8c\uff0c\u6e2c\u592a\u5c11\u6709\u53ef\u80fd\u6f0f\u6389\u91cd\u8981\u7684\u4e92\u52d5 \u4ee5\u4e0b\u662f\u91dd\u5c0d overspecifying \u4f60\u53ef\u4ee5\u505a\u7684\u4e00\u4e9b\u4e8b\uff1a Use nonstrict mocks when you can (strict and nonstrict mocks are explained in the next chapter) . The test will break less often because of unexpected method calls. This helps when the private methods in the production code keep changing. Use stubs instead of mocks when you can . If you have more than 5% of your tests with mock objects, you might be overdoing it. Stubs can be everywhere. Mocks, not so much. You only need to test one scenario at a time. The more mocks you have, the more verifications will take place at the end of the test, but usually only one will be the important one. The rest will be noise against the current test scenario. Avoid using stubs as mocks if humanly possible . Use a stub only for faking return values into the program under test or to throw exceptions. Don\u2019t verify that methods were called on stubs. Use a mock only for verifying that some method was called on it, but don\u2019t use it to return values into your program under test. Most of the time, you can avoid a mock that\u2019s also a stub but not always (as you saw earlier in this chapter, regarding events).","title":"Advantages and traps of isolation frameworks"},{"location":"Finished/Art%20of%20Unit%20Testing/#summary_4","text":"Mock\u6700\u5f8c\u518d\u4f7f\u7528 \u5982\u679c\u4f60\u7684mock object\u8d85\u904e5%\u4f60\u53ef\u80fdoverspecifying \u5982\u679c\u4f60\u4f7f\u7528isolation framework\u5beb\u7684\u6e2c\u8a66\u958b\u59cb\u8b8a\u919c\uff0c\u8003\u616e\u624b\u5bebmock\u6216\u662f\u62c6\u5206\u6e2c\u8a66 \u5982\u679c\u4f60\u5404\u7a2e\u5931\u6557\u5c31\u662f\u5beb\u4e0d\u51fa\u6e2c\u8a66\u4f60\u6709\u4e09\u7a2e\u9078\u64c7\uff1a use a super framework like Typemock Isolator (explained in the next chapter) change the design quit your job","title":"Summary"},{"location":"Finished/Art%20of%20Unit%20Testing/#chapter-6-digging-deeper-into-isolation-frameworks","text":"The world of isolation frameworks","title":"Chapter 6: Digging deeper into isolation frameworks"},{"location":"Finished/Art%20of%20Unit%20Testing/#constrained-and-unconstrained-frameworks","text":"\"\u4f5c\u8005\u81ea\u5df1\u5206\u985e\u7684\"","title":"Constrained and unconstrained frameworks"},{"location":"Finished/Art%20of%20Unit%20Testing/#constrained-frameworks","text":"Constrained frameworks in .NET include Rhino Mocks, Moq, NMock, EasyMock, NSubstitute, and FakeItEasy. In Java, jMock and EasyMock are examples of constrained frameworks. Constrained\u5c31\u662f\u53d7\u8a9e\u8a00\u672c\u8eab\u8207compiler\u9650\u5236\u3002 In .NET, constrained frameworks are unable to fake static methods, nonvirtual methods, nonpublic methods, and more. Unconstrained frameworks\u5c31\u662f\u9760\u9ed1\u79d1\u6280\u5e79\u58de\u4e8b\u3002 Unconstrained frameworks in .NET include Typemock Isolator, JustMock, and Moles (a.k.a. MS Fakes). In Java, PowerMock and JMockit are examples of unconstrained frameworks. In C++, Isolator++ and Hippo Mocks are examples of such frameworks. .NET\u4f7f\u7528\u7684\u9ed1\u5ba2\u8a08\u8f03\u505a profiling APIs In .NET, all unconstrained frameworks are profiler-based. That means they use a set of unmanaged APIs called the profiling APIs that are wrapped around the running instance of the CLR\u2014the Common Language Runtime\u2014in .NET. \u7c21\u55ae\u4f86\u8aaa\u9019\u6771\u897f\u5305\u542b\u6240\u6709CLR code\u57f7\u884c\u6642\u7684\u4e8b\u4ef6\uff0c\u53ef\u4ee5\u5728IL compile\u4e4b\u524d\u5077\u4e32\u6539\uff0c\u56e0\u70ba\u4e8b\u4ef6\u5305\u542b\u6240\u6709\u7a0b\u5f0f\u78bc\uff0c\u6240\u4ee5\u53ef\u4ee5\u5c0dprivate constructor, static method\u751a\u81f3\u662f\u4e0d\u53d7\u4f60\u63a7\u5236\u7684\u7b2c\u4e09\u65b9\u7a0b\u5f0f\u78bcfake\u3002 profiling default\u70ba\u95dc\u9589\u9700\u8981\u88ab\u555f\u7528\uff0c\u4e0d\u904eisolation framework\u901a\u5e38\u6709add-on\u53ef\u4ee5\u505a\u9019\u4ef6\u4e8b\u3002 unconstrained isolation frameworks\u7684\u512a\u9ede\uff1a You can write unit tests for previously untestable code, because you can fake things around the unit of work and isolate it, without needing to touch and refactor the code. Later, when you have tests, you can start refactoring. You can fake third-party systems that you can\u2019t control and that are potentially very hard to test with, such as if your objects have to inherit from the base class of a third-party product that contains many dependencies at a lower level (SharePoint, CRM, Entity Framework, or Silverlight, to name a few). You can choose your own level of design, rather than be forced into specific patterns. Design isn\u2019t created by a tool; it\u2019s a people issue. If you don\u2019t know what you\u2019re doing, a tool won\u2019t help you anyway. I talk more about this in chapter 11. unconstrained isolation frameworks\u7684\u7f3a\u9ede\uff1a If you don\u2019t pay close attention, you can fake your way into a corner by faking things that aren\u2019t needed, instead of looking at the unit of work at a higher level. If you don\u2019t pay close attention, some tests can become unmaintainable because you\u2019re faking APIs that you don\u2019t own. This can happen, but not as often as you might think. From my experience, if you fake a low-enough level of an API in a framework, it\u2019s very unlikely to change in the future. The deeper an API is, the more likely many things are built on top of it, and the less likely it is to change. \u95dc\u65bc.NET\u7684unconstrained isolation frameworks \u4f7f\u7528C++\u5beb\u6210\u548cCLR Profiler API\u5c0d\u63a5(Typemock Isolator) Typemock Isolator\u6709\u5c08\u5229\uff0c\u53ef\u662f\u6c92\u6709\u5f37\u5236\u4f7f\u7528\u7684\u6a23\u5b50(\u6240\u4ee5\u624d\u6709\u5176\u4ed6\u7684feameworks\u50cf\u662fJustMock and Moles) profiling APIs\u6587\u4ef6\u5f88\u5c11(\u6216\u8a31\u662f\u6545\u610f\u7684?)\uff0c\u4e0d\u904e\u53ef\u4ee5\u67e5 JitCompilationStarted and SetILFunctionBody \u7406\u8ad6\u4e0a\u6240\u6709isolation frameworks\u7684\u80fd\u529b\u61c9\u8a72\u662f\u4e00\u6a23\u7684\uff0c\u4f46\u5be6\u969b\u4e0a\u9084\u662f\u770b\u8a72framework\u63d0\u4f9b\u4e86\u751a\u9ebc\u529f\u80fd\u7d66\u4f60 Typemock\u6b77\u53f2\u6700\u60a0\u4e45\uff0cMS Fakes\u63d0\u4f9b\u4e00\u4e9bfake\u539f\u751flib\u7684\u529f\u80fd Profiler-based frameworks\u6703\u6709\u6548\u80fd\u5f71\u97ff\uff0c\u53ef\u662f\u5f88\u5c0f\uff0c\u6bd4\u8d77\u4ed6\u5e36\u4f86\u7684\u597d\u8655\u53ef\u4ee5\u7121\u8996\u3002 \u8173\u672c\u8a9e\u8a00\u50cfRuby, Python, JavaScript\u7b49\u7b49\uff0c\u6c92\u6709\u50cfC#\u9019\u9ebc\u597d\u7528\u4e14\u53ef\u8b80\u6027\u4f73\u7684isolation frameworks\uff0c\u6709\u53ef\u80fd\u662f\u6846\u67b6\u4e0d\u5920\u6210\u719f\u4e5f\u53ef\u80fd\u662f\u6e2c\u8a66\u9084\u6c92\u9054\u5230\u50cf.NET\u9019\u6a23\u76f8\u540c\u7684\u7d50\u8ad6\uff0c\u4e0d\u904e\u4e5f\u6709\u53ef\u80fd\u6211\u5011\u505a\u7684\u4e8b\u662f\u932f\u7684? Good isolation frameworks have what I call the big two values: - Future-proofing - Usability Future-proofing \u5c31\u662f\u4f60\u53ea\u80fd\u56e0\u70ba\u6b63\u78ba\u7684\u7406\u7531\u4f7f\u6e2c\u8a66\u58de\u6389(ex:bug)\uff0c\u800c Usability \u5247\u662fisolation frameworks\u5fc5\u9808\u597d\u61c2\u4e14\u5bb9\u6613\u4f7f\u7528\uff0c\u4ee5\u4e0b\u662f\u4f7f\u6e2c\u8a66\u66f4robust\u7684\u7279\u5fb5\uff1a Recursive fakes Ignored arguments by default Wide faking Nonstrict behavior of fakes Nonstrict mocks","title":"Constrained frameworks"},{"location":"Finished/Art%20of%20Unit%20Testing/#recursive-fakes","text":"\u7bc4\u4f8b\uff1a public interface IPerson { IPerson GetManager(); } [Test] public void RecursiveFakes_work() { IPerson p = Substitute.For<IPerson>(); Assert.IsNotNull(p.GetManager()); Assert.IsNotNull(p.GetManager().GetManager()); Assert.IsNotNull(p.GetManager().GetManager().GetManager()); }","title":"Recursive fakes"},{"location":"Finished/Art%20of%20Unit%20Testing/#ignored-arguments-by-default","text":"\u597d\u50cf\u53ea\u6709Typemock Isolator\u6709\uff0c\u4e00\u76f4\u6253 Arg.IsAny<Type> \u9019\u7a2e\u6771\u897f\u5f88\u6d6a\u8cbb\u6642\u9593","title":"Ignored arguments by default"},{"location":"Finished/Art%20of%20Unit%20Testing/#wide-faking","text":"Typemock\u5c4c\u5c4c\u7684 Isolate.Fake.StaticMethods(typeof(HttpRuntime));","title":"Wide faking"},{"location":"Finished/Art%20of%20Unit%20Testing/#nonstrict-behavior-of-fakes","text":"\u5982\u679c\u4f60\u7684fake\u592a\u56b4\u683c\u5c31\u6703\u8b93\u6e2c\u8a66\u5f88\u5bb9\u6613\u58de\u6389\uff0c\u4f8b\u5982\u5728 unit of work \u88e1\u9762\u544a\u8a34\u6e2c\u8a66\u67d0\u500bmethod\u61c9\u8a72\u88ab\u547c\u53eb\uff0c\u5f80\u5f8c\u91cd\u69cb\u4f7f\u5f97\u9019\u500bmethod\u4e0d\u518d\u88ab\u547c\u53eb\u53ef\u662f\u4f60\u7684 unit of work \u7d50\u679c\u9084\u662f\u6b63\u78ba\u7684\uff0c\u537b\u56e0\u6b64\u5c0e\u81f4\u6e2c\u8a66\u58de\u6389\u3002","title":"Nonstrict behavior of fakes"},{"location":"Finished/Art%20of%20Unit%20Testing/#nonstrict-mocks","text":"Argument matching\u5c31\u662f\u4e00\u7a2enonstrict mocks\uff0c\u53ef\u4ee5\u63a5\u53d7\u4efb\u4f55\u4e00\u7a2ecall\u7684mock\u4e5f\u662f","title":"Nonstrict mocks"},{"location":"Finished/Art%20of%20Unit%20Testing/#isolation-framework-design-antipatterns","text":"Here are some of the antipatterns found in frameworks today that we can easily alleviate: Concept confusion: \u4f8b\u5982api\u540d\u7a31\u5305\u542bmock\u8b93\u4f60\u5206\u4e0d\u6e05\u8ab0\u662fmock\u8ab0\u662fstub Record and replay: \u96e3\u8b80 Sticky behavior: \u5bb9\u6613\u8b93\u6e2c\u8a66\u58de Complex syntax: \u96e3\u7528","title":"Isolation framework design antipatterns"},{"location":"Finished/Art%20of%20Unit%20Testing/#concept-confusion","text":"\u4f8b\u5982api\u540d\u7a31\u5305\u542bmock\u8b93\u4f60\u5206\u4e0d\u6e05\u8ab0\u662fmock\u8ab0\u662fstub","title":"Concept confusion"},{"location":"Finished/Art%20of%20Unit%20Testing/#summary_5","text":"Isolation frameworks are divided into two categories: constrained and unconstrained frameworks. profiling APIs future-proofing and usability","title":"Summary"},{"location":"Finished/Art%20of%20Unit%20Testing/#chapter-7-test-hierarchies-and-organization","text":"\u8b1b\u5982\u4f55\u914d\u7f6e\u4f60\u7684\u6e2c\u8a66\u5011","title":"Chapter 7: Test hierarchies and organization"},{"location":"Finished/Art%20of%20Unit%20Testing/#automated-builds-running-automated-tests","text":"If you plan to make your team more agile and equipped to handle requirement changes as they come into your shop, you need to be able to do the following: - Make a small change to your code. - Run all the tests to make sure you haven\u2019t broken any existing functionality. - Make sure your code can still integrate well and not break any other projects you depend on. - Create a deliverable package of your code and deploy it automatically at the push of a button. \u5728\u8b1bCI \u4f60\u53ef\u80fd\u9700\u8981\u5404\u7a2ebuild configurations\u548cbuild scripts \u628a\u4f60\u7684build script\u4e00\u8d77\u4e0aversion control\u624d\u53ef\u4ee5\u4e32CI A build process is a logical concept: encompassing build scripts build integration servers build triggers shared team understanding and acceptance of how code is deployed and integrated \u5718\u968a\u7684agreement\u5f88\u91cd\u8981(\u5236\u5ea6\u963f) \u628a\u4f60\u7684build\u62c6\u5206\uff0c\u624d\u53ef\u4ee5\u7576\u6210\u662ffunction\u914d\u5408CI\u547c\u53eb A continuous integration (CI) build script - compile debug mode and run fast tests A nightly build script - build release, run slow tests, deploy to stage... A deployment build script - essentially a delivery mechanism I call them nightly builds, but they can be run many times a day. At the very least, they run once a night. They give more feedback but take more time to give it. \u6709\u4e9bCI servers\u540c\u6642\u63d0\u4f9bbuild script-related tasks\uff0c\u4e0d\u904ebuild script\u61c9\u8a72\u8981\u4e00\u8d77\u9032\u7248\u63a7\uff0c\u9019\u6a23\u56de\u5230\u820a\u7248\u672c\u6642\u624d\u6703\u6709\u6b63\u78ba\u7684build script \u4f5c\u8005\u4e0d\u611b\u7528MSBuild\u56e0\u70ba\u4ed6\u89ba\u5f97xml\u5f88\u96e3maintain\uff0c\u4f60\u6703\u597d\u5e7e\u500b\u6708\u7761\u89ba\u90fd\u5922\u5230\u4e00\u5806tag A CI server\u2019s main jobs are these: Trigger a build script based on specific events Provide build script context and data such as version, source code, and artifacts Provide an overview of build history and metrics Provide the current status of all the active and inactive builds A trigger can start a build script automatically when certain events occur, such as source control updates, time passing, or another build configuration failing or succeeding. \u4f60\u53ef\u80fd\u6703\u57f7\u884c\u4e00\u9023\u4e32\u7684\u5de5\u4f5c\u4f86\u5b8c\u6210\u6700\u5f8c\u7684build\uff0c\u7a31\u4ed6\u505abuild configuration\uff0c\u5efa\u8b70\u628a\u5979\u9650\u5236\u5728\u4e00\u4efd\u53ef\u57f7\u884c\u7684build script\u4e26\u9032\u5165\u7248\u63a7\uff0c\u78ba\u4fdd\u5de5\u4f5c\u7684\u76f8\u5bb9\u6027\u6700\u5927\u5316 Artifacts are the end results of running a build script. They could be binary files, configuration files, or any type of file.","title":"Automated builds running automated tests"},{"location":"Finished/Art%20of%20Unit%20Testing/#mapping-out-tests-based-on-speed-and-type","text":"\u628a\u55ae\u5143\u6e2c\u8a66\u8207\u6574\u5408\u6e2c\u8a66\u5206\u958b\uff0c\u4e0d\u9700\u8981\u5206\u6210\u4e0d\u540c\u7684test projects\uff0c\u4e0d\u540c\u7684folder\u6216namespace\u5c31\u5920\u4e86\u3002 \u4e0d\u5206\u958b\u6703\u767c\u751f\u751a\u9ebc\u4e8b? people not running your tests \u6e2c\u8a66\u58de\u6389\u7684\u5e7e\u7a2e\u53ef\uff1a There\u2019s a bug in the code under test. The test has a problem in the way it\u2019s written. The test is no longer relevant. The test requires some configuration to run. \u6700\u5f8c\u4e00\u7a2e\u8207\u958b\u767c\u8005\u6700\u7121\u95dc\uff0c\u901a\u5e38\u6703\u88ab\u5ffd\u7565\u56e0\u70ba\u8a8d\u70ba\u4ed6\u4e0d\u91cd\u8981\uff0c\u7576\u9019\u7a2e\u6574\u5408\u6e2c\u8a66\u85cf\u5728\u4f60\u7684\u6e2c\u8a66\u88e1\u9762\u6642\uff0c\u5f88\u5bb9\u6613\u6d6a\u8cbb\u6642\u9593\u8ddf\u91d1\u9322\u53bb\u627e\u4e0d\u5b58\u5728\u7684\u554f\u984c\uff0c\u800c\u4e14\u6bcf\u4e00\u6b21\u767c\u751f\u90fd\u6703\u4f7f\u5de5\u7a0b\u5e2b\u5931\u53bb\u5c0d\u6e2c\u8a66\u7684\u4fe1\u4efb\uff0c\u4e0b\u6b21\u53c8\u6709\u6e2c\u8a66\u58de\u6389\u7684\u6642\u5019\u53ef\u80fd\u53ea\u6703\u8aaa\"\u5662~\u90a3\u6e2c\u8a66\u5076\u723e\u6703\u58de\u6389\uff0c\u6c92\u4e8b\u5152\u6c92\u4e8b\u5152~\"","title":"Mapping out tests based on speed and type"},{"location":"Finished/Art%20of%20Unit%20Testing/#the-safe-green-zone","text":"\u5275\u9020\u53ea\u6709unit test\u7684The safe green zone\u8b93\u5de5\u7a0b\u5e2b\u4e0d\u6703\u6709 \u6c92\u4e8b\u5152\u6c92\u4e8b\u5152 \u5fc3\u614b\uff0c\u7576The safe green zone\u6c92\u904e\u5c31\u4ee3\u8868\u771f\u7684\u6709\u554f\u984c\u800c\u4e0d\u662fconfiguration\u51fa\u554f\u984c\u4e86\u3002 \u9019\u7576\u7136\u4e0d\u4ee3\u8868\u6574\u5408\u6e2c\u8a66\u5c31\u4e0d\u61c9\u8a72\u904e\uff0c\u53ea\u662f\u6574\u5408\u6e2c\u8a66\u901a\u5e38\u6bd4\u8f03\u6162\uff0c\u5206\u958b\u53ef\u4ee5\u8b93\u5de5\u7a0b\u5e2b\u7522\u80fd\u66f4\u9ad8\uff0c\u8dd1\u66f4\u591a\u6b21\u7684unit test\uff0c\u800c\u5728\u6bcf\u6b21unit test\u904e\u7684\u6642\u5019\u6709\u67d0\u4e9b\u7a0b\u5ea6\u7684\u4fe1\u5fc3\u3002 \u5206\u958b\u4e5f\u53ef\u4ee5\u8b93\u6574\u5408\u6e2c\u8a66\u6709\u81ea\u5df1\u78ba\u4fdd\u80fd\u901a\u904e\u6e2c\u8a66\u7684\u74b0\u5883\uff0c\u4e5f\u53ef\u4ee5\u8a73\u7d30\u7684\u6587\u4ef6\u8a18\u9304\u5982\u4f55configuration\u3002","title":"The safe green zone"},{"location":"Finished/Art%20of%20Unit%20Testing/#ensuring-tests-are-part-of-source-control","text":"\u5ee2\u8a71","title":"Ensuring tests are part of source control"},{"location":"Finished/Art%20of%20Unit%20Testing/#mapping-test-classes-to-code-under-test","text":"\u6e2c\u8a66\u7684\u914d\u7f6e\u61c9\u8a72\u6eff\u8db3\u4ee5\u4e0b: Look at a project and find all the tests that relate to it Look at a class and find all the tests that relate to it Look at a method and find all the tests that relate to it \u4f5c\u8005\u7684\u914d\u7f6e\u6e2c\u8a66project\u7684\u65b9\u5f0f\uff1a xxxProject xxxProject.UnitTests xxxProject.IntegrationTests \u914d\u7f6e\u6e2c\u8a66class\u6709\u5404\u7a2e\u65b9\u5f0f\uff0c\u8a0e\u8ad6\u4e3b\u8981\u7684\u5169\u7a2e","title":"Mapping test classes to code under test"},{"location":"Finished/Art%20of%20Unit%20Testing/#one-test-class-per-class-or-unit-of-work-under-test","text":"xxxClass xxxClass.UnitTests The one-test-class-per-class pattern (also mentioned in Meszaros\u2019s xUnit Test Patterns: Refactoring Test Code ) is the simplest and most common pattern for organizing tests. \u4e00\u500bclass\u6240\u6709\u7684method\u6e2c\u8a66\u90fd\u585e\u5728\u4e00\u500b\u5927\u6e2c\u8a66class\u88e1\uff0c\u7f3a\u9ede\u662f\u6709\u53ef\u80fd\u9019\u500b\u6e2c\u8a66class\u6703\u9577\u592a\u5927\u8b93\u4f60\u5f88\u96e3\u770b\uff0c\u6709\u6642\u5019\u4e00\u500b\u65b9\u6cd5\u7684\u6e2c\u8a66\u76f4\u63a5\u6df9\u6c92\u5176\u4ed6\u65b9\u6cd5\uff0c\u9019\u4e5f\u8868\u793a\u90a3\u500b\u65b9\u6cd5\u7684\u6e2c\u8a66\u6216\u8a31\u592a\u591a\u4e86\u3002","title":"ONE TEST CLASS PER CLASS OR UNIT OF WORK UNDER TEST"},{"location":"Finished/Art%20of%20Unit%20Testing/#one-test-class-per-feature","text":"An alternative is creating a separate test class for a particular feature (which could be as small as a method). The one-test-class-per-feature pattern is also mentioned in Meszaros\u2019s book. xxxClassTests xxxClassTestsyyyMethod","title":"ONE TEST CLASS PER FEATURE"},{"location":"Finished/Art%20of%20Unit%20Testing/#cross-cutting-concerns-injection","text":"When you\u2019re dealing with cross-cutting concerns such as time management, or exceptions, or logging, you might end up with code that\u2019s less readable and maintainable when using these techniques. \u5047\u8a2d\u6709\u96bb\u7a0b\u5f0f\u4f7f\u7528 DateTime public static class TimeLogger { public static string CreateMessage(string info) { return DateTime.Now.ToShortDateString() + \" \" + info; } } \u800c\u70ba\u4e86\u8b93\u4ed6\u80fd\u88ab\u6e2c\u8a66\u4f60\u53ef\u80fd\u9700\u8981 ITimeProvider \uff0c\u9019\u6703\u8b93\u4f60\u6bcf\u6b21\u7528\u5230 DateTime \u90fd\u9700\u8981\u82b1\u6642\u9593\u5beb\u9019\u500binterface\uff0c\u9084\u8b93\u4f60\u7684\u7a0b\u5f0f\u8b8a\u5f97\u96e3\u8b80\u4e86\u3002 \u53e6\u4e00\u7a2e\u66f4\u597d\u7684\u505a\u6cd5\uff1a\u81ea\u5df1\u5beb\u4e00\u500b SystemTime \u5305\u8d77\u4f86\uff0c\u540c\u6642\u78ba\u4fdd\u4f60\u7684\u7a0b\u5f0f\u4e0d\u518d\u4f7f\u7528 DateTime Using the SystemTime class public static class TimeLogger { public static string CreateMessage(string info) { return SystemTime.Now.ToShortDateString() + \" \" + info; } } public class SystemTime { private static DateTime _date; public static void Set(DateTime custom) { _date = custom; } public static void Reset() { _date=DateTime.MinValue; } public static DateTime Now { get { if (_date != DateTime.MinValue) { return _date; } return DateTime.Now; } } } A test using SystemTime [TestFixture] public class TimeLoggerTests { [Test] public void SettingSystemTime_Always_ChangesTime() { SistemTime.Set(new DateTime(2000,1,1)); string output = TimeLogger.CreateMessage(\"a\"); StringAssert.Contains(\"01.01.2000\", output); } [TearDown] public void afterEachTest() { SystemTime.Reset(); } } \u6709\u53ef\u80fd\u6703\u78b0\u5230\u8a9e\u8a00\u554f\u984c\uff0cNunit\u7684 CultureInfoAttribute \u53ef\u4ee5\u5e6b\u9019\u500b\u5fd9 \u8b66\u544a\uff1a This type of external abstraction of a cross-cutting concern allows you to create a fake focal point in your production code instead of many small ones. But it only makes sense for things that are used throughout the system. If you use this for everything, you end up with a system that might be just as hard to read as what you\u2019re trying to avoid. \u5982\u4f55\u78ba\u4fdd\u5927\u5bb6\u90fd\u7528SystemTime->code review\u6216replace tool","title":"Cross-cutting concerns injection"},{"location":"Finished/Art%20of%20Unit%20Testing/#building-a-test-api-for-your-application","text":"\u4f60\u7684\u6e2c\u8a66\u8d8a\u5beb\u8d8a\u591a\u81ea\u7136\u6703\u6162\u6162\u4e5f\u628a\u6e2c\u8a66\u91cd\u69cb\u3001\u65b0\u589e\u61c9\u7528api\u7b49\u7b49\uff1a Use inheritance in your test classes for code reuse, guidance, and more. Create test utility classes and methods. Make your API known to developers.","title":"Building a test API for your application"},{"location":"Finished/Art%20of%20Unit%20Testing/#using-test-class-inheritance-patterns","text":"DRY!! One of the most powerful arguments for object-oriented code is that you can reuse existing functionality instead of recreating it over and over again in other classes\u2014what Andy Hunt and Dave Thomas called the DRY (\u201cdon\u2019t repeat yourself\u201d) principle in The Pragmatic Programmer (Addison-Wesley Professional, 1999). \u963f\u56e0\u70ba\u4f60\u7684\u6e2c\u8a66\u4e5f\u662f\u7528.NET\u5beb\u7684,\u4e0d\u8981\u5c0d\u4f7f\u7528\u7e7c\u627f\u611f\u5230\u7f6a\u60e1XD Implementing a base class can help alleviate standard problems in test code in the following ways: Reusing utility and factory methods Running the same set of tests over different classes (we\u2019ll look at this one in more detail) Using common setup or teardown code (also useful for integration testing) Creating testing guidance for programmers who will derive from the base class \u4ecb\u7d39\u4e09\u7a2e\u4f7f\u7528\u7e7c\u627f\u7684\u6e2c\u8a66pattern abstract test infrastructure class Template test class Abstract test driver class \u548c\u5169\u7a2e\u53ef\u4ee5\u4f7f\u7528\u5728\u4e0a\u9762pattern\u7684\u91cd\u69cb\u6280\u5de7 Refactoring into a class hierarchy Using generics","title":"Using test class inheritance patterns"},{"location":"Finished/Art%20of%20Unit%20Testing/#abstract-test-infrastructure-class-pattern","text":"The abstract test infrastructure class pattern creates an abstract test class that contains essential common infrastructure for test classes deriving from it. Scenarios where you\u2019d want to create such a base class can range from having common setup and teardown code to having special custom asserts that are used throughout multiple test classes. \u5047\u8a2d\u6709\u500bLoggingFacility\u53ef\u80fd\u5f88\u591a\u5730\u65b9\u6703\u7528\u5230\uff0c\u4f8b\u5982\u9019\u88e1LogAnalyzer\u8207ConfigurationManager\u90fd\u9700\u8981\u4f7f\u7528\uff0c\u9019\u6642\u5019\u6703\u5728\u9019\u5169\u500bclass\u7684\u6e2c\u8a66\u4e2d\u5404\u5225fake LoggingFacility //This class uses the LoggingFacility Internally public class LogAnalyzer { public void Analyze(string fileName) { if (fileName.Length < 8) { LoggingFacility.Log(\"Filename too short:\" + fileName); } //rest of the method here } } //another class that uses the LoggingFacility internally public class ConfigurationManager { public bool IsConfigured(string configName) { LoggingFacility.Log(\"checking \" + configName); return result; } } public static class LoggingFacility { public static void Log(string text) { logger.Log(text); } private static ILogger logger; public static ILogger Logger { get { return logger; } set { logger = value; } } } [TestFixture] public class LogAnalyzerTests { [Test] public void Analyze_EmptyFile_ThrowsException() { LogAnalyzer la = new LogAnalyzer(); la.Analyze(\"myemptyfile.txt\"); //rest of test } [TearDown] public void teardown() { // need to reset a static resource between tests LoggingFacility.Logger = null; } } [TestFixture] public class ConfigurationManagerTests { [Test] public void Analyze_EmptyFile_ThrowsException() { ConfigurationManager cm = new ConfigurationManager(); bool configured = cm.IsConfigured(\"something\"); //rest of test } [TearDown] public void teardown() { // need to reset a static resource between tests LoggingFacility.Logger = null; } } \u5275\u9020\u4e00\u500b\u61c9\u7528\u578b\u7684base class\u4f86\u91cd\u69cb\u5b83\uff0c\u4e0d\u4f7f\u7528[SetUp]\u56e0\u70ba\u6703\u5f71\u97ff\u53ef\u8b80\u6027\uff0c\u800c\u4e14\u6703\u8b93\u6240\u6709\u6e2c\u8a66\u4e00\u5b9a\u6703\u57f7\u884c\u5b83\uff0c\u770b\u6e2c\u8a66\u7684\u4eba\u53ef\u80fd\u6703\u4e0d\u77e5\u9053\u767c\u751f\u4e86\u751a\u9ebc\u4e8b\u800c\u5fc5\u9808\u53bb\u770bbase class (\u6211\u8aaa\u9019\u7e7c\u627f\u7528\u5f97\u9084\u9817\u66b4\u529b) A refactored solution [TestFixture] public class BaseTestsClass { public ILogger FakeTheLogger() { LoggingFacility.Logger = Substitute.For<ILogger>(); return LoggingFacility.Logger; } [TearDown] public void teardown() { // need to reset a static resource between tests LoggingFacility.Logger = null; } } [TestFixture] public class ConfigurationManagerTests:BaseTestsClass { [Test] public void Analyze_EmptyFile_ThrowsException() { FakeTheLogger(); ConfigurationManager cm = new ConfigurationManager(); bool configured = cm.IsConfigured(\"something\"); //rest of test } } [TestFixture] public class LogAnalyzerTests : BaseTestsClass { [Test] public void Analyze_EmptyFile_ThrowsException() { FakeTheLogger(); LogAnalyzer la = new LogAnalyzer(); la.Analyze(\"myemptyfile.txt\"); //rest of test } } \u7f3a\u9ede\uff1a\u5f71\u97ff\u53ef\u8b80\u6027\uff0c\u5176\u4ed6\u7684\u958b\u767c\u8005\u4e0d\u78ba\u5b9a\u5982\u4f55\u4f7f\u7528\u9019\u500bbase class\u7684API\uff0c\u6240\u4ee5\u76e1\u91cf\u5c11\u7528\uff0c\u901a\u5e38\u4f7f\u7528\u4e00\u500b\u6548\u679c\u5c31\u5f88\u4e0d\u932f\u4e86\uff0c\u7136\u5f8c\u5343\u842c\u4e0d\u8981\u591a\u5c64\u7e7c\u627f\u3002","title":"ABSTRACT TEST INFRASTRUCTURE CLASS PATTERN"},{"location":"Finished/Art%20of%20Unit%20Testing/#template-test-class-pattern","text":"Let\u2019s say you want to make sure people who test specific kinds of classes in the code never forget to go through a certain set of unit tests for them as they develop the classes; for example, network code with packets, security code, database-related code, or just plain-old parsing code. The point is, you know that when they work on this kind of class in code, some tests must exist because that kind of class has to provide a known set of services with its API. \u6211\u8981\u53eb\u4ed6 \u5f37\u8feb\u4f60\u8981\u5beb\u9019\u4e9b\u6e2c\u8a66pattern \u5047\u8a2d\u4f60\u6709\u500babstract class\u53eb BaseStringParser \uff0c\u7136\u5f8c\u6709\u4e09\u500b\u5b50\u985e\u5225 XMLStringParser , IISLogStringParser , and StandardStringParser \uff0c\u4ed6\u5011\u90fd\u652f\u63f4\u5f9eheader\u53d6\u5f97\u672c\u8cc7\u8a0a\u7684\u65b9\u6cd5\uff0c\u9996\u5148\u6311\u4e00\u500b\u5beb\uff1a An outline of a test class for StandardStringParser [TestFixture] public class StandardStringParserTests { private StandardStringParser GetParser(string input) { return new StandardStringParser(input); } [Test] public void GetStringVersionFromHeader_SingleDigit_Found() { string input = \"header;version=1;\\n\"; StandardStringParser parser = GetParser(input string versionFromHeader = parser.GetStringVersionFromHeader(); Assert.AreEqual(\"1\",versionFromHeader); } [Test] public void GetStringVersionFromHeader_WithMinorVersion_Found() { string input = \"header;version=1.1;\\n\"; StandardStringParser parser = GetParser(input); //rest of the test } [Test] public void GetStringVersionFromHeader_WithRevision_Found() { string input = \"header;version=1.1.1;\\n\"; StandardStringParser parser = GetParser(input); //rest of the test } } \u6ce8\u610f\u4e0a\u9762\u4f7f\u7528\u4e86helper method GetParser \u800c\u4e0d\u662f\u4f7f\u7528setup method\uff0c\u9019\u6a23\u624d\u53ef\u4ee5\u88e1\u7528constructor\u6bcf\u6b21\u5e36\u5165\u81ea\u5df1\u7684\u53c3\u6578\u6210\u70ba\u6bcf\u500b\u6e2c\u8a66\u81ea\u5df1\u7684parser \u5982\u4f55\u5f37\u8feb\u5b50\u985e\u5225\u4e5f\u8981\u52a0\u5165\u7279\u5b9a\u6e2c\u8a66\u5462?=>\u7e7c\u627fabstract class A template test class for testing string parsers [TestFixture] public abstract class TemplateStringParserTests { public abstract void TestGetStringVersionFromHeader_SingleDigit_Found(); public abstract void TestGetStringVersionFromHeader_WithMinorVersion_Found(); public abstract void TestGetStringVersionFromHeader_WithRevision_Found(); } [TestFixture] public class XmlStringParserTests : TemplateStringParserTests { protected IStringParser GetParser(string input) { return new XMLStringParser(input); } [Test] public override void TestGetStringVersionFromHeader_SingleDigit_Found() { IStringParser parser = GetParser(\"<Header>1</Header>\"); string versionFromHeader = parser.GetStringVersionFromHeader(); Assert.AreEqual(\"1\",versionFromHeader); } [Test] public override void TestGetStringVersionFromHeader_WithMinorVersion_Found() { IStringParser parser = GetParser(\"<Header>1.1</Header>\"); string versionFromHeader = parser.GetStringVersionFromHeader(); Assert.AreEqual(\"1.1\",versionFromHeader); } [Test] public override void TestGetStringVersionFromHeader_WithRevision_Found() { IStringParser parser = GetParser(\"<Header>1.1.1</Header>\"); string versionFromHeader = parser.GetStringVersionFromHeader(); Assert.AreEqual(\"1.1.1\",versionFromHeader); } } \u6ce8\u610f GetParser \u53ea\u662f\u500b\u4e00\u822c\u7684method\u4e0d\u542b\u5728abstract class\uff0c\u6c92\u591a\u8aaa\u70ba\u4ec0\u9ebc I use the word Test to prefix the abstract methods in the base class, so that people who override them in derived classes have an easier time finding what\u2019s important to override.","title":"TEMPLATE TEST CLASS PATTERN"},{"location":"Finished/Art%20of%20Unit%20Testing/#abstract-fill-in-the-blanks-test-driver-class-pattern","text":"\u6700\u7d42\u62db\uff1a\u628a\u6e2c\u8a66\u5beb\u5728base\uff0c\u6e2c\u8a66\u9700\u8981\u7684\u4e00\u4e9b\u5be6\u4f5c\u4ea4\u7d66\u5b50\u985e\u5225 A \u201cfill in the blanks\u201d base test class public abstract class FillInTheBlanksStringParserTests { protected abstract IStringParser GetParser(string input); protected abstract string HeaderVersion_SingleDigit { get; } protected abstract string HeaderVersion_WithMinorVersion {get;} protected abstract string HeaderVersion_WithRevision { get; } public const string EXPECTED_SINGLE_DIGIT = \"1\"; public const string EXPECTED_WITH_REVISION = \"1.1.1\"; public const string EXPECTED_WITH_MINORVERSION = \"1.1\"; [Test] public void GetStringVersionFromHeader_SingleDigit_Found() { string input = HeaderVersion_SingleDigit; IStringParser parser = GetParser(input); string versionFromHeader = parser.GetStringVersionFromHeader(); Assert.AreEqual(EXPECTED_SINGLE_DIGIT,versionFromHeader); } [Test] public void GetStringVersionFromHeader_WithMinorVersion_Found() { string input = HeaderVersion_WithMinorVersion; IStringParser parser = GetParser(input); string versionFromHeader = parser.GetStringVersionFromHeader(); Assert.AreEqual(EXPECTED_WITH_MINORVERSION,versionFromHeader); } [Test] public void GetStringVersionFromHeader_WithRevision_Found() { string input = HeaderVersion_WithRevision; IStringParser parser = GetParser(input); string versionFromHeader = parser.GetStringVersionFromHeader(); Assert.AreEqual(EXPECTED_WITH_REVISION,versionFromHeader); } } [TestFixture] public class StandardStringParserTests : FillInTheBlanksStringParserTests { protected override string HeaderVersion_SingleDigit { get { return string.Format(\"header\\tversion={0}\\t\\n\", EXPECTED_SINGLE_DIGIT); } } protected override string HeaderVersion_WithMinorVersion { get { return string.Format(\"header\\tversion={0}\\t\\n\", EXPECTED_WITH_MINORVERSION); } } protected override string HeaderVersion_WithRevision { get { return string.Format(\"header\\tversion={0}\\t\\n\", EXPECTED_WITH_REVISION); } } protected override IStringParser GetParser(string input) { return new StandardStringParser(input); } } \u5b50\u985e\u5225\u6c92\u6709\u4efb\u4f55\u6e2c\u8a66","title":"ABSTRACT \u201cFILL IN THE BLANKS\u201d TEST DRIVER CLASS PATTERN"},{"location":"Finished/Art%20of%20Unit%20Testing/#refactoring-your-test-class-into-a-test-class-hierarchy","text":"\u5982\u4f55\u628a\u65e2\u6709\u6e2c\u8a66\u91cd\u69cb\u6210\u4e0a\u9762\u90a3\u6a23? Here\u2019s a list of possible steps for refactoring your test class: Refactor: extract the superclass. Create a base class (BaseXXXTests). Move the factory methods (like GetParser) into the base class. Move all the tests to the base class. Extract the expected outputs into public fields in the base class. Extract the test inputs into abstract methods or properties that the derived classes will create. Refactor: make factory methods abstract, and return interfaces. Refactor: find all the places in the test methods where explicit class types are used, and change them to use the interfaces of those types instead. In the derived class, implement the abstract factory methods and return the explicit types.","title":"REFACTORING YOUR TEST CLASS INTO A TEST CLASS HIERARCHY"},{"location":"Finished/Art%20of%20Unit%20Testing/#a-variation-using-net-generics-to-implement-test-hierarchy","text":"You can use generics as part of the base test class. This way, you don\u2019t need to override any methods in derived classes; just declare the type you\u2019re testing against. Implementing test case inheritance with .NET generics //An example of the same idea using Generics public abstract class GenericParserTests<T> where T:IStringParser { protected abstract string GetInputHeaderSingleDigit(); protected T GetParser(string input { return (T) Activator.CreateInstance(typeof (T), input); } [Test] public void GetStringVersionFromHeader_SingleDigit_Found() { string input = GetInputHeaderSingleDigit(); T parser = GetParser(input); bool result = parser.HasCorrectHeader(); Assert.IsFalse(result); } //more tests //... } //An example of a test inheriting from a Generic Base Class [TestFixture] public class StandardParserGenericTests:GenericParserTests<StandardStringParser> { protected override string GetInputHeaderSingleDigit() { return \"Header;1\"; } } \u53ea\u662f\u4e00\u500b\u4f8b\u5b50\uff0cgeneric\u770b\u8d77\u4f86\u4e5f\u6c92\u6709\u5176\u4ed6\u597d\u8655\uff0c\u5c24\u5176\u662f\u6e2c\u8a66\u4e0d\u592a\u9700\u8981\u9019\u7a2e\u6027\u80fd\u63d0\u5347","title":"A VARIATION USING .NET GENERICS TO IMPLEMENT TEST HIERARCHY"},{"location":"Finished/Art%20of%20Unit%20Testing/#creating-test-utility-classes-and-methods","text":"\u6e2c\u8a66\u8d8a\u5beb\u8d8a\u591a\u5c31\u6703\u6162\u6162\u7522\u751f\u5404\u7a2eutility methods You might end up with the following types of utility methods: Factory methods for objects that are complex to create or that routinely get created by your tests. System initialization methods (such as methods for setting up the system state before testing, or changing logging facilities to use stub loggers). Object configuration methods (for example, methods that set the internal state of an object, such as setting a customer to be invalid for a transaction). Methods that set up or read from external resources such as databases, configuration files, and test input files (for example, a method that loads a text file with all the permutations you\u2019d like to use when sending in inputs for a specific method and the expected results). This is more commonly used in integration or system testing. Special assert utility methods, which may assert something that\u2019s complex or that\u2019s repeatedly tested inside the system\u2019s state. (If something was written to the system log, the method might assert that X, Y, and Z are true, but not G.) You may end up refactoring your utility methods into these types of utility classes: Special assert utility classes that contain all the custom assert methods Special factory classes that hold the factory methods Special configuration classes or database configuration classes that hold integration-style actions .NET\u4e16\u754c\u6709\u4e9b\u4e0d\u932f\u7684uitlity frameworks\u4f8b\u5982 Fluent Assertions \u64c1\u6709\u9019\u4e9bunitlity methods\u4e0d\u4ee3\u8868\u4fdd\u8b49\u4efb\u4f55\u4eba\u90fd\u6703\u4f7f\u7528\u5b83\uff0c\u4f60\u7d93\u5e38\u6703\u9047\u5230\u5de5\u7a0b\u5e2b\u91cd\u8907\u9020\u8f2a\uff0c\u6240\u4ee5\u4f60\u9700\u8981\u8b93\u5225\u4eba\u77e5\u9053\u9019\u4e9bAPI\u7684\u5b58\u5728","title":"Creating test utility classes and methods"},{"location":"Finished/Art%20of%20Unit%20Testing/#making-your-api-known-to-developers","text":"\u5982\u4f55\u8b93\u4f60\u7684APIs\u8b8a\u6709\u540d? Have teams of two people write tests together (at least once in a while), where one is familiar with the existing APIs and can teach the other, as they write new tests, about the existing benefits and code that could be used. Have a short document (no more than a couple of pages) or a cheat sheet that details the types of APIs out there and where to find them. You can create short documents for specific parts of your testing framework (APIs specific to the data layer, for example) or a global one for the whole application. If it\u2019s not short, no one will maintain it. One possible way to make sure it\u2019s up to date is by automating the generation process: Have a known set of prefixes or postfixes on the API helpers\u2019 names (helper [something], for example). Have a special tool that parses out the API names and their locations and generates a document that lists them and where to find them, or have some simple directives that the special tool can parse from comments you put on them. Automate the generation of this document as part of the automated build process. Discuss changes to the APIs during team meetings\u2014one or two sentences outlining the main changes and where to look for the significant parts. That way the team knows that this is important and it\u2019s always a consideration. Go over this document with new employees during their orientation.","title":"Making your API known to developers"},{"location":"Finished/Art%20of%20Unit%20Testing/#summary_6","text":"Whatever testing you do\u2014however you do it\u2014automate it, use an automated build process to run it as many times as possible during the day or night, and continuously deliver the product as much as possible. Separate the integration tests from the unit tests (the slow tests from the fast ones) so that your team can have a safe green zone where all the tests must pass. Map out tests by project and by type (unit versus integration tests, slow versus fast tests), and separate them into different directories, folders, or namespaces (or all of these). I usually use all three types of separation. Use a test class hierarchy to apply the same set of tests to multiple related types under test in a hierarchy or to types that share a common interface or base class. Use helper classes and utility classes instead of hierarchies if the test class hierarchy makes tests less readable, especially if there\u2019s a shared setup method in the base class. Different people have different opinions on when to use which, but readability is usually the key reason for not using hierarchies. Make your API known to your team. If you don\u2019t, you\u2019ll lose time and money as team members unknowingly reinvent APIs over and over again.","title":"Summary"},{"location":"Finished/Art%20of%20Unit%20Testing/#chapter-8-the-pillars-of-good-unit-tests","text":"\u6e2c\u8a66\u4e09\u672c\u67f1\uff1a Trustworthiness \u2014Developers will want to run trustworthy tests, and they\u2019ll accept the test results with confidence. Trustworthy tests don\u2019t have bugs, and they test the right things. Maintainability \u2014Unmaintainable tests are nightmares because they can ruin project schedules, or they may be sidelined when the project is put on a more aggressive schedule. Developers will simply stop maintaining and fixing tests that take too long to change or that need to change very often on very minor production code changes. Readability \u2014This means not just being able to read a test but also figuring out the problem if the test seems to be wrong. Without readability, the other two pillars fall pretty quickly. Maintaining tests becomes harder, and you can\u2019t trust them anymore because you don\u2019t understand them.","title":"Chapter 8: The pillars of good unit tests"},{"location":"Finished/Art%20of%20Unit%20Testing/#writing-trustworthy-tests","text":"\u6240\u8b02\u503c\u5f97\u4fe1\u8cf4\u7684\u6e2c\u8a66\u5c31\u662f\u7576\u5b83\u58de\u4e86\u4f60\u6703\u8a8d\u70ba\u771f\u7684\u662f\u4f60\u7684\u7a0b\u5f0f\u78bc\u6709\u554f\u984c\u3002 \u4e00\u4e9b\u65b9\u5f0f\u5e6b\u52a9\u4f60\u7684\u6e2c\u8a66\u66f4\u503c\u5f97\u4fe1\u4efb\uff1a Decide when to remove or change tests Avoid test logic Test only one concern Separate unit from integration tests Push for code reviews as much as you push for code coverage","title":"Writing trustworthy tests"},{"location":"Finished/Art%20of%20Unit%20Testing/#deciding-when-to-remove-or-change-tests","text":"\u7c21\u55ae\u4f86\u8aaa\u5c31\u662f\u8981\u5b9a\u671f\u6574\u7406\u4f60\u7684\u6e2c\u8a66\u7a0b\u5f0f\u62c9 The main reason for removing a test is because it fails. A test can suddenly fail for several reasons: Production bugs\u2014There\u2019s a bug in the production code under test. Test bugs\u2014There\u2019s a bug in the test. Semantics or API changes\u2014The semantics of the code under test changed but not the functionality. Conflicting or invalid tests\u2014The production code was changed to reflect a conflicting requirement. There are also reasons for changing or removing tests when nothing is wrong with the tests or code: To rename or refactor the test To eliminate duplicate tests","title":"Deciding when to remove or change tests"},{"location":"Finished/Art%20of%20Unit%20Testing/#production-bugs","text":"\u662f\u6700\u6b63\u5e38\u7684\u60c5\u6cc1\uff0c\u597d\u68d2\u68d2\u3002","title":"PRODUCTION BUGS"},{"location":"Finished/Art%20of%20Unit%20Testing/#test-bugs","text":"Bugs in tests are notoriously hard to detect, because tests are assumed to be correct. \u6e2c\u8a66\u7a0b\u5f0f\u9577\u87f2\u4e4b\u958b\u767c\u8005\u56db\u968e\u6bb5\uff1a Denial \u2014The developer will keep looking for a problem in the code itself, changing it, causing all the other tests to start failing. The developer introduces new bugs into production code while hunting for the bug that\u2019s actually in the test. Amusement \u2014The developer will call another developer, if possible, and they will hunt for the nonexistent bug together. Debuggerment \u2014The developer will patiently debug the test and discover that there\u2019s a problem in the test. This can take anywhere from an hour to a couple of days. Acceptance and slappage \u2014The developer will eventually realize where the bug is and will slap their forehead. \u4fee\u6b63\u6e2c\u8a66\u4e09\u6b65\u9a5f\uff1a Fix the bug in your test. Make sure the test fails when it should. Make sure the test passes when it should. \u518d\u6b21\u91cd\u7533\u7576\u4f60\u4fee\u6b63\u5b8c\u6e2c\u8a66\u4e4b\u5f8c\u6700\u597d\u518d\u78ba\u8a8d\u4e00\u6b21\u7576\u5b83\u6b63\u5e38\u7684\u6642\u5019\u6703pass\u6709bug\u7684\u6642\u5019\u6703fail\u3002 I\u2019ve seen developers accidentally delete the asserts from their tests when fixing bugs in tests. You\u2019d be surprised how often that happens and how effective step 2 is at catching these cases.","title":"TEST BUGS"},{"location":"Finished/Art%20of%20Unit%20Testing/#semantics-or-api-changes","text":"\u8209\u500b\u4f8b\uff0c\u5047\u8a2d\u4eca\u5929 LogAnalyzer \u9700\u8981\u5148 Initialize \u624d\u80fd\u4f7f\u7528\uff0c\u5c31\u6703\u8b93\u9019\u500b\u539f\u672c\u5b58\u5728\u7684\u6e2c\u8a66fail A simple test against the LogAnalyzer class [Test] public void SemanticsChange() { LogAnalyzer logan = new LogAnalyzer(); Assert.IsFalse(logan.IsValid(\"abc\")); } \u4fee\u6b63\u6e2c\u8a66\uff1a The changed test using the new semantics of LogAnalyzer [Test] public void SemanticsChange() { LogAnalyzer logan = new LogAnalyzer(); logan.Initialize(); Assert.IsFalse(logan.IsValid(\"abc\")); } \u56e0\u70ba\u9019\u7a2e\u539f\u56e0\u800c\u6539\u52d5\u6e2c\u8a66\u7684\u9ad4\u9a57\u662f\u975e\u5e38\u5dee\u7684\uff0c\u5c24\u5176\u7a0b\u5f0f\u8d8a\u9577\u8d8a\u5927\u7684\u6642\u5019\u3002 A refactored test using a factory method [Test] public void SemanticsChange() { LogAnalyzer logan = MakeDefaultAnalyzer(); Assert.IsFalse(logan.IsValid(\"abc\")); } public static LogAnalyzer MakeDefaultAnalyzer() { LogAnalyzer analyzer = new LogAnalyzer(); analyzer.Initialize(); return analyzer; } \u4f7f\u7528 factory method \u4f86\u964d\u4f4e\u9019\u985e\u7dad\u8b77\u6210\u672c\uff0c\u6709\u4e9b\u5de5\u5177\u5c08\u9580\u5728\u505a\u9019\u4ef6\u4e8b\u60c5\uff0c\u4f8b\u5982 AutoFixture \uff0c\u4e0d\u904e\u5275\u500bfactory method\u4e5f\u6c92\u9ebc\u5927\u4e0d\u4e86\u3002","title":"SEMANTICS OR API CHANGES"},{"location":"Finished/Art%20of%20Unit%20Testing/#conflicting-or-invalid-tests","text":"\u53bb\u554f\u4f60\u5bb6PM\u5230\u5e95\u8981\u54ea\u500b\u898f\u683c\u62c9? Seriously, if I catch another person commenting out something instead of deleting it, I will write a whole book titled Why God Invented Source Control .","title":"CONFLICTING OR INVALID TESTS"},{"location":"Finished/Art%20of%20Unit%20Testing/#renaming-or-refactoring-tests","text":"\u5c31\u662f\u6539\u5f97\u66f4\u597d\u8b80","title":"RENAMING OR REFACTORING TESTS"},{"location":"Finished/Art%20of%20Unit%20Testing/#eliminating-duplicate-tests","text":"\u91cd\u8907\u7684\u6e2c\u8a66\u4e0d\u4e00\u5b9a\u662f\u58de\u4e8b\uff1a The more (good) tests you have, the more certain you are to catch bugs. You can read the tests and see different ways or semantics of testing the same thing. \u8981\u4e0d\u8981\u780d\u4f60\u81ea\u5df1\u6c7a\u5b9a\uff1a Here are some of the cons of having duplicate tests: It may be harder to maintain several different tests that provide the same functionality. Some tests may be higher quality than others, and you need to review them all for correctness. Multiple tests may break when a single thing doesn\u2019t work. (This may not really be undesirable.) Similar tests must be named differently, or the tests can be spread across different classes. Multiple tests may create more maintainability issues. Here are some pros: Tests may have small differences and so can be thought of as testing the same things slightly differently. They may make for a larger and better picture of the object being tested. Some tests may be more expressive than others, so more tests may improve the chances of test readability.","title":"ELIMINATING DUPLICATE TESTS"},{"location":"Finished/Art%20of%20Unit%20Testing/#avoiding-logic-in-tests","text":"\u6e2c\u8a66\u5982\u679c\u52a0\u5165\u8d8a\u4f86\u8d8a\u591a\u7684\u908f\u8f2f\u5c31\u8d8a\u5bb9\u6613\u7522\u751fbug I\u2019ve seen plenty of tests that should have been simple become dynamically logic-changing, random-number-generating, thread-creating file-writing monsters that are little test engines in their own right. \u6709\u6642\u5019\u9019\u4e9b\u6771\u897f\u662f\u5fc5\u8981\u7684\uff0c\u4f46\u901a\u5e38\u6703\u653e\u5728 integration test \u800c\u4e0d\u662f unit test \u3002 unit test\u4e0d\u8a72\u6709\u9019\u4e9b\u6771\u897f\uff1a switch , if , or else statements foreach , for , or while loops \u6e2c\u8a66\u6709\u908f\u8f2f\u901a\u5e38\u4ee3\u8868\u4e00\u6b21\u6e2c\u8d85\u904e\u4e00\u7a2e\u6771\u897f\uff0c\u4e14\u53ef\u8b80\u6027\u5dee\u53c8\u8106\u5f31\uff0c\u5f88\u6709\u53ef\u80fd\u96b1\u85cfbug\u3002unit test\u4e0d\u61c9\u8a72\u6709control flows\u751a\u81f3\u9023try-catch\u90fd\u4e0d\u8a72\u6709\uff0c\u9019\u4e9b\u6703\u9020\u6210\u4ee5\u4e0b\u554f\u984c\uff1a The test is harder to read and understand. The test is hard to re-create. (Imagine a multithreaded test or a test with random numbers that suddenly fails.) The test is more likely to have a bug or to test the wrong thing. Naming the test may be harder because it does multiple things. \u5982\u679c\u4f60\u5fc5\u9808\u8981\u5beb\u9019\u7a2e monster test \uff0c\u8acb\u4e0d\u8981\u7528\u5b83\u4f86\u53d6\u4ee3\u4efb\u4f55\u65e2\u6709\u7684\u6e2c\u8a66\uff0c\u4e14\u5fc5\u9808\u6a19\u660e\u5b83\u662f integration test \u3002 \u53e6\u4e00\u7a2e\u4f9d\u8a72\u8981\u907f\u514d\u5730\u542b\u6709\u908f\u8f2f\u7684\u6e2c\u8a66\uff1a [Test] public void ProductionLogicProblem() { string user =\"USER\"; string greeting=\"GREETING\"; string actual = MessageBuilder.Build(user,greeting); Assert.AreEqual(user + greeting,actual); } \u9019\u500b\u6e2c\u8a66\u7684\u554f\u984c\u5728expected result\u662f\u52d5\u614b\u751f\u6210\uff0c\u4ed6\u91cd\u8907\u4e86production code\u7684\u7f85\u908f\u8f2f\uff0c\u56e0\u70ba\u5beb\u6e2c\u8a66\u8207\u5bebproduction code\u7684\u901a\u5e38\u662f\u540c\u4e00\u4eba\u3002\u5be6\u969b\u4e0a\u9019\u6bb5\u6e2c\u8a66\u8ddfproduction code\u540c\u6a23\u90fd\u5c11\u4e86\u4e00\u500b\u7a7a\u767d\u3002 [Test] public void ProductionLogicProblem() { string actual = MessageBuilder.Build(\"user\",\"greeting\"); Assert.AreEqual\"user greeting\",actual); } \u5728\u6e2c\u8a66\u7684\u4e16\u754c hardcod \u624d\u662f\u738b\u9053\u3002","title":"Avoiding logic in tests"},{"location":"Finished/Art%20of%20Unit%20Testing/#testing-only-one-concern","text":"A concern, as explained before, is a single end result from a unit of work: a return value, a change to system state, or a call to a third-party object. For example, if your unit test asserts on more than a single object, it may be testing more than one concern. \u6e2c\u8a66\u8d85\u904e\u4e00\u4ef6\u4e8b\u807d\u8d77\u4f86\u4e0d\u50cf\u58de\u4e8b\u2013\u76f4\u5230\u7576\u4f60\u9700\u8981\u70ba\u4ed6\u547d\u540d\u6216\u7576\u6e2c\u8a66\u6c92\u904e\u4f60\u9700\u8981\u77e5\u9053\u70ba\u4ec0\u9ebc\u7684\u6642\u5019\u3002 \u901a\u5e38test frameworks\u6703\u88ab\u8a2d\u8a08\u4e00\u78b0\u5230exception\u5c31\u4e0d\u6703\u5728\u5f80\u4e0b\u8dd1\uff0c\u5982\u679c\u4f60\u6c92\u6709\u628a\u6e2c\u8a66\u62c6\u5206\uff0c\u4f60\u5c31\u6c92\u8fa6\u6cd5\u6536\u96c6\u5230\u66f4\u591a\u7684\u75c7\u72c0\u4f86\u89e3\u6c7a\u4f60\u7684\u554f\u984c\u3002","title":"Testing only one concern"},{"location":"Finished/Art%20of%20Unit%20Testing/#separate-unit-from-integration-tests","text":"\u518d\u6b21\u5f37\u8abf\u4e00\u5b9a\u8981\u6709 Safe green zone \uff0c\u624d\u80fd\u8b93\u5de5\u7a0b\u5e2b\u76f8\u4fe1\u4f60\u7684\u6e2c\u8a66\u9858\u610f\u8dd1\u4f60\u7684\u6e2c\u8a66\u3002 This green zone is easily created by having a separate unit tests project in which only tests that run in memory, are consistent, and are repeatable exist.","title":"Separate unit from integration tests"},{"location":"Finished/Art%20of%20Unit%20Testing/#assuring-code-review-with-code-coverage","text":"What does it mean when you have 100% code coverage? Nothing, without a code review. Your CEO might have asked all employees to \u201cget over 95% code coverage,\u201d and they might have done exactly what they were asked. Maybe those tests don\u2019t even have asserts. People tend to do what they need to do to achieve a given goal metric. \u5982\u679c\u4f60\u505a\u4e86code review\u548ctest review\u78ba\u8a8d\u4e86\u6240\u6709\u6e2c\u8a66\u6c92\u554f\u984c\u4e14\u8986\u84cb\u4e86\u6240\u6709\u7684code\uff0c\u4f60\u5c31\u5275\u9020\u4e86\u4e00\u5f35\u5b89\u5168\u7db2\u9632\u6b62\u81ea\u5df1\u5e79\u8822\u4e8b\uff0c\u540c\u6642\u4e5f\u5206\u4eab\u7d66\u4e86\u4f60\u7684\u5718\u968a\u8b93\u4ed6\u5011\u53d7\u60e0\u3002 coverage\u5de5\u5177 To ensure good coverage for your new code, use one of the automated tools (for example, dotCover from JetBrains, OpenCover, NCover, or Visual Studio Pro). My personal recommendation these days is NCrunch, which gives a real-time coverage red/green view of your code that changes as you\u2019re coding. When you add a new test that was missing, check whether you\u2019ve added the correct test with these steps: Comment out the production code you think isn\u2019t being covered. Run all the tests. If all the tests pass, you\u2019re missing a test or are testing the wrong thing. Otherwise, there would have been a test somewhere that was expecting that line to be called or some resulting consequence of that line of code to be true, and that missing test would now fail. Once you\u2019ve found a missing test, you\u2019ll need to add it. Keep the code commented out and write a new test that fails, proving that the code you\u2019ve commented is missing. Uncomment the code you commented before. The test you wrote should now pass. You\u2019ve detected and added a missing test! If the test still fails, it means the test may have a bug or is testing the wrong thing. Modify the test until it passes. Now you\u2019ll want to see that the test is OK, making sure it not only passes when it should, but also fails when it should. To make sure the test fails when it should, reintroduce the bug into your code (commenting out the line of production code) and see if the test indeed fails.","title":"Assuring code review with code coverage"},{"location":"Finished/Art%20of%20Unit%20Testing/#writing-maintainable-tests","text":"Maintainability is one of the core issues most developers face when writing unit tests. Eventually the tests seem to become harder and harder to maintain and understand, and every little change to the system seems to break one test or another, even if bugs don\u2019t exist. Testing only against public contracts Removing duplication in tests Enforcing test isolation.","title":"Writing maintainable tests"},{"location":"Finished/Art%20of%20Unit%20Testing/#testing-private-or-protected-methods","text":"private method\u901a\u5e38\u662f\u958b\u767c\u8005\u6709\u500b\u597d\u7684\u7406\u7531\u8a8d\u70ba\u4ed6\u61c9\u8a72\u662fprivate method\uff0c\u5982\u679c\u5c0dprivate method\u505a\u6e2c\u662f\u6709\u53ef\u80fd\u6703\u975e\u5e38\u8106\u5f31\uff0c\u53ea\u8981\u78b0\u5230refactor\u4f60\u7684\u6e2c\u8a66\u5c31\u6703\u58de\u6389\uff0c\u5118\u7ba1\u6700\u5f8c\u7684\u6574\u500b\u529f\u80fd\u9084\u662f\u6b63\u5e38\u7684\u3002public contract\u624d\u61c9\u8a72\u662f\u4f60\u6e2c\u8a66\u7684\u76ee\u6a19\uff0c\u5982\u679c\u4f60\u60f3\u6e2c\u8a66\u4e00\u500bprivate method\uff0c\u627e\u5230\u4f7f\u7528\u4ed6\u7684public method\u7684use case\u505a\u6e2c\u8a66\uff0c\u5982\u679c\u4f60\u53ea\u91dd\u5c0dprivate method\u505a\u6e2c\u8a66\u4e0d\u4ee3\u8868\u6240\u6709\u7684public method\u90fd\u6b63\u78ba\u4f7f\u7528\u9019\u500bprivate method\u3002\u6709\u6642\u5019\u4f60\u53ef\u80fd\u6703\u770b\u5230\u503c\u5f97\u6e2c\u8a66\u7684private method\uff0c\u4f60\u53ef\u4ee5\u8003\u616e\u4ee5\u4e0b\u89e3\u6cd5\uff1a","title":"Testing private or protected methods"},{"location":"Finished/Art%20of%20Unit%20Testing/#making-methods-public","text":"\u96d6\u7136\u597d\u50cf\u9055\u53cdOO\u539f\u5247\uff0c\u4f46\u628a\u65b9\u6cd5\u8b8a\u516c\u958b\u4e0d\u4e00\u5b9a\u662f\u58de\u4e8b\u3002\u60f3\u8981\u5c0d\u4e00\u500b\u65b9\u6cd5\u5beb\u6e2c\u8a66\u4ee3\u8868\u5c0d\u547c\u53eb\u4ed6\u7684\u4ee3\u78bc\u6709\u5df2\u77e5\u7684\u884c\u70ba\u6216\u5951\u7d04\uff0c\u4f60\u53ea\u662f\u628a\u4ed6\u8b8a\u6210 official \u3002\u4fdd\u6301private\u4ee3\u8868\u7684\u662f\u544a\u8a34\u5176\u4ed6\u958b\u767c\u8005\u53ef\u4ee5\u6539\u8b8a\u4ed6\u7684\u5be6\u4f5c\u800c\u4e0d\u7528\u6015\u6709\u4e0d\u77e5\u9053\u7684\u5730\u65b9\u4f7f\u7528\u4ed6\u3002","title":"MAKING METHODS PUBLIC"},{"location":"Finished/Art%20of%20Unit%20Testing/#extracting-methods-to-new-classes","text":"If your method contains a lot of logic that can stand on its own, or it uses state in the class that\u2019s relevant only to the method in question, it may be a good idea to extract the method into a new class, with a specific role in the system. You can then test that class separately.","title":"EXTRACTING METHODS TO NEW CLASSES"},{"location":"Finished/Art%20of%20Unit%20Testing/#making-methods-static","text":"If your method doesn\u2019t use any of its class\u2019s variables, you might want to refactor the method by making it static. That makes it much more testable but also states that this method is a sort of utility method that has a known public contract specified by its name.","title":"MAKING METHODS STATIC"},{"location":"Finished/Art%20of%20Unit%20Testing/#making-methods-internal","text":"When all else fails, and you can\u2019t afford to expose the method in an official way, you might want to make it internal and then use the [InternalsVisibleTo(\"Test- Assembly\")] attribute on the production code assembly so that tests can still call that method. This is my least favorite approach, but sometimes there\u2019s no choice (perhaps because of security reasons, lack of control over the code\u2019s design, and so on).","title":"MAKING METHODS INTERNAL"},{"location":"Finished/Art%20of%20Unit%20Testing/#removing-duplication","text":"LogAnalyzer\u8b8a\u5f97\u9700\u8981init\u7684\u4f8b\u5b50\u518d\u8b1b\u4e00\u6b21\uff1a A class under test and a test that uses it public class LogAnalyzer { public bool IsValid(string fileName) { if (fileName.Length < 8) { return true; } return false; } } [TestFixture] public class LogAnalyzerTestsMaintainable { [Test] public void IsValid_LengthBiggerThan8_IsFalse() { LogAnalyzer logan = new LogAnalyzer(); bool valid = logan.IsValid(\"123456789\"); Assert.IsFalse(valid); } } Two tests with duplication [Test] public void IsValid_LengthBiggerThan8_IsFalse() { LogAnalyzer logan = new LogAnalyzer(); bool valid = logan.IsValid(\"123456789\"); Assert.IsFalse(valid); } [Test] public void IsValid_LengthSmallerThan8_IsTrue() { LogAnalyzer logan = new LogAnalyzer(); bool valid = logan.IsValid(\"1234567\"); Assert.IsTrue(valid); } LogAnalyzer with changed semantics that now requires initialization public class LogAnalyzer { private bool initialized=false; public bool IsValid(string fileName) { if(!initialized) { throw new NotInitializedException( \"The analyzer.Initialize() method should be\" + \"called before any other operation!\"); } if (fileName.Length < 8) { return true; } return false; } public void Initialize() { //initialization logic here ... initialized=true; } }","title":"Removing duplication"},{"location":"Finished/Art%20of%20Unit%20Testing/#removing-duplication-using-a-helper-method","text":"Adding the Initialize() call in the factory method [Test] public void IsValid_LengthBiggerThan8_IsFalse() { LogAnalyzer logan = GetNewAnalyzer(); bool valid = logan.IsValid(\"123456789\"); Assert.IsFalse(valid); } [Test] public void IsValid_LengthSmallerThan8_IsTrue() { LogAnalyzer logan = GetNewAnalyzer(); bool valid = logan.IsValid(\"1234567\"); Assert.IsTrue(valid); } private LogAnalyzer GetNewAnalyzer() { LogAnalyzer analyzer = new LogAnalyzer(); analyzer.Initialize(); return analyzer; }","title":"REMOVING DUPLICATION USING A HELPER METHOD"},{"location":"Finished/Art%20of%20Unit%20Testing/#removing-duplication-using-setup","text":"Using a setup method to remove duplication [SetUp] public void Setup() { logan=new LogAnalyzer(); logan.Initialize(); } private LogAnalyzer logan= null; [Test] public void IsValid_LengthBiggerThan8_IsFalse() { bool valid = logan.IsValid(\"123456789\"); Assert.IsFalse(valid); } [Test] public void IsValid_LengthSmallerThan8_IsTrue() { bool valid = logan.IsValid(\"1234567\"); Assert.IsTrue(valid); }","title":"REMOVING DUPLICATION USING [SETUP]"},{"location":"Finished/Art%20of%20Unit%20Testing/#using-setup-methods-in-a-maintainable-manner","text":"Setup()\u592a\u597d\u7528\u4e86\uff0c\u597d\u7528\u5230\u8acb\u4f60\u4e0d\u8981\u4e82\u7528\u4ed6\uff0c\u53e6\u5916\u4ed6\u6709\u4ee5\u4e0b\u9650\u5236\uff1a Setup methods can only help when you need to initialize things. Setup methods aren\u2019t always the best candidates for duplication removal. Removing duplication isn\u2019t always about creating and initializing new instances of objects. Sometimes it\u2019s about removing duplication in assertion logic, calling out code in a specific way. Setup methods can\u2019t have parameters or return values. Setup methods can\u2019t be used as factory methods that return values. They\u2019re run before the test executes, so they must be more generic in the way they work. Tests sometimes need to request specific things or call shared code with a parameter for the specific test (for example, retrieve an object and set its property to a specific value). Setup methods should only contain code that applies to all the tests in the current test class, or the method will be harder to read and understand. \u4f86\u770b\u770b\u4ee5\u4e0b\u5e7e\u7a2e\u6feb\u7528setup\u7684\u60c5\u5883\uff1a Initializing objects in the setup method that are used in only some tests in the class Having setup code that\u2019s lengthy and hard to understand Setting up mocks and fake objects within the setup method","title":"Using setup methods in a maintainable manner"},{"location":"Finished/Art%20of%20Unit%20Testing/#initializing-objects-that-are-used-by-only-some-of-the-tests","text":"This sin is a deadly one. A poorly implemented Setup() method [SetUp] public void Setup() { logan=new LogAnalyzer(); logan.Initialize(); fileInfo=new FileInfo(\"c:\\\\someFile.txt\"); } private FileInfo fileInfo = null; private LogAnalyzer logan= null; [Test] public void IsValid_LengthBiggerThan8_IsFalse() { bool valid = logan.IsValid(\"123456789\"); Assert.IsFalse(valid); } [Test] public void IsValid_BadFileInfoInput_returnsFalse() { bool valid = logan.IsValid(fileInfo); Assert.IsFalse(valid); } [Test] public void IsValid_LengthSmallerThan8_IsTrue() { bool valid = logan.IsValid(\"1234567\"); Assert.IsTrue(valid); } private LogAnalyzer GetNewAnalyzer() { ... } Why is the setup method in the listing less maintainable? Because, to read the tests for the first time and understand why they break, you need to do the following: Go through the setup method to understand what\u2019s being initialized. Assume that objects in the setup method are used in all tests. Find out later you were wrong, and read the tests again more carefully to see which test uses the objects that may be causing the problems. Dive deeper into the test code for no good reason, taking more time and effort to understand what the code does.","title":"INITIALIZING OBJECTS THAT ARE USED BY ONLY SOME OF THE TESTS"},{"location":"Finished/Art%20of%20Unit%20Testing/#having-setup-code-thats-lengthy-and-hard-to-understand","text":"One solution is to refactor the calls to initialize specific things into helper methods that are called from the setup method. This means that refactoring the setup method is usually a good idea. \u4e0d\u8981\u6210\u70ba\u91cd\u69cb\u9b54\u4eba But there\u2019s a fine line between over-refactoring and readability. Over-refactoring can lead to less-readable code. This is a matter of personal preference . You need to watch for when your code is becoming less readable. I recommend getting feedback from a partner during the refactoring. We all can become too enamored with code we\u2019ve written, and having a second pair of eyes involved in refactoring can lead to good and objective results. Having a peer do a code review (a test review) after the fact is also good but not as productive as doing it as it happens.","title":"HAVING SETUP CODE THAT\u2019S LENGTHY AND HARD TO UNDERSTAND"},{"location":"Finished/Art%20of%20Unit%20Testing/#setting-up-fakes-in-the-setup-method","text":"Please don\u2019t arrange fakes in a setup method. Doing so will make it hard to read and maintain the tests. \u8981\u8b93\u6bcf\u500b\u6e2c\u8a66\u6e05\u695a\u770b\u5230\u4ed6\u7684mock\u548cstub My preference is to have each test create its own mocks and stubs by calling helper methods within the test, so that the reader of the test knows exactly what\u2019s going on, without needing to jump from test to setup to understand the full picture.","title":"SETTING UP FAKES IN THE SETUP METHOD"},{"location":"Finished/Art%20of%20Unit%20Testing/#stop-using-setup-methods","text":"I\u2019ve stopped using setup methods for tests I write. They\u2019re a relic from a time when it was OK to write crappy, unreadable tests, but that time is over. \u53e6\u4e00\u500b\u53bb\u91cd\u8907\u7684\u65b9\u6cd5\uff1aparameterized ([TestCase] in NUnit, [Theory] in XUnit.net, or [OopsWeStillDontHaveThatFeatureAfterFiveYears] in MSTest). OK, bad joke, but MSTest still has no simple support for this.","title":"STOP USING SETUP METHODS"},{"location":"Finished/Art%20of%20Unit%20Testing/#enforcing-test-isolation","text":"\u56e0\u70ba\u9694\u96e2\u6c92\u505a\u597d\uff0c\u6e2c\u8a66\u6642\u597d\u6642\u58de\uff0c\u9019\u7a2e\u554f\u984c\u975e\u5e38\u96e3\u67e5\uff0c\u72fc\u4f86\u4e86\u7684\u6545\u4e8b\u4e5f\u5728\u958b\u767c\u8005\u9593\u767c\u751f\u3002 There are several test \u201csmells\u201d that can hint at broken test isolation: Constrained test order \u2014Tests expecting to be run in a specific order or expecting information from other test results Hidden test call \u2014Tests calling other tests Shared-state corruption \u2014Tests sharing in-memory state without rolling back External shared-state corruption \u2014Integration tests with shared resources and no rollback","title":"Enforcing test isolation"},{"location":"Finished/Art%20of%20Unit%20Testing/#antipattern-constrained-test-order","text":"Constrained test order: the second test will fail if it runs first Myriad problems can occur when tests don\u2019t enforce isolation: A test may suddenly start breaking when a new version of the test framework is introduced that runs the tests in a different order. Running a subset of the tests may produce different results than running all the tests or a different subset of the tests. Maintaining the tests is more cumbersome, because you need to worry about how other tests relate to particular tests and how each one affects state. Your tests may fail or pass for the wrong reasons; for example, a different test may have failed or passed before it, leaving the resources in an unknown state. Removing or changing some tests may affect the outcomes of others. It\u2019s difficult to name your tests appropriately because they test more than a single thing. There are a couple of common patterns that lead to poor test isolation: Flow testing\u2014A developer writes tests that must run in a specific order so that they can test flow execution, a big use case composed of many actions, or a full integration test where each test is one step in that full test. Laziness in cleanup\u2014A developer is lazy and doesn\u2019t return any state their test may have changed back to its original form, and other developers write tests that depend on this shortcoming knowingly or unknowingly. These problems can be solved in various manners: Flow testing\u2014Instead of writing flow-related tests in unit tests (long-running use cases, for example), consider using some sort of integration testing framework like FIT or FitNesse or QA-related products such as AutomatedQA and WinRunner. Laziness in cleanup\u2014If you\u2019re too lazy to clean up your database after testing, your filesystem after testing, or your memory-based objects, consider moving to a different profession. This isn\u2019t a job for you.","title":"ANTIPATTERN: CONSTRAINED TEST ORDER"},{"location":"Finished/Art%20of%20Unit%20Testing/#antipattern-hidden-test-call","text":"This type of dependency can cause several problems: Running a subset of the tests may produce different results than running all the tests or a different subset of the tests. Maintaining the tests is more cumbersome, because you need to worry about how other tests relate to particular tests and how and when they call each other. Tests may fail or pass for the wrong reasons. For example, a different test may have failed, thus failing your test or not calling it at all. Or a different test may have left shared variables in an unknown state. Changing some tests may affect the outcome of others. It\u2019s difficult to clearly name tests that call other tests. How we got here: Flow testing \u2014A developer writes tests that need to run in a specific order so that they can test flow execution, a big use case composed of many actions, or a full integration test where each test is one step in that full test. Trying to remove duplication \u2014A developer tries to remove duplication in the tests by calling other tests (which have code they don\u2019t want the current test to repeat). Laziness about separating the tests \u2014A developer is lazy and doesn\u2019t take the time to create a separate test and refactor the code appropriately, instead taking a shortcut and calling a different test. Here are some solutions: Flow testing \u2014Instead of writing flow-related tests in unit tests (long-running use cases, for example), consider using an integration testing framework like FIT or FitNesse, or QA-related products such as AutomatedQA and WinRunner. Trying to remove duplication \u2014Don\u2019t ever remove duplication by calling another test from a test. You\u2019re preventing that test from relying on the setup and teardown methods in the class and are essentially running two tests in one (because the calling test has an assertion as does the test being called). Instead, refactor the code you don\u2019t want to write twice into a third method that both your test and the other test call. Laziness about separating the tests \u2014If you\u2019re too lazy to separate your tests, think of all the extra work you\u2019ll have to do if you don\u2019t separate them. Try to imagine a world where the current test you\u2019re writing is the only test in the system, so it can\u2019t rely on any other test. Please don't do things like this","title":"ANTIPATTERN: HIDDEN TEST CALL"},{"location":"Finished/Art%20of%20Unit%20Testing/#antipattern-shared-state-corruption","text":"This antipattern manifests in two major ways, independent of each other: Tests touch shared resources (either in memory or in external resources, such as databases, filesystems, and so on) without cleaning up or rolling back any changes they make to those resources. Tests don\u2019t set up the initial state they need before they start running, relying on the state to be there. This type of problem causes a number of symptoms: Running a subset of the tests may produce different results than running all the tests or a different subset of the tests. Maintaining the test is more cumbersome, because you may break the state for other tests, breaking those tests without realizing it. Your test may fail or pass for the wrong reason; a different test may have failed or passed before it, leaving the shared state in a problematic condition, or it may not have cleaned up after it ran. Changing some tests may affect the outcomes of other tests, seemingly randomly. Here is how we got here: Not setting up state before each test \u2014A developer doesn\u2019t set up the state required for the test or assumes the state was already correct. Using shared state \u2014A developer uses shared memory or external resources for more than one test without taking precautions. Using static instances in tests \u2014A developer sets static state that\u2019s used in other tests. Here are some solutions: Not setting up state before each test \u2014This is a mandatory practice when writing unit tests. Either use a setup method or call specific helper methods at the beginning of the test to ensure the state is what you expect it to be. Using shared state \u2014In many cases, you don\u2019t need to share state at all. Having separate instances of an object for each test is the safest way to go. Using static instances in tests \u2014You need to be careful how your tests manage static state. Be sure to clean up the static state using setup or teardown methods. Sometimes it\u2019s effective to use direct helper method calls to clearly reset the static state from within the test. If you\u2019re testing singletons, it\u2019s worth adding public or internal setters so your tests can reset them to a clean object instance.","title":"ANTIPATTERN: SHARED-STATE CORRUPTION"},{"location":"Finished/Art%20of%20Unit%20Testing/#antipattern-external-shared-state-corruption","text":"This antipattern is similar to the in-memory, shared-state corruption pattern, but it happens in integration-style testing: Tests touch shared resources (either in memory or in external resources, such as databases and filesystems) without cleaning up or rolling back any changes they make to those resources. Tests don\u2019t set up the initial state they need before they start running, relying on the state to be there.","title":"ANTIPATTERN: EXTERNAL SHARED-STATE CORRUPTION"},{"location":"Finished/Art%20of%20Unit%20Testing/#avoiding-multiple-asserts-on-different-concerns","text":"If only one assert fails, you never know if the other asserts in that same test method would have failed or not. You may think you know, but it\u2019s an assumption until you can prove it with a failing or passing assert. \u9019\u6703\u5c0e\u81f4\u4f60\u5224\u65b7\u932f\u8aa4\uff0c\u6709\u53ef\u80fd\u671d\u932f\u8aa4\u7684\u65b9\u5411\u4fee\u6b63\u3002 There are several ways to achieve the same goal: Create a separate test for each assert. Use parameterized tests. Wrap the assert call with try-catch.","title":"Avoiding multiple asserts on different concerns"},{"location":"Finished/Art%20of%20Unit%20Testing/#using-parameterized-tests","text":"[TestCase]","title":"USING PARAMETERIZED TESTS"},{"location":"Finished/Art%20of%20Unit%20Testing/#wrapping-with-try-catch","text":"don't do thing like this","title":"WRAPPING WITH TRY-CATCH"},{"location":"Finished/Art%20of%20Unit%20Testing/#comparing-objects","text":"\u9019\u662f\u4e00\u7a2e\u5408\u7406\u4f7f\u7528\u591a\u500bassert\u5728\u540c\u500btest\u88e1\u9762\u7684case\uff0c\u4e0d\u904e\u6709\u4e9b\u66f4\u597d\u7684\u505a\u6cd5\u3002","title":"Comparing objects"},{"location":"Finished/Art%20of%20Unit%20Testing/#making-tests-more-maintainable","text":"\u5efa\u4e00\u500b\u8cc7\u6599class\u4f86\u505a\u5b8c\u6574\u7684\u6bd4\u8f03\uff0c\u6ce8\u610f\u901a\u5e38\u9700\u8981override Equals() \u4f86\u9054\u6210\u9019\u4ef6\u4e8b\uff0c\u6216\u8a31\u4f60\u6703\u89ba\u5f97\u5f88\u7169\uff0c\u4e0d\u904e\u6709\u4e9b\u5de5\u5177\u53ef\u4ee5\u5e6b\u4f60\u81ea\u52d5\u7522\u751f\u9019\u4e9b\u65b9\u6cd5\uff0c\u4f8b\u5982 ReSharper \u3002","title":"MAKING TESTS MORE MAINTAINABLE"},{"location":"Finished/Art%20of%20Unit%20Testing/#overriding-tostring","text":"\u56e0\u70baNunit\u7684output\u662f\u547c\u53eb\u5169\u500b\u6bd4\u8f03object\u7684ToString()\uff0c\u76f4\u63a5override ToString() \u5728\u88e1\u9762\u5370\u51fa\u6240\u6709property\u3002 \u9019\u62db\u5e79\u66b4\u6f6e\u8036","title":"OVERRIDING TOSTRING()"},{"location":"Finished/Art%20of%20Unit%20Testing/#avoiding-overspecification","text":"An overspecified test is one that contains assumptions about how a specific unit under test (production code) should implement its internal behavior, instead of only checking that the end behavior is correct. \u5c31\u6aa2\u67e5\u592a\u591a\u6771\u897f Here are ways unit tests are often overspecified: A test asserts purely internal state in an object under test. A test uses multiple mocks. A test uses stubs also as mocks. A test assumes specific order or exact string matches when it isn\u2019t required.","title":"Avoiding overspecification"},{"location":"Finished/Art%20of%20Unit%20Testing/#specifying-purely-internal-behavior","text":"\u5167\u90e8\u7684\u72c0\u614b\u5be6\u4f5c\u7d93\u5e38\u53ef\u80fd\u88ab\u66f4\u52d5\uff0c\u4f46\u90a3\u4e26\u4e0d\u5f71\u97ff\u6700\u5f8c\u7d50\u679c\u3002","title":"SPECIFYING PURELY INTERNAL BEHAVIOR"},{"location":"Finished/Art%20of%20Unit%20Testing/#using-stubs-also-as-mocks","text":"\u5e38\u898b\u7684\u932f\u8aa4\u662f\u53bb\u6aa2\u67e5\u67d0\u500bmethod\u662f\u5426\u88ab\u547c\u53eb\u904e\uff0c\u4f46\u4ed6\u6709\u6c92\u6709\u88ab\u547c\u53eb\u6839\u672c\u4e0d\u5f71\u97ff\u6700\u5f8c\u7684\u7d50\u679c\u3002","title":"USING STUBS ALSO AS MOCKS"},{"location":"Finished/Art%20of%20Unit%20Testing/#assuming-an-order-or-exact-match-when-its-not-needed","text":"\u7d93\u5e38\u554f\u81ea\u5df1\uff0c\u662f\u5426\u771f\u7684\u8981\u6aa2\u67e5\u6574\u500bobject\u5167\u5bb9\uff1f\u662f\u5426\u53ea\u6aa2\u67e5\u5e7e\u500bproperties\u5c31\u597d?\u6216\u662f\u5426\u53ef\u4ee5\u4f7f\u7528 string.Contains() \u800c\u4e0d\u662f string.Equals() \uff1f","title":"ASSUMING AN ORDER OR EXACT MATCH WHEN IT\u2019S NOT NEEDED"},{"location":"Finished/Art%20of%20Unit%20Testing/#writing-readable-tests","text":"Without readability the tests you write are almost meaningless. Readability is the connecting thread between the person who wrote the test and the poor soul who has to read it a few months later. Tests are stories you tell the next generation of programmers on a project. They allow a developer to see exactly what an application is made of and where it started. There are several facets to readability: Naming unit tests Naming variables Creating good assert messages Separating asserts from actions","title":"Writing readable tests"},{"location":"Finished/Art%20of%20Unit%20Testing/#naming-unit-tests","text":"Naming standards are important because they give you comfortable rules and templates that outline what you should explain about the test. The test name has three parts: The name of the method being tested \u2014This is essential, so that you can easily see where the tested logic is. Having this as the first part of the test name allows easy navigation and as-you-type intellisense (if your IDE supports it) in the test class. The scenario under which it\u2019s being tested \u2014This part gives you the \u201cwith\u201d part of the name: \u201cWhen I call method X with a null value , then it should do Y.\u201d The expected behavior when the scenario is invoked \u2014This part specifies in plain English what the method should do or return, or how it should behave, based on the current scenario: \u201cWhen I call method X with a null value, then it should do Y .\u201d A common way to write these three parts of the test name is to separate them with underscores, like this: MethodUnderTest_Scenario_Behavior() .","title":"Naming unit tests"},{"location":"Finished/Art%20of%20Unit%20Testing/#naming-variables","text":"\u6709\u6642\u5019\u9019\u500b\u6bd4production code\u7684naming\u66f4\u91cd\u8981\uff0c\u4f60\u5fc5\u9808\u7528\u6700\u5feb\u7684\u901f\u5ea6\u8b93\u8b80\u6e2c\u8a66\u7684\u4eba\u77e5\u9053\u4f60\u60f3\u8b49\u660e\u751a\u9ebc\u3002\u4f86\u770b\u4e00\u500b\u4f8b\u5b50\uff1a An unreadable test name [Test] public void BadlyNamedTest() { LogAnalyzer log = new LogAnalyzer(); int result= log.GetLineCount(\"abc.txt\"); Assert.AreEqual(-100,result); } -100 \u5230\u5e95\u662f\u5e79\u561b\u7528\u7684\uff0c\u9019\u6642\u5019\u4f60\u53ea\u80fd\u8166\u88dc\uff0c\u6216\u8a31\u4ed6\u662f\u4f8b\u5916?\uff0c\u4f60\u6709\u4ee5\u4e0b\u5169\u7a2e\u8f03\u597d\u7684\u8655\u7406\u65b9\u5f0f\uff1a You can change the design of the API to throw an exception instead of returning -100 (assuming -100 is some sort of illegal result value). You can compare the result to some sort of constant or aptly named variable, as shown in the following listing.","title":"Naming variables"},{"location":"Finished/Art%20of%20Unit%20Testing/#asserting-yourself-with-meaning","text":"Avoid writing your own custom assert messages. Please. This section is for those who find they absolutely have to write a custom assert message, because the test really needs it, and you can\u2019t find a way to make the test clearer without it. \u5bebcustom assert message\u5c31\u50cf\u5bebcustom exception message\u4e00\u6a23\u56f0\u96e3\u3002 There are several key points to remember when writing a message for an assert clause: Don\u2019t repeat what the built-in test framework outputs to the console. Don\u2019t repeat what the test name explains. If you don\u2019t have anything good to say, don\u2019t say anything. Write what should have happened or what failed to happen, and possibly mention when it should have happened.","title":"Asserting yourself with meaning"},{"location":"Finished/Art%20of%20Unit%20Testing/#separating-asserts-from-actions","text":"\u597d Separating the assert from the thing asserted, improving readability [Test] public void BadAssertMessage() { //some code here int result= log.GetLineCount(\"abc.txt\"); Assert.AreEqual(COULD_NOT_READ_FILE,result); } \u4e0d\u597d Not separating the assert from the thing asserted, making reading difficult [Test] public void BadAssertMessage() { //some code here Assert.AreEqual(COULD_NOT_READ_FILE,log.GetLineCount(\"abc.txt\")); }","title":"Separating asserts from actions"},{"location":"Finished/Art%20of%20Unit%20Testing/#setting-up-and-tearing-down","text":"\u4f7f\u7528setup\u6216teardown\u53ef\u80fd\u6703\u8b93\u6e2c\u8a66\u8b8a\u5f97\u96e3\u7406\u89e3\uff0c\u8209\u4f8b\u5728setup\u88e1\u9762\u4f7f\u7528mocks\u6216stubs\u6709\u53ef\u80fd\u8b93\u5225\u4eba\u4e0d\u77e5\u9053\u9019\u6771\u897f\u7684\u5b58\u5728\u3002\u6700\u597d\u662f\u5beb\u4e00\u500bhelper method\uff0c\u5728\u6bcf\u500b\u4f7f\u7528\u5230\u7684\u6e2c\u8a66\u88e1\u9762\u547c\u53eb\u4ed6\uff0c\u9019\u6a23\u8b80\u6e2c\u8a66\u7684\u4eba\u4e0d\u9700\u8981\u770b\u591a\u500b\u5730\u65b9\u3002 TIP I\u2019ve several times written full test classes that didn\u2019t have a setup method, only helper methods being called from each test, for the sake of maintainability. The classes were still readable and maintainable.","title":"Setting up and tearing down"},{"location":"Finished/Art%20of%20Unit%20Testing/#summary_7","text":"\u963f\u5c31\u4e09\u672c\u67f1\u8b1b\u4e00\u904d","title":"Summary"},{"location":"Finished/Art%20of%20Unit%20Testing/#chapter-9-integrating-unit-testing-into-the-organization","text":"","title":"Chapter 9: Integrating unit testing into the organization"},{"location":"Finished/HDFS%20Spark/","text":"HDFS Spark Spark RDD \u300c\u8acb\u554fbinary tree\u4e2d\u6587\u662f\u4ec0\u9ebc\uff1f\u300d \u9762\u8a66\u8005\u4e00\u81c9\u61f5\u903c \u300c\u8acb\u554fbinary tree\u8907\u96dc\u5ea6\u662f\u591a\u5c11\uff1f\u300d \u73fe\u5728\u4e0d\u53ea\u9762\u8a66\u8005\u61f5\u903c\uff0c\u4e00\u65c1\u5354\u52a9\u9762\u8a66\u7684\u6211\u4e5f\u61f5\u903c\uff0c\u9019\u984c\u9023\u6211\u4e5f\u4e0d\u6703 \u6211\u4eca\u5929\u7d42\u65bc\u77e5\u9053\u516c\u53f8\u662f\u5982\u4f55\u88ab\u5916\u754c\u8996\u70ba\u7368\u89d2\u7378\u4f01\u696d\u7684 Superset hdfs->hive->presto->superset \u904b\u7b97\u3001\u8cc7\u6599\u8207\u5132\u5b58\u683c\u5f0f \u751a\u9ebc\u662fdata locality?\u4f8b\u5982matrix\u5982\u4f55\u5b58\u5728memory Data locality\u6703\u5f71\u97ff\u4f60\u7684\u7a0b\u5f0f\u6548\u80fd\uff0c\u771f\u7684\u8981tune\u7684\u8a71\u751a\u81f3\u6703\u8003\u616e\u5230\u4e00\u500bcache line\u7684\u5927\u5c0f\u4f86\u5beb\u7a0b\u5f0f \u5e73\u884c\u5728\u9019\u88e1\u4e3b\u8981\u8003\u616e\u600e\u9ebc\u5207\u5206data \u53ef\u5c0ddata\u5207\uff0c\u4e5f\u53ef\u5c0dloop\u5207 \u5927\u5c0f\u5f88\u91cd\u8981\uff0c\u901a\u5e38\u8d8a\u5c0f\u8d8a\u597d\uff0c\u53ef\u662f\u592a\u5c0f\u6703\u6709communication\u548cdata locality\u554f\u984c \u6700\u91cd\u8981\u7684\u5169\u500b\u554f\u984c\uff1a Even workload distribution Proper granularity(Communication Reduction) Process\u4e92\u76f8\u6e9d\u901a\u53ef\u4ee5\u9760Serialize/Deserialize Apache Arrow => zero copy\uff0c\u7d71\u4e00\u5404\u7a0b\u5f0f\u8a9e\u8a00\u7684memory\u683c\u5f0f\uff0c\u6c92\u6709\u8907\u88fd\u7684overhead\uff0c\u76f4\u63a5\u8b80memory\u5c31\u597d partition:\u5207\u8cc7\u6599\uff0c\u53ea\u8981\u6211\u9700\u8981\u7684data\uff0c\u4e0d\u7528\u4e00\u6b21\u53d6\u5168\u90e8 Hadoop \u4f7f\u7528 general purposes \u7684\u6a5f\u5668\u4f86\u505a\u5230\u9019\u4ef6\u4e8b\u60c5 \u5c31\u662f\u500bfile system \u53ef\u4ee5\u7528\u4fbf\u5b9c\u7684\u6a5f\u5668\u4f86\u505a\u5132\u5b58\u6a5f\u5668 Scalability: \u53ef\u4ee5 horizontally \u7684 scale up \u8cc7\u6599\u7684\u5132\u5b58\u7a7a\u9593\u8207 throughput \u5206\u6563\u5230\u4e0d\u540c\u6a5f\u5668\u7684\u597d\u8655:\u53ef\u4ee5\u6709 high throughput,\u4e14\u5584\u7528\u6bcf\u9846\u786c\u789f\u5404\u81ea\u7684 IOPS Fault tolerance:\u7c21\u55ae\u5c07\u8cc7\u6599 replica \u6210 3 \u4efd (default value) \u4e00\u81fa\u6a5f\u5668 / \u4e00\u9846\u786c\u789f\u639b\u7684\u6642\u5019\u6062\u5fa9\u7684gal\u5ea6\u6703\u6bd4 raid \u5feb (raid 5 \u6703\u5f88\u6162) \u5373\u4f7f\u67d0\u5e7e\u500b\u639b\u4e86 service \u4f9d\u7136\u9084\u53ef\u4ee5\u4f7f\u7528 (raid \u5247\u8981\u4e0b\u7dda\u4fee\u5fa9) \u91cd\u9ede\u662f\u548c Spark \u7684\u76f8\u5bb9\u6027\u597d Spark \u5167\u5efa\u5c31\u548c HDFS \u76f8\u5bb9 (\u5176\u4ed6 issue \u90fd\u6709\u5f97\u518d\u8a0e\u8ad6,\u4f46\u9019\u9ede\u662f\u4e3b\u8981\u7684\u9078\u64c7) \u56e0\u7232 general purposes \u7684\u95dc\u7cfb,\u5132\u5b58\u8cc7\u6599\u7684\u6a5f\u5668\u4e5f\u53ef\u4ee5\u62ff\u4f86\u505a\u904b\u7b97 Data locality \u4f73,\u505a\u904b\u7b97\u7684\u6a5f\u5668\u5f88\u5927\u6a5f\u6703\u53ef\u4ee5\u76f4\u63a5\u62ff\u5230\u672c\u6a5f\u7684\u8cc7\u6599\u800c\u4e0d\u7528\u4f9d\u9760\u7db2\u8def\u7684\u50b3\u8f38 Spark RDD\u7684\u4e3b\u8981\u7279\u8272\u662ffault tolerance\uff0c\u7576\u67d0\u53f0executer\u639b\u4e86\u53ef\u4ee5\u518d\u53bb\u53eb\u5176\u4ed6executer\u8dd1 Spark\u53ef\u4ee5\u628a\u4ed6\u60f3\u50cf\u6210\u7ba1\u7406\u5206\u6563\u5f0f\u8cc7\u6599\u7684\u7a0b\u5f0f\uff0c\u8b93\u4f60\u5728\u4f7f\u7528\u7684\u6642\u5019\u6c92\u6709\u5206\u6563\u5f0f\u7684\u611f\u89ba dataframe\u5c31\u662f\u6709schema\u7684RDD\uff0c\u66f4\u9ad8\u968e PySpark\u4e3b\u8981\u662f\u64cd\u4f5cRDD\u8ddfdataframe\uff0cdataframe\u80fd\u505a\u7684\u4e8b\u5c31\u76e1\u91cf\u4f7f\u7528dataframe UDF\u5728RDD\u6bd4\u8f03\u597d\u5beb\uff0cdataframe\u4e0d\u597d\u5beb df.rdd \u6709performance issue","title":"HDFS Spark"},{"location":"Finished/HDFS%20Spark/#hdfs-spark","text":"","title":"HDFS Spark"},{"location":"Finished/HDFS%20Spark/#spark-rdd","text":"\u300c\u8acb\u554fbinary tree\u4e2d\u6587\u662f\u4ec0\u9ebc\uff1f\u300d \u9762\u8a66\u8005\u4e00\u81c9\u61f5\u903c \u300c\u8acb\u554fbinary tree\u8907\u96dc\u5ea6\u662f\u591a\u5c11\uff1f\u300d \u73fe\u5728\u4e0d\u53ea\u9762\u8a66\u8005\u61f5\u903c\uff0c\u4e00\u65c1\u5354\u52a9\u9762\u8a66\u7684\u6211\u4e5f\u61f5\u903c\uff0c\u9019\u984c\u9023\u6211\u4e5f\u4e0d\u6703 \u6211\u4eca\u5929\u7d42\u65bc\u77e5\u9053\u516c\u53f8\u662f\u5982\u4f55\u88ab\u5916\u754c\u8996\u70ba\u7368\u89d2\u7378\u4f01\u696d\u7684","title":"Spark RDD"},{"location":"Finished/HDFS%20Spark/#superset","text":"hdfs->hive->presto->superset","title":"Superset"},{"location":"Finished/HDFS%20Spark/#_1","text":"\u751a\u9ebc\u662fdata locality?\u4f8b\u5982matrix\u5982\u4f55\u5b58\u5728memory Data locality\u6703\u5f71\u97ff\u4f60\u7684\u7a0b\u5f0f\u6548\u80fd\uff0c\u771f\u7684\u8981tune\u7684\u8a71\u751a\u81f3\u6703\u8003\u616e\u5230\u4e00\u500bcache line\u7684\u5927\u5c0f\u4f86\u5beb\u7a0b\u5f0f \u5e73\u884c\u5728\u9019\u88e1\u4e3b\u8981\u8003\u616e\u600e\u9ebc\u5207\u5206data \u53ef\u5c0ddata\u5207\uff0c\u4e5f\u53ef\u5c0dloop\u5207 \u5927\u5c0f\u5f88\u91cd\u8981\uff0c\u901a\u5e38\u8d8a\u5c0f\u8d8a\u597d\uff0c\u53ef\u662f\u592a\u5c0f\u6703\u6709communication\u548cdata locality\u554f\u984c \u6700\u91cd\u8981\u7684\u5169\u500b\u554f\u984c\uff1a Even workload distribution Proper granularity(Communication Reduction) Process\u4e92\u76f8\u6e9d\u901a\u53ef\u4ee5\u9760Serialize/Deserialize Apache Arrow => zero copy\uff0c\u7d71\u4e00\u5404\u7a0b\u5f0f\u8a9e\u8a00\u7684memory\u683c\u5f0f\uff0c\u6c92\u6709\u8907\u88fd\u7684overhead\uff0c\u76f4\u63a5\u8b80memory\u5c31\u597d partition:\u5207\u8cc7\u6599\uff0c\u53ea\u8981\u6211\u9700\u8981\u7684data\uff0c\u4e0d\u7528\u4e00\u6b21\u53d6\u5168\u90e8","title":"\u904b\u7b97\u3001\u8cc7\u6599\u8207\u5132\u5b58\u683c\u5f0f"},{"location":"Finished/HDFS%20Spark/#hadoop","text":"\u4f7f\u7528 general purposes \u7684\u6a5f\u5668\u4f86\u505a\u5230\u9019\u4ef6\u4e8b\u60c5 \u5c31\u662f\u500bfile system \u53ef\u4ee5\u7528\u4fbf\u5b9c\u7684\u6a5f\u5668\u4f86\u505a\u5132\u5b58\u6a5f\u5668 Scalability: \u53ef\u4ee5 horizontally \u7684 scale up \u8cc7\u6599\u7684\u5132\u5b58\u7a7a\u9593\u8207 throughput \u5206\u6563\u5230\u4e0d\u540c\u6a5f\u5668\u7684\u597d\u8655:\u53ef\u4ee5\u6709 high throughput,\u4e14\u5584\u7528\u6bcf\u9846\u786c\u789f\u5404\u81ea\u7684 IOPS Fault tolerance:\u7c21\u55ae\u5c07\u8cc7\u6599 replica \u6210 3 \u4efd (default value) \u4e00\u81fa\u6a5f\u5668 / \u4e00\u9846\u786c\u789f\u639b\u7684\u6642\u5019\u6062\u5fa9\u7684gal\u5ea6\u6703\u6bd4 raid \u5feb (raid 5 \u6703\u5f88\u6162) \u5373\u4f7f\u67d0\u5e7e\u500b\u639b\u4e86 service \u4f9d\u7136\u9084\u53ef\u4ee5\u4f7f\u7528 (raid \u5247\u8981\u4e0b\u7dda\u4fee\u5fa9) \u91cd\u9ede\u662f\u548c Spark \u7684\u76f8\u5bb9\u6027\u597d Spark \u5167\u5efa\u5c31\u548c HDFS \u76f8\u5bb9 (\u5176\u4ed6 issue \u90fd\u6709\u5f97\u518d\u8a0e\u8ad6,\u4f46\u9019\u9ede\u662f\u4e3b\u8981\u7684\u9078\u64c7) \u56e0\u7232 general purposes \u7684\u95dc\u7cfb,\u5132\u5b58\u8cc7\u6599\u7684\u6a5f\u5668\u4e5f\u53ef\u4ee5\u62ff\u4f86\u505a\u904b\u7b97 Data locality \u4f73,\u505a\u904b\u7b97\u7684\u6a5f\u5668\u5f88\u5927\u6a5f\u6703\u53ef\u4ee5\u76f4\u63a5\u62ff\u5230\u672c\u6a5f\u7684\u8cc7\u6599\u800c\u4e0d\u7528\u4f9d\u9760\u7db2\u8def\u7684\u50b3\u8f38","title":"Hadoop"},{"location":"Finished/HDFS%20Spark/#spark","text":"RDD\u7684\u4e3b\u8981\u7279\u8272\u662ffault tolerance\uff0c\u7576\u67d0\u53f0executer\u639b\u4e86\u53ef\u4ee5\u518d\u53bb\u53eb\u5176\u4ed6executer\u8dd1 Spark\u53ef\u4ee5\u628a\u4ed6\u60f3\u50cf\u6210\u7ba1\u7406\u5206\u6563\u5f0f\u8cc7\u6599\u7684\u7a0b\u5f0f\uff0c\u8b93\u4f60\u5728\u4f7f\u7528\u7684\u6642\u5019\u6c92\u6709\u5206\u6563\u5f0f\u7684\u611f\u89ba dataframe\u5c31\u662f\u6709schema\u7684RDD\uff0c\u66f4\u9ad8\u968e PySpark\u4e3b\u8981\u662f\u64cd\u4f5cRDD\u8ddfdataframe\uff0cdataframe\u80fd\u505a\u7684\u4e8b\u5c31\u76e1\u91cf\u4f7f\u7528dataframe UDF\u5728RDD\u6bd4\u8f03\u597d\u5beb\uff0cdataframe\u4e0d\u597d\u5beb df.rdd \u6709performance issue","title":"Spark"},{"location":"Finished/Learning%20How%20to%20Learn/","text":"Learning How to Learn What is Learning Both metaphor and analogy are really helpful when you're trying to learn something new. Focused Diffuse mode Pomodoro technique Spaced repetition Sleep and exercise help improve our memory and our ability to learn Exercise allows you to disconnect from what you have been concentrating on previously--this can allow your diffuse mode to kick in Chuncking chunks forming a mental \"chunk\" Focus on the information you want to chunk Understand the basic idea or concept you are trying to chunk Gain context for how and when to use this chunk by practice testing yourself recall deliberate practice transfer overlearning Einstellung interleaving Procrastination and Memory Habits The cue The routine The reward The belief Process and Product zombie mode keep a planner journal Long term memory Working memory visual and spatial memory systems meaningful groups and abbreviations memory palace Retrieval Practice How to Become a Better Learner Physical Exercise. practice making perfect. metaphor and analogy 'Right-Brain' and 'Left-Brain' Imposter Syndrome Having a somewhat smaller working memory means you can more easily generalize your learning into new, more creative combinations. Hard Start - Jump to Easy bigger picture in mind","title":"Learning How to Learn"},{"location":"Finished/Learning%20How%20to%20Learn/#learning-how-to-learn","text":"","title":"Learning How to Learn"},{"location":"Finished/Learning%20How%20to%20Learn/#what-is-learning","text":"Both metaphor and analogy are really helpful when you're trying to learn something new. Focused Diffuse mode Pomodoro technique Spaced repetition Sleep and exercise help improve our memory and our ability to learn Exercise allows you to disconnect from what you have been concentrating on previously--this can allow your diffuse mode to kick in","title":"What is Learning"},{"location":"Finished/Learning%20How%20to%20Learn/#chuncking","text":"chunks forming a mental \"chunk\" Focus on the information you want to chunk Understand the basic idea or concept you are trying to chunk Gain context for how and when to use this chunk by practice testing yourself recall deliberate practice transfer overlearning Einstellung interleaving","title":"Chuncking"},{"location":"Finished/Learning%20How%20to%20Learn/#procrastination-and-memory","text":"Habits The cue The routine The reward The belief Process and Product zombie mode keep a planner journal Long term memory Working memory visual and spatial memory systems meaningful groups and abbreviations memory palace","title":"Procrastination and Memory"},{"location":"Finished/Learning%20How%20to%20Learn/#retrieval-practice","text":"How to Become a Better Learner Physical Exercise. practice making perfect. metaphor and analogy 'Right-Brain' and 'Left-Brain' Imposter Syndrome Having a somewhat smaller working memory means you can more easily generalize your learning into new, more creative combinations. Hard Start - Jump to Easy bigger picture in mind","title":"Retrieval Practice"},{"location":"Finished/Refactoring/","text":"Refactoring Chapter 1 Refactoring: A First Example When you have to add a feature to a program but the code is not structured in a convenient way, first refactor the program to make it easy to add the feature, then add the feature. \u6ce8\u610f\u4e00\u5207\u90fd\u662f\u56e0\u70ba\"\u6539\u52d5\"\u7684\u9700\u6c42\u9020\u6210\u9700\u8981\u91cd\u69cb\uff0c\u5982\u679c\u7a0b\u5f0f\u78bc\u904b\u4f5c\u6b63\u5e38\u4e14\u4e0d\u9700\u8981\u6539\u52d5\uff0c\u4e5f\u6c92\u6709\u4eba\u9700\u8981\u770b\uff0c\u90a3\u9ebc\"It's perfectly fine to leave it alone.\" Before you start refactoring, make sure you have a solid suite of tests. These tests must be self-checking. \u6e2c\u8a66\u5fc5\u9808\u8981self-checking\uff0c\u9019\u6a23\u624d\u4e0d\u6703\u6258\u6162\u901f\u5ea6\uff0c\u624d\u6703\u983b\u7e41\u57f7\u884c\u3002 \u91cd\u69cb\u9577\u51fd\u5f0f\u901a\u5e38\u5148\u627e\u5c0b\u53ef\u4ee5\u5206\u96e2\u884c\u70ba\u7684\u5730\u65b9\u3002 \u6bcf\u6b21\u7684\u5c0f\u66f4\u52d5\u7d50\u675f\u90fd\u8dd1\u4e00\u6b21\u6e2c\u8a66\uff0c\u9019\u4e5f\u4ee3\u8868\u4e00\u65e6\u767c\u73fe\u932f\u8aa4\u4f60\u5c0b\u627e\u4ed6\u7684\u7bc4\u570d\u5c31\u5f88\u5c0f\uff0c\u9019\u5c31\u662f\u91cd\u69cb\u7684\u6839\u672c\uff1a\u5c0f\u6539\u52d5\u800c\u6bcf\u6b21\u6539\u52d5\u5b8c\u8dd1\u6e2c\u8a66\u3002 Refactoring changes the programs in small steps, so if you make a mistake, it is easy to find where the bug is. \u4f7f\u7528\u7248\u63a7\uff0c\u6bcf\u6b21\u7684\u91cd\u69cb\u90fd\u4f7f\u7528private commit\uff0c\u6700\u5f8cpush\u4e4b\u524d\u518dsquash changes. Any fool can write code that a computer can understand. Good programmers write code that humans can understand. \u5927\u591a\u6642\u5019\u91cd\u69cb\u4e0d\u592a\u6703\u9020\u6210\u6548\u80fd\u554f\u984c\uff0c\u800c\u4e14\u8070\u660e\u7684\u7de8\u8b6f\u5668\u6216\u73fe\u4ee3\u5feb\u53d6\u6a5f\u5236\u4e5f\u6703\u5f71\u97ff\u6211\u5011\u5c0d\u7a0b\u5f0f\u78bc\u5be6\u969b\u7684\u6548\u80fd\u5224\u65b7\uff0c\u901a\u5e38\u8edf\u9ad4\u7684\u6548\u80fd\u53ea\u53d6\u6c7a\u65bc\u4e00\u90e8\u5206\u7684\u7a0b\u5f0f\u78bc\u3002\u4f46\u7e3d\u6709\u4f8b\u5916\u7684\u6642\u5019\uff0c\u5982\u679c\u91cd\u5920\u78ba\u5be6\u9020\u6210\u4e86\u6548\u80fd\u554f\u984c\uff0c\u90a3\u5c31\u91cd\u69cb\u4e4b\u5f8c\u518d\u958b\u59cb\u8abf\u6559\u6548\u80fd\uff0c\u5118\u7ba1\u6709\u53ef\u80fd\u56de\u5fa9\u5230\u91cd\u69cb\u4e4b\u524d\u7684\u72c0\u614b\uff0c\u4f46\u5927\u591a\u6642\u5019\u56e0\u70ba\u91cd\u69cb\u7684\u95dc\u4fc2\u4f60\u53ef\u4ee5\u628a\u6548\u80fd\u8abf\u6559\u5f97\u66f4\u597d\uff0c\u6700\u5f8c\u5f97\u5230\u6548\u80fd\u597d\u53c8\u7c21\u6f54\u7684\u7a0b\u5f0f\u78bc\u3002 \u6240\u4ee5\u6574\u9ad4\u800c\u8a00\u91cd\u69cb\u5c0d\u6548\u80fd\u7684\u5efa\u8b70\u662f\uff1a\u5ffd\u7565\u5927\u90e8\u5206\u7684\u60c5\u6cc1\uff0c\u5982\u679c\u771f\u7684\u9047\u4e0a\u4e86\u5c31\u5148\u91cd\u69cb\u518d\u8abf\u6548\u80fd\u3002 I prefer to treat data as immutable as much as I can-mutable state quickly becomes something rotten. \u8ddf\u91cd\u69cb\u524d\u7684\u7a0b\u5f0f\u76f8\u6bd4\u591a\u4e86\u5f88\u591a\u884c\uff0c\u4f46\u9019\u8b93\u908f\u8f2f\u66f4\u4f73\u6e05\u695a\u4e14\u65b0\u589e\u529f\u80fd\u66f4\u65b9\u4fbf Brevity is the soul of wit, but clarity is the soul of evolvable software. \u6211\u7e3d\u662f\u8981\u5728\u6211\u80fd\u505a\u7684\u6240\u6709\u91cd\u69cb\u548c\u6dfb\u52a0\u65b0\u529f\u80fd\u4e4b\u9593\u53d6\u5f97\u5e73\u8861\u3002\u76ee\u524d\uff0c\u5927\u591a\u6578\u4eba\u90fd\u6c92\u6709\u512a\u5148\u8003\u616e\u91cd\u69cb - \u4f46\u4ecd\u7136\u5b58\u5728\u5e73\u8861 When programming, follow the camping rule: Always leave the code base healthier than when you found it. \u5f88\u591a\u4eba\u559c\u6b61\u8a0e\u8ad6\u597d\u7684\u7a0b\u5f0f\u78bc\u61c9\u8a72\u9577\u751a\u9ebc\u6a23\u5b50\uff0c\u4f46\u771f\u6b63\u8a72\u95dc\u5fc3\u7684\u662f\u5982\u4f55\u6539\u5584\u800c\u4e0d\u662f\u500b\u4eba\u53e3\u5473 The true test of good code is how easy it is to change it. Javascript\u5c0f\u6280\u5de7 \u4f7f\u7528extract function\u53ef\u4ee5\u5229\u7528nested function\uff0c\u9019\u6a23\u5c31\u4e0d\u7528\u50b3\u905e\u53c3\u6578 \u5728\u52d5\u614b\u578b\u5225\u7684\u8a9e\u8a00\uff0c\u628adefault parameter\u540d\u7a31\u52a0\u4e0a\u578b\u5225\u540d\u7a31 \u5229\u7528\u8907\u88fd\u7269\u4ef6\u65b0\u589e\u8cc7\u8a0a\u9054\u5230\u76e1\u91cf\u4f7f\u8cc7\u6599immutable \u8907\u88fd\u7269\u4ef6 Object.assign({}, data)","title":"Refactoring"},{"location":"Finished/Refactoring/#refactoring","text":"","title":"Refactoring"},{"location":"Finished/Refactoring/#chapter-1-refactoring-a-first-example","text":"When you have to add a feature to a program but the code is not structured in a convenient way, first refactor the program to make it easy to add the feature, then add the feature. \u6ce8\u610f\u4e00\u5207\u90fd\u662f\u56e0\u70ba\"\u6539\u52d5\"\u7684\u9700\u6c42\u9020\u6210\u9700\u8981\u91cd\u69cb\uff0c\u5982\u679c\u7a0b\u5f0f\u78bc\u904b\u4f5c\u6b63\u5e38\u4e14\u4e0d\u9700\u8981\u6539\u52d5\uff0c\u4e5f\u6c92\u6709\u4eba\u9700\u8981\u770b\uff0c\u90a3\u9ebc\"It's perfectly fine to leave it alone.\" Before you start refactoring, make sure you have a solid suite of tests. These tests must be self-checking. \u6e2c\u8a66\u5fc5\u9808\u8981self-checking\uff0c\u9019\u6a23\u624d\u4e0d\u6703\u6258\u6162\u901f\u5ea6\uff0c\u624d\u6703\u983b\u7e41\u57f7\u884c\u3002 \u91cd\u69cb\u9577\u51fd\u5f0f\u901a\u5e38\u5148\u627e\u5c0b\u53ef\u4ee5\u5206\u96e2\u884c\u70ba\u7684\u5730\u65b9\u3002 \u6bcf\u6b21\u7684\u5c0f\u66f4\u52d5\u7d50\u675f\u90fd\u8dd1\u4e00\u6b21\u6e2c\u8a66\uff0c\u9019\u4e5f\u4ee3\u8868\u4e00\u65e6\u767c\u73fe\u932f\u8aa4\u4f60\u5c0b\u627e\u4ed6\u7684\u7bc4\u570d\u5c31\u5f88\u5c0f\uff0c\u9019\u5c31\u662f\u91cd\u69cb\u7684\u6839\u672c\uff1a\u5c0f\u6539\u52d5\u800c\u6bcf\u6b21\u6539\u52d5\u5b8c\u8dd1\u6e2c\u8a66\u3002 Refactoring changes the programs in small steps, so if you make a mistake, it is easy to find where the bug is. \u4f7f\u7528\u7248\u63a7\uff0c\u6bcf\u6b21\u7684\u91cd\u69cb\u90fd\u4f7f\u7528private commit\uff0c\u6700\u5f8cpush\u4e4b\u524d\u518dsquash changes. Any fool can write code that a computer can understand. Good programmers write code that humans can understand. \u5927\u591a\u6642\u5019\u91cd\u69cb\u4e0d\u592a\u6703\u9020\u6210\u6548\u80fd\u554f\u984c\uff0c\u800c\u4e14\u8070\u660e\u7684\u7de8\u8b6f\u5668\u6216\u73fe\u4ee3\u5feb\u53d6\u6a5f\u5236\u4e5f\u6703\u5f71\u97ff\u6211\u5011\u5c0d\u7a0b\u5f0f\u78bc\u5be6\u969b\u7684\u6548\u80fd\u5224\u65b7\uff0c\u901a\u5e38\u8edf\u9ad4\u7684\u6548\u80fd\u53ea\u53d6\u6c7a\u65bc\u4e00\u90e8\u5206\u7684\u7a0b\u5f0f\u78bc\u3002\u4f46\u7e3d\u6709\u4f8b\u5916\u7684\u6642\u5019\uff0c\u5982\u679c\u91cd\u5920\u78ba\u5be6\u9020\u6210\u4e86\u6548\u80fd\u554f\u984c\uff0c\u90a3\u5c31\u91cd\u69cb\u4e4b\u5f8c\u518d\u958b\u59cb\u8abf\u6559\u6548\u80fd\uff0c\u5118\u7ba1\u6709\u53ef\u80fd\u56de\u5fa9\u5230\u91cd\u69cb\u4e4b\u524d\u7684\u72c0\u614b\uff0c\u4f46\u5927\u591a\u6642\u5019\u56e0\u70ba\u91cd\u69cb\u7684\u95dc\u4fc2\u4f60\u53ef\u4ee5\u628a\u6548\u80fd\u8abf\u6559\u5f97\u66f4\u597d\uff0c\u6700\u5f8c\u5f97\u5230\u6548\u80fd\u597d\u53c8\u7c21\u6f54\u7684\u7a0b\u5f0f\u78bc\u3002 \u6240\u4ee5\u6574\u9ad4\u800c\u8a00\u91cd\u69cb\u5c0d\u6548\u80fd\u7684\u5efa\u8b70\u662f\uff1a\u5ffd\u7565\u5927\u90e8\u5206\u7684\u60c5\u6cc1\uff0c\u5982\u679c\u771f\u7684\u9047\u4e0a\u4e86\u5c31\u5148\u91cd\u69cb\u518d\u8abf\u6548\u80fd\u3002 I prefer to treat data as immutable as much as I can-mutable state quickly becomes something rotten. \u8ddf\u91cd\u69cb\u524d\u7684\u7a0b\u5f0f\u76f8\u6bd4\u591a\u4e86\u5f88\u591a\u884c\uff0c\u4f46\u9019\u8b93\u908f\u8f2f\u66f4\u4f73\u6e05\u695a\u4e14\u65b0\u589e\u529f\u80fd\u66f4\u65b9\u4fbf Brevity is the soul of wit, but clarity is the soul of evolvable software. \u6211\u7e3d\u662f\u8981\u5728\u6211\u80fd\u505a\u7684\u6240\u6709\u91cd\u69cb\u548c\u6dfb\u52a0\u65b0\u529f\u80fd\u4e4b\u9593\u53d6\u5f97\u5e73\u8861\u3002\u76ee\u524d\uff0c\u5927\u591a\u6578\u4eba\u90fd\u6c92\u6709\u512a\u5148\u8003\u616e\u91cd\u69cb - \u4f46\u4ecd\u7136\u5b58\u5728\u5e73\u8861 When programming, follow the camping rule: Always leave the code base healthier than when you found it. \u5f88\u591a\u4eba\u559c\u6b61\u8a0e\u8ad6\u597d\u7684\u7a0b\u5f0f\u78bc\u61c9\u8a72\u9577\u751a\u9ebc\u6a23\u5b50\uff0c\u4f46\u771f\u6b63\u8a72\u95dc\u5fc3\u7684\u662f\u5982\u4f55\u6539\u5584\u800c\u4e0d\u662f\u500b\u4eba\u53e3\u5473 The true test of good code is how easy it is to change it.","title":"Chapter 1 Refactoring: A First Example"},{"location":"Finished/Refactoring/#javascript","text":"\u4f7f\u7528extract function\u53ef\u4ee5\u5229\u7528nested function\uff0c\u9019\u6a23\u5c31\u4e0d\u7528\u50b3\u905e\u53c3\u6578 \u5728\u52d5\u614b\u578b\u5225\u7684\u8a9e\u8a00\uff0c\u628adefault parameter\u540d\u7a31\u52a0\u4e0a\u578b\u5225\u540d\u7a31 \u5229\u7528\u8907\u88fd\u7269\u4ef6\u65b0\u589e\u8cc7\u8a0a\u9054\u5230\u76e1\u91cf\u4f7f\u8cc7\u6599immutable \u8907\u88fd\u7269\u4ef6 Object.assign({}, data)","title":"Javascript\u5c0f\u6280\u5de7"},{"location":"Finished/The%20Effective%20Engineer/","text":"The Effective Engineer In his book High Output Management, Former Intel CEO Andrew Grove explains that by definition, your overall leverage\u2014the amount of value that you produce per unit time\u2014can only be increased in three ways: By reducing the time it takes to complete a certain activity. By increasing the output of a particular activity. By shifting to higher-leverage activities. These three ways naturally translate into three questions we can ask ourselves about any activity we\u2019re working on: How can I complete this activity in a shorter amount of time? How can I increase the value produced by this activity? Is there something else that I could spend my time on that would produce more value?","title":"The Effective Engineer"},{"location":"Finished/The%20Effective%20Engineer/#the-effective-engineer","text":"In his book High Output Management, Former Intel CEO Andrew Grove explains that by definition, your overall leverage\u2014the amount of value that you produce per unit time\u2014can only be increased in three ways: By reducing the time it takes to complete a certain activity. By increasing the output of a particular activity. By shifting to higher-leverage activities. These three ways naturally translate into three questions we can ask ourselves about any activity we\u2019re working on: How can I complete this activity in a shorter amount of time? How can I increase the value produced by this activity? Is there something else that I could spend my time on that would produce more value?","title":"The Effective Engineer"},{"location":"Finished/%E7%B5%A6%E5%8A%9B/","text":"\u7d66\u529b \u7576\u5de5\u7a0b\u5e2b\u958b\u59cb\u5c0d\u4e00\u500b\u4f60\u8a66\u5716\u5be6\u884c\u7684\u6d41\u7a0b\u767c\u51fa\u62b1\u6028\u6642\uff0c\u4f60\u5c31\u61c9\u8a72\u8a8d\u771f\u63a2\u7a76\u662f\u751a\u9ebc\u53e6\u5b83\u5011\u60f1\u6012\uff0c\u56e0\u70ba\u4ed6\u5011\u75db\u6068\u6c92\u9053\u7406\u7684\u7e41\u6587\u7e1f\u7bc0\u548c\u611a\u8822\u7684\u6d41\u7a0b\uff0c\u4f46\u4ed6\u5011\u5c0d\u7d00\u5f8b\u4e00\u9ede\u4e5f\u4e0d\u6562\u5192\u3002 \u4f01\u696d\u754c\u7684\u5c0b\u5e38\u6210\u9577\u65b9\u5f0f\u662f\u589e\u52a0\u66f4\u591a\u54e1\u5de5\u548c\u7d44\u7e54\u67b6\u69cb\uff0c\u65bd\u52a0\u66f4\u591a\u56fa\u5b9a\u9810\u7b97\u7684\u76ee\u6a19\u8207\u9650\u5236\uff1b\u4f46\u662f\uff0c\u6839\u64da\u6211\u5728\u6210\u529f\u64f4\u5f35\u3001\u5feb\u901f\u6210\u9577\u578b\u516c\u53f8\u7684\u7d93\u9a57\uff0c\u6700\u7cbe\u5be6\u7684\u6d41\u7a0b\u548c\u5805\u5be6\u7684\u7d00\u5f8b\u6587\u5316\u9060\u9060\u66f4\u512a\u826f\uff0c\u5c31\u7b97\u4e0d\u70ba\u5225\u7684\uff0c\u5149\u662f\u70ba\u4e86\u901f\u5ea6\uff0c\u9019\u5169\u8005\u7522\u751f\u7684\u52a9\u76ca\u904d\u9060\u9060\u66f4\u5927\u3002 \u4f60\u80fd\u70ba\u54e1\u5de5\u505a\u5f97\u6700\u68d2\u7684\u4e8b\uff0c\u662f\u53ea\u62db\u52df\u9ad8\u7e3e\u6548\u8005\u9032\u4f86\u8207\u4ed6\u5011\u5171\u4e8b\uff0c\u9019\u9060\u52dd\u904e\u70ba\u4ed6\u5011\u8cfc\u7f6e\u624b\u8db3\u7403\u684c\u3001\u6216\u514d\u8cbb\u4f9b\u61c9\u4ed6\u5011\u58fd\u53f8\u3001\u6216\u767c\u7d66\u5b83\u5011\u5927\u7b46\u734e\u91d1\u6216\u80a1\u7968\u9078\u64c7\u6b0a\u3002\u6709\u512a\u7570\u7684\u540c\u4e8b\uff0c\u6709\u660e\u78ba\u7684\u76ee\u6a19\uff0c\u6709\u6e05\u695a\u660e\u77ad\u4e14\u53ef\u4ee5\u505a\u5f97\u5230\u7684\u6210\u679c\uff1a\u9019\u662f\u5f88\u5f37\u800c\u6709\u529b\u7684\u7d44\u5408\u3002 \u5728Netflix\uff0c\u6211\u5011\u9762\u8a66\u61c9\u5fb5\u8005\u6642\uff0c\u5f88\u5766\u7387\u5730\u544a\u8a34\u4ed6\u5011\uff0c\u9019\u4e0d\u662f\u4e00\u5bb6\u8077\u6daf\u7ba1\u7406\u516c\u53f8\uff0c\u6211\u5011\u8a8d\u70ba\u54e1\u5de5\u7684\u8077\u6daf\u7ba1\u7406\u53ca\u898f\u5283\u662f\u4ed6\u5011\u81ea\u5df1\u7684\u4e8b\uff0c\u5728\u9019\u5bb6\u516c\u53f8\u8208\u8a31\u6709\u5f88\u591a\u5347\u9077\u6a5f\u6703\uff0c\u4f46\u6211\u5011\u4e0d\u6703\u70ba\u4ed6\u5011\u8a2d\u8a08\u8207\u5275\u9020\u6a5f\u6703\u3002 \u6211\u8a8d\u70ba\uff0c\u5c0d\u73fe\u4eca\u5de5\u4f5c\u8005\u7684\u6700\u4f73\u5efa\u8b70\u662f\uff1a\u4fdd\u6301\u9748\u6d3b\uff0c\u6301\u7e8c\u5b78\u7fd2\u65b0\u6280\u80fd\uff0c\u8003\u616e\u65b0\u6a5f\u6703\uff0c\u7d93\u5e38\u63a5\u53d7\u65b0\u6311\u6230\uff0c\u8b93\u81ea\u5df1\u7684\u5de5\u4f5c\u4fdd\u6301\u65b0\u9bae\u5ea6\uff0c\u6301\u7e8c\u64f4\u5c55\u958b\u767c\u81ea\u5df1\u7684\u6f5b\u80fd\u3002Netflix\u9f13\u52f5\u54e1\u5de5\u70ba\u81ea\u5df1\u7684\u6210\u9577\u8ca0\u8cac\uff0c\u8b93\u81ea\u5df1\u6709\u8cc7\u683c\u638c\u63e1\u516c\u53f8\u63d0\u4f9b\u7d66\u4ed6\u5011\u5411\u512a\u7570\u540c\u4ec1\u8207\u7d93\u7406\u4eba\u5b78\u7fd2\u7684\u8a31\u591a\u6a5f\u6703\uff0c\u81ea\u884c\u8ffd\u6c42\u6210\u529f\u2014\u2014\u4e0d\u8ad6\u662f\u5728\u516c\u53f8\u88e1\u5347\u9077\uff0c\u6216\u662f\u638c\u63e1\u5916\u9762\u66f4\u597d\u7684\u5de5\u4f5c\u6a5f\u6703\u3002 \u548c\u512a\u79c0\u7684\u4eba\u5171\u4e8b\uff0c\u6709\u6210\u9577\u6a5f\u6703\uff0c\u6bd4\u5411\u6211\u660e\u986f\u627f\u8afe\u6709\u5347\u9077\u9014\u5f91\u66f4\u70ba\u91cd\u8981 \u4eba\u5011\u8b8a\u5f97\u592a\u57f7\u8457\u65bc\u8cc7\u6599\uff0c\u592a\u5e38\u5c0d\u8cc7\u6599\u505a\u51fa\u592a\u904e\u72f9\u7fa9\u7684\u601d\u8003\uff0c\u5ffd\u8996\u4e86\u66f4\u5bec\u5ee3\u7684\u5546\u696d\u8108\u7d61\u80cc\u666f\uff0c\u628a\u8cc7\u6599\u8996\u70ba\u7591\u554f\u7684\u89e3\u7b54\uff0c\u800c\u975e\u4f7f\u7528\u8cc7\u6599\u4f86\u5efa\u69cb\u6709\u5e6b\u52a9\u7684\u7591\u554f\u3002 \u8003\u616e\u54e1\u5de5\u70ba\u4f60\u5de5\u4f5c\u7684\u50f9\u503c \u6211\u5011\u8a8d\u77e5\u5230\uff0c\u5728\u4e00\u4e9b\u8077\u52d9\u4e0a\uff0c\u6211\u5011\u5275\u9020\u4e86\u81ea\u5df1\u7684\u5c08\u9577\u548c\u7a00\u6709\u6027\uff0c\u50f5\u5316\u5730\u56fa\u5b88\u5167\u90e8\u85aa\u8cc7\u7d1a\u8ddd\u5f88\u53ef\u80fd\u5728\u8ca1\u52d9\u4e0a\u50b7\u5bb3\u6211\u5011\u7684\u6700\u4f73\u8ca2\u737b\u8005\uff0c\u56e0\u70ba\u4ed6\u5011\u53ef\u4ee5\u5728\u5225\u8655\u7372\u5f97\u66f4\u9ad8\u7684\u85aa\u8cc7\u3002\u6211\u5011\u6c7a\u5b9a\u4e0d\u518d\u4f7f\u7528\u4e00\u7a2e\u8feb\u4f7f\u54e1\u5de5\u5fc5\u9808\u8f49\u5f80\u5225\u5bb6\u516c\u53f8\uff0c\u4ee5\u7372\u5f97\u7b26\u5408\u4ed6\u5011\u8eab\u50f9\u85aa\u916c\u7684\u5236\u5ea6\uff0c\u6211\u5011\u4e5f\u9f13\u52f5\u54e1\u5de5\u7d93\u5e38\u53bb\u9762\u8a66\u5225\u5bb6\u516c\u53f8\u5de5\u4f5c\uff0c\u56e0\u70ba\u9019\u662f\u5e6b\u52a9\u4e86\u89e3Netflix\u7684\u85aa\u916c\u6c34\u6e96\uff0c\u5728\u5e02\u5834\u4e0a\u662f\u5426\u5177\u6709\u7af6\u722d\u529b\u7684\u6700\u53ef\u9760\u3001\u6700\u6709\u6548\u7387\u7684\u65b9\u6cd5\u3002 \u82e5\u53ea\u9700\u958b\u9664\u90a3\u4e9b\u4e0d\u6295\u5165\u7684\u54e1\u5de5\uff0c\u5c31\u80fd\u7372\u5f97\u9ad8\u7e3e\u6548\u7684\u8a71\uff0c\u90a3\u6240\u6709\u516c\u53f8\u90fd\u80fd\u5f88\u5bb9\u6613\u5730\u6b23\u6b23\u5411\u69ae\u4e86 \u9ad8\u7e3e\u6548\u8005\u5176\u5be6\u5e38\u5c0d\u5176\u5718\u968a\u8868\u73fe\u611f\u5230\u4e0d\u6eff\u610f\uff0c\u800c\u4e0d\u662f\u5c0d\u4e8b\u4e8b\u90fd\u611f\u5230\u6eff\u610f\u9806\u5fc3\uff0c\u4ed6\u5011\u5f80\u5f80\u5728\u4e00\u5b9a\u7a0b\u5ea6\u7684\u4e0d\u6eff\u610f\u4e4b\u4e0b\uff0c\u8ffd\u6c42\u66f4\u597d\u7684\u8868\u73fe\u8207\u6210\u679c \u6b77\u7d93\u66f4\u591a\u8271\u8f9b\uff0c\u7372\u81f4\u66f4\u52a0\u6210\u5c31\u3002\u516c\u53f8\u61c9\u8a72\u4fc3\u9032\u7684\u662f\u9019\u7a2e\u81f4\u529b\u65bc\u8ffd\u6c42\u6210\u679c\u7684\u7cbe\u795e\u884c\u70ba\uff0c\u800c\u4e0d\u662f\u8b93\u54e1\u5de5\u8a8d\u70ba\u53ea\u8981\u52aa\u529b\u5de5\u4f5c\uff0c\u516c\u53f8\u5c31\u6703\u652f\u6301\u4ed6\u5011 \u4eba\u624d\u6f14\u7b97\u6cd5: \u6b64\u4eba\u611b\u505a\u3001\u6975\u64c5\u9577\u505a\u7684\u4e8b\uff0c\u662f\u5426\u6b63\u662f\u6211\u5011\u9700\u8981\u4ed6\u7cbe\u719f\u4e4b\u4e8b\uff1f \u7a4d\u6975\u89e3\u96c7\u54e1\u5de5 \u516c\u53f8\u6587\u5316\u662f\u516c\u53f8\u7684\u71df\u904b\u7b56\u7565\u4e4b\u4e00\uff0c\u82e5\u54e1\u5de5\u76f8\u4fe1\u5b83\u662f\u4e00\u7a2e\u7b56\u7565\uff0c\u5b83\u5f88\u91cd\u8981\uff0c\u4ed6\u5011\u5c31\u6703\u5e6b\u52a9\u4f60\u6df1\u5165\u601d\u8003\u5b83\uff0c\u4e26\u505a\u51fa\u5617\u8a66 Engagement","title":"\u7d66\u529b"},{"location":"Finished/%E7%B5%A6%E5%8A%9B/#_1","text":"\u7576\u5de5\u7a0b\u5e2b\u958b\u59cb\u5c0d\u4e00\u500b\u4f60\u8a66\u5716\u5be6\u884c\u7684\u6d41\u7a0b\u767c\u51fa\u62b1\u6028\u6642\uff0c\u4f60\u5c31\u61c9\u8a72\u8a8d\u771f\u63a2\u7a76\u662f\u751a\u9ebc\u53e6\u5b83\u5011\u60f1\u6012\uff0c\u56e0\u70ba\u4ed6\u5011\u75db\u6068\u6c92\u9053\u7406\u7684\u7e41\u6587\u7e1f\u7bc0\u548c\u611a\u8822\u7684\u6d41\u7a0b\uff0c\u4f46\u4ed6\u5011\u5c0d\u7d00\u5f8b\u4e00\u9ede\u4e5f\u4e0d\u6562\u5192\u3002 \u4f01\u696d\u754c\u7684\u5c0b\u5e38\u6210\u9577\u65b9\u5f0f\u662f\u589e\u52a0\u66f4\u591a\u54e1\u5de5\u548c\u7d44\u7e54\u67b6\u69cb\uff0c\u65bd\u52a0\u66f4\u591a\u56fa\u5b9a\u9810\u7b97\u7684\u76ee\u6a19\u8207\u9650\u5236\uff1b\u4f46\u662f\uff0c\u6839\u64da\u6211\u5728\u6210\u529f\u64f4\u5f35\u3001\u5feb\u901f\u6210\u9577\u578b\u516c\u53f8\u7684\u7d93\u9a57\uff0c\u6700\u7cbe\u5be6\u7684\u6d41\u7a0b\u548c\u5805\u5be6\u7684\u7d00\u5f8b\u6587\u5316\u9060\u9060\u66f4\u512a\u826f\uff0c\u5c31\u7b97\u4e0d\u70ba\u5225\u7684\uff0c\u5149\u662f\u70ba\u4e86\u901f\u5ea6\uff0c\u9019\u5169\u8005\u7522\u751f\u7684\u52a9\u76ca\u904d\u9060\u9060\u66f4\u5927\u3002 \u4f60\u80fd\u70ba\u54e1\u5de5\u505a\u5f97\u6700\u68d2\u7684\u4e8b\uff0c\u662f\u53ea\u62db\u52df\u9ad8\u7e3e\u6548\u8005\u9032\u4f86\u8207\u4ed6\u5011\u5171\u4e8b\uff0c\u9019\u9060\u52dd\u904e\u70ba\u4ed6\u5011\u8cfc\u7f6e\u624b\u8db3\u7403\u684c\u3001\u6216\u514d\u8cbb\u4f9b\u61c9\u4ed6\u5011\u58fd\u53f8\u3001\u6216\u767c\u7d66\u5b83\u5011\u5927\u7b46\u734e\u91d1\u6216\u80a1\u7968\u9078\u64c7\u6b0a\u3002\u6709\u512a\u7570\u7684\u540c\u4e8b\uff0c\u6709\u660e\u78ba\u7684\u76ee\u6a19\uff0c\u6709\u6e05\u695a\u660e\u77ad\u4e14\u53ef\u4ee5\u505a\u5f97\u5230\u7684\u6210\u679c\uff1a\u9019\u662f\u5f88\u5f37\u800c\u6709\u529b\u7684\u7d44\u5408\u3002 \u5728Netflix\uff0c\u6211\u5011\u9762\u8a66\u61c9\u5fb5\u8005\u6642\uff0c\u5f88\u5766\u7387\u5730\u544a\u8a34\u4ed6\u5011\uff0c\u9019\u4e0d\u662f\u4e00\u5bb6\u8077\u6daf\u7ba1\u7406\u516c\u53f8\uff0c\u6211\u5011\u8a8d\u70ba\u54e1\u5de5\u7684\u8077\u6daf\u7ba1\u7406\u53ca\u898f\u5283\u662f\u4ed6\u5011\u81ea\u5df1\u7684\u4e8b\uff0c\u5728\u9019\u5bb6\u516c\u53f8\u8208\u8a31\u6709\u5f88\u591a\u5347\u9077\u6a5f\u6703\uff0c\u4f46\u6211\u5011\u4e0d\u6703\u70ba\u4ed6\u5011\u8a2d\u8a08\u8207\u5275\u9020\u6a5f\u6703\u3002 \u6211\u8a8d\u70ba\uff0c\u5c0d\u73fe\u4eca\u5de5\u4f5c\u8005\u7684\u6700\u4f73\u5efa\u8b70\u662f\uff1a\u4fdd\u6301\u9748\u6d3b\uff0c\u6301\u7e8c\u5b78\u7fd2\u65b0\u6280\u80fd\uff0c\u8003\u616e\u65b0\u6a5f\u6703\uff0c\u7d93\u5e38\u63a5\u53d7\u65b0\u6311\u6230\uff0c\u8b93\u81ea\u5df1\u7684\u5de5\u4f5c\u4fdd\u6301\u65b0\u9bae\u5ea6\uff0c\u6301\u7e8c\u64f4\u5c55\u958b\u767c\u81ea\u5df1\u7684\u6f5b\u80fd\u3002Netflix\u9f13\u52f5\u54e1\u5de5\u70ba\u81ea\u5df1\u7684\u6210\u9577\u8ca0\u8cac\uff0c\u8b93\u81ea\u5df1\u6709\u8cc7\u683c\u638c\u63e1\u516c\u53f8\u63d0\u4f9b\u7d66\u4ed6\u5011\u5411\u512a\u7570\u540c\u4ec1\u8207\u7d93\u7406\u4eba\u5b78\u7fd2\u7684\u8a31\u591a\u6a5f\u6703\uff0c\u81ea\u884c\u8ffd\u6c42\u6210\u529f\u2014\u2014\u4e0d\u8ad6\u662f\u5728\u516c\u53f8\u88e1\u5347\u9077\uff0c\u6216\u662f\u638c\u63e1\u5916\u9762\u66f4\u597d\u7684\u5de5\u4f5c\u6a5f\u6703\u3002 \u548c\u512a\u79c0\u7684\u4eba\u5171\u4e8b\uff0c\u6709\u6210\u9577\u6a5f\u6703\uff0c\u6bd4\u5411\u6211\u660e\u986f\u627f\u8afe\u6709\u5347\u9077\u9014\u5f91\u66f4\u70ba\u91cd\u8981 \u4eba\u5011\u8b8a\u5f97\u592a\u57f7\u8457\u65bc\u8cc7\u6599\uff0c\u592a\u5e38\u5c0d\u8cc7\u6599\u505a\u51fa\u592a\u904e\u72f9\u7fa9\u7684\u601d\u8003\uff0c\u5ffd\u8996\u4e86\u66f4\u5bec\u5ee3\u7684\u5546\u696d\u8108\u7d61\u80cc\u666f\uff0c\u628a\u8cc7\u6599\u8996\u70ba\u7591\u554f\u7684\u89e3\u7b54\uff0c\u800c\u975e\u4f7f\u7528\u8cc7\u6599\u4f86\u5efa\u69cb\u6709\u5e6b\u52a9\u7684\u7591\u554f\u3002 \u8003\u616e\u54e1\u5de5\u70ba\u4f60\u5de5\u4f5c\u7684\u50f9\u503c \u6211\u5011\u8a8d\u77e5\u5230\uff0c\u5728\u4e00\u4e9b\u8077\u52d9\u4e0a\uff0c\u6211\u5011\u5275\u9020\u4e86\u81ea\u5df1\u7684\u5c08\u9577\u548c\u7a00\u6709\u6027\uff0c\u50f5\u5316\u5730\u56fa\u5b88\u5167\u90e8\u85aa\u8cc7\u7d1a\u8ddd\u5f88\u53ef\u80fd\u5728\u8ca1\u52d9\u4e0a\u50b7\u5bb3\u6211\u5011\u7684\u6700\u4f73\u8ca2\u737b\u8005\uff0c\u56e0\u70ba\u4ed6\u5011\u53ef\u4ee5\u5728\u5225\u8655\u7372\u5f97\u66f4\u9ad8\u7684\u85aa\u8cc7\u3002\u6211\u5011\u6c7a\u5b9a\u4e0d\u518d\u4f7f\u7528\u4e00\u7a2e\u8feb\u4f7f\u54e1\u5de5\u5fc5\u9808\u8f49\u5f80\u5225\u5bb6\u516c\u53f8\uff0c\u4ee5\u7372\u5f97\u7b26\u5408\u4ed6\u5011\u8eab\u50f9\u85aa\u916c\u7684\u5236\u5ea6\uff0c\u6211\u5011\u4e5f\u9f13\u52f5\u54e1\u5de5\u7d93\u5e38\u53bb\u9762\u8a66\u5225\u5bb6\u516c\u53f8\u5de5\u4f5c\uff0c\u56e0\u70ba\u9019\u662f\u5e6b\u52a9\u4e86\u89e3Netflix\u7684\u85aa\u916c\u6c34\u6e96\uff0c\u5728\u5e02\u5834\u4e0a\u662f\u5426\u5177\u6709\u7af6\u722d\u529b\u7684\u6700\u53ef\u9760\u3001\u6700\u6709\u6548\u7387\u7684\u65b9\u6cd5\u3002 \u82e5\u53ea\u9700\u958b\u9664\u90a3\u4e9b\u4e0d\u6295\u5165\u7684\u54e1\u5de5\uff0c\u5c31\u80fd\u7372\u5f97\u9ad8\u7e3e\u6548\u7684\u8a71\uff0c\u90a3\u6240\u6709\u516c\u53f8\u90fd\u80fd\u5f88\u5bb9\u6613\u5730\u6b23\u6b23\u5411\u69ae\u4e86 \u9ad8\u7e3e\u6548\u8005\u5176\u5be6\u5e38\u5c0d\u5176\u5718\u968a\u8868\u73fe\u611f\u5230\u4e0d\u6eff\u610f\uff0c\u800c\u4e0d\u662f\u5c0d\u4e8b\u4e8b\u90fd\u611f\u5230\u6eff\u610f\u9806\u5fc3\uff0c\u4ed6\u5011\u5f80\u5f80\u5728\u4e00\u5b9a\u7a0b\u5ea6\u7684\u4e0d\u6eff\u610f\u4e4b\u4e0b\uff0c\u8ffd\u6c42\u66f4\u597d\u7684\u8868\u73fe\u8207\u6210\u679c \u6b77\u7d93\u66f4\u591a\u8271\u8f9b\uff0c\u7372\u81f4\u66f4\u52a0\u6210\u5c31\u3002\u516c\u53f8\u61c9\u8a72\u4fc3\u9032\u7684\u662f\u9019\u7a2e\u81f4\u529b\u65bc\u8ffd\u6c42\u6210\u679c\u7684\u7cbe\u795e\u884c\u70ba\uff0c\u800c\u4e0d\u662f\u8b93\u54e1\u5de5\u8a8d\u70ba\u53ea\u8981\u52aa\u529b\u5de5\u4f5c\uff0c\u516c\u53f8\u5c31\u6703\u652f\u6301\u4ed6\u5011 \u4eba\u624d\u6f14\u7b97\u6cd5: \u6b64\u4eba\u611b\u505a\u3001\u6975\u64c5\u9577\u505a\u7684\u4e8b\uff0c\u662f\u5426\u6b63\u662f\u6211\u5011\u9700\u8981\u4ed6\u7cbe\u719f\u4e4b\u4e8b\uff1f \u7a4d\u6975\u89e3\u96c7\u54e1\u5de5 \u516c\u53f8\u6587\u5316\u662f\u516c\u53f8\u7684\u71df\u904b\u7b56\u7565\u4e4b\u4e00\uff0c\u82e5\u54e1\u5de5\u76f8\u4fe1\u5b83\u662f\u4e00\u7a2e\u7b56\u7565\uff0c\u5b83\u5f88\u91cd\u8981\uff0c\u4ed6\u5011\u5c31\u6703\u5e6b\u52a9\u4f60\u6df1\u5165\u601d\u8003\u5b83\uff0c\u4e26\u505a\u51fa\u5617\u8a66 Engagement","title":"\u7d66\u529b"},{"location":"Finished/%E8%99%95%E7%90%86%E5%95%8F%E9%A1%8C%E7%9A%84%E6%AD%A3%E7%A2%BA%E5%A7%BF%E5%8B%A2/","text":"\u8655\u7406\u554f\u984c\u7684\u6b63\u78ba\u59ff\u52e2 \u7cfb\u7d71\u958b\u767c\u5b8c\u4e0d\u662f\u5c31\u6c92\u4e8b\u4e86\uff0c\u7dad\u6301\u7cfb\u7d71\u6b63\u5e38\u904b\u4f5c\u4e5f\u662f\u6211\u5011\u65e5\u5e38\u5de5\u4f5c\u9805\u76ee\uff0c\u4f8b\u5982\u9019\u4e9b\u72c0\u6cc1\uff1a PM\u56de\u5831\u70ba\u4ec0\u9ebcXXX\u529f\u80fd\u5931\u6548\u3002 \u5230\u5ba2\u6236\u90a3\u88cf\u505a\u4e00\u822c\u7684\u7dad\u904b(\u4f8b\u5982\u5347\u7d1a\u7cfb\u7d71)\u9047\u5230\u7a81\u767c\u88dd\u6cc1\u3002 \u7cfb\u7d71\u5927\u7576\u6a5f\u7121\u6cd5\u6b63\u5e38\u904b\u4f5c\u3002 \u5e0c\u671b\u4ee5\u4e0b\u7684\u5efa\u8b70\u80fd\u5728\u4f60\u8655\u7406\u9019\u4e9b\u554f\u984c\u6642\u7d66\u4f60\u4e00\u9ede\u5e6b\u52a9\u3002 \u6b63\u78ba\u7684\u614b\u5ea6 \u5207\u83ab\u9a5a\u614c \uff0c\u9019\u53ea\u662f\u5de5\u7a0b\u5e2b\u65e5\u5e38\u3002 \u554f\u984c\u53ef\u80fd\u5f88\u56b4\u91cd\u5f88\u7dca\u6025\uff0c\u4f46\u662f\u4f60\u4e0d\u80fd\u6025\u3002 \u5728\u89e3\u6c7a\u554f\u984c\u4e4b\u524d\u4f60\u9084\u6709\u5f88\u591a\u4e8b\u60c5\u8981\u505a \uff0c\u89e3\u6c7a\u554f\u984c\u7d55\u5c0d\u4e0d\u662f\u7b2c\u4e00\u6b65\uff0c\u5343\u842c\u4e0d\u53ef\u975e\u5e38\u614c\u4e82\u5c31\u958b\u59cb\u601d\u8003\u5982\u4f55\u89e3\u6c7a\u554f\u984c\u3002 \u554f\u984c\u5f88\u53ef\u80fd\u4e0d\u662f\u4f60\u9020\u6210\u7684(\u5c24\u5176\u4f60\u662f\u500b\u65b0\u4eba\u7684\u6642\u5019)\uff0c\u6216\u4f60\u7167\u4e86SOP\u64cd\u4f5c\u7cfb\u7d71\u9084\u662f\u51fa\u4e86\u554f\u984c\uff0c\u90a3\u4e5f\u6216\u8a31\u662f\u7cfb\u7d71\u8a2d\u8a08\u4e0d\u826f\u3002\u4f46\u662f\u8ab0\u7684\u932f\u4e0d\u91cd\u8981\uff0c\u91cd\u9ede\u7684\u662f\u554f\u984c\u4ea4\u5230\u4e86\u4f60\u624b\u4e0a\uff0c\u73fe\u5728\u4ed6\u662f\u4f60\u7684\u8cac\u4efb\u3002 \u5c0b\u6c42\u5354\u52a9 \u8a18\u4f4f\u4f60\u4e0d\u662f\u4e00\u500b\u4eba\uff0c\u4f60\u53ef\u4ee5\u5411\u4efb\u4eba\u4f55\u5c0b\u6c42\u5354\u52a9\u3002 \u5ba2\u6236\u901a\u5e38\u6bd4\u4f60\u9084\u6025\uff0c\u5982\u679c\u9700\u8981\u5ba2\u6236\u5354\u52a9\u4f60\u505a\u751a\u9ebc\uff0c\u76f4\u63a5\u5411\u5ba2\u6236\u6216\u662fAM\u63d0\u51fa\u8acb\u6c42\uff0c\u4ed6\u5011\u901a\u5e38\u6703\u5f88\u6a02\u610f\u3002 \u5e36\u8457\u554f\u984c\u5c0b\u6c42\u5354\u52a9\u7684\u6642\u5019\u8981\u5c0f\u5fc3\u4f60\u7684\u5047\u8a2d\u53ef\u80fd\u662f\u932f\u7684\uff0c\u628a\u5ba2\u89c0\u7684\u75c7\u72c0\u544a\u8a34\u4f60\u5c0b\u6c42\u5354\u52a9\u7684\u4eba\u662f\u8f03\u597d\u7684\u65b9\u5411\u3002 \u5ba2\u6236\u662f\u6700\u53ef\u80fd\u641e\u4e0d\u6e05\u695a\u72c0\u6cc1\u7684\uff0c\u4e0d\u904e\u5f88\u591a\u6642\u5019\u6211\u5011\u81ea\u5df1\u7684PM/AM\u4e5f\u641e\u4e0d\u6e05\u695a\uff0c\u751a\u81f3RD\u5230\u6574\u9593\u516c\u53f8\u90fd\u641e\u4e0d\u6e05\u695a\u72c0\u6cc1\uff0c\u9047\u5230\u9019\u500b\u6642\u5019\u4e0d\u7528\u61f7\u7591\uff0c You're on your own (\u4f46\u4f60\u9084\u662f\u80fd\u5c0b\u6c42\u65b9\u5411\u4e0a\u7684\u5354\u52a9)\u3002 \u512a\u5148\u6b0a \u4e86\u89e3\u554f\u984c\u7684\u7dca\u6025\u7a0b\u5ea6 \u662f\u7b2c\u4e00\u4ef6\u4e8b\u60c5\u3002 \u554f\u984c\u6709\u591a\u7dca\u6025\u4e0d\u662f\u5ba2\u6236\u8aaa\u7684\u7b97\u4e5f\u4e0d\u662fAM\u8aaa\u7684\u7b97\uff0c\u4f60\u8981\u6709\u81ea\u5df1\u7684\u80fd\u529b\u5224\u65b7\u3002 \u601d\u8003\u4ee5\u4e0b\u5e7e\u500b\u554f\u984c\u53ef\u4ee5\u5e6b\u52a9\u4f60\u5224\u65b7\u7dca\u6025\u7a0b\u5ea6\uff1a \u9019\u500b\u554f\u984c\u5b58\u5728\u591a\u4e45\u4e86? \u767c\u751f\u7684\u983b\u7387? \u5be6\u969b\u9020\u6210\u7684\u5f71\u97ff? \u662f\u5426\u6709\u8fa6\u6cd5\u5feb\u901f\u89e3\u6c7a? \u5224\u65b7\u7dca\u6025\u7a0b\u5ea6\u5f8c\u628a\u4f60\u8981\u505a\u7684\u4e8b\u3001\u52d5\u6a5f\u548c\u7d50\u679c\u8207AM\u8a0e\u8ad6\uff0c\u4ed6\u5982\u679c\u4e0d\u6eff\u610f\u4e0d\u904e\u4ed6\u53ef\u4ee5\u8ca0\u8cac\uff0c\u90a3\u807d\u4ed6\u7684\u3002 \u8655\u7406\u554f\u984c \u4e0d\u8981\u76f8\u4fe1\u4efb\u4f55\u4eba\u8b1b\u7684\u8a71 \uff0c\u4efb\u4f55\u4eba\u544a\u8a34\u4f60\u7684\u8cc7\u8a0a\u90fd\u53ef\u4ee5\u7576\u53c3\u8003\uff0c\u4e5f\u50c5\u6b62\u65bc\u6b64\u800c\u5df2\uff0c\u9664\u4e86\u6b63\u5728\u57f7\u884c\u7684\u7a0b\u5f0f\u78bc\u5916\uff0c\u6c92\u6709\u4e00\u6a23\u6771\u897f\u662f\u53ef\u4ee5\u76f8\u4fe1\u7684\u3002 \u622a\u5716\u6216\u5f71\u7247\u4e5f\u4e0d\u80fd\u767e\u5206\u4e4b\u767e\u76f8\u4fe1\uff0c \u53ea\u6709\u81ea\u5df1\u91cd\u73fe\u4e00\u6b21 \u89aa\u773c\u898b\u5230\u7684\u75c7\u72c0\u624d\u53ef\u767e\u5206\u4e4b\u767e\u76f8\u4fe1\u3002 \u9664\u975e\u4f60\u7121\u6cd5\u91cd\u73fe\uff0c\u4e0d\u7136 \u5343\u842c\u4e0d\u53ef\u4ee5\u5077\u61f6\u89aa\u81ea\u91cd\u73fe\u9019\u500b\u6b65\u9a5f \uff0c\u4e0d\u7136\u4f60\u7d55\u5c0d\u6703\u5f8c\u6094\u4e0d\u5df2\u3002 \u8996\u554f\u984c\u7684\u7dca\u6025\u8ddf\u8907\u96dc\u7a0b\u5ea6\uff0c\u4f60\u9700\u8981\u601d\u8003\u4e26\u505a\u4e00\u4e9b\u9078\u64c7\uff0c\u9019\u4e9b\u4e8b\u60c5\u901a\u5e38\u6c92\u6709\u4e00\u5b9a\uff0c\u4f60\u5fc5\u9808\u81ea\u5df1\u7576\u4e0b\u5224\u65b7\uff1a \u6211\u662f\u5426\u8981\u5148\u6b62\u8840\uff0c\u5118\u7ba1\u53ef\u80fd\u518d\u4e5f\u7121\u6cd5\u91cd\u73fe\u554f\u984c? \u662f\u5426\u8981\u76f4\u63a5\u627e\u554f\u984c\u6839\u6e90?Log\u8981\u4e0d\u8981\u5148\u5099\u4efd\u907f\u514d\u907a\u5931? \u5982\u679c\u6211\u5148\u505a\u4e86\u77ed\u89e3\uff0c\u90a3\u6703\u5e36\u4f86\u751a\u9ebc\u5f8c\u907a\u75c7? \u5341\u4e8c\u9ede\u534a\u4e86\uff0c\u6211\u53ef\u4e0d\u53ef\u4ee5\u5148\u5403\u5348\u9910? \u7576AM\u554f\u4f60\"\u90a3\u6211\u8981\u600e\u9ebc\u56de\u5ba2\u6236?\"\u7684\u6642\u5019\uff0c\u8acb \u4fdd\u6301\u7406\u667a \uff0c\u6eab\u67d4\u89aa\u5207\u53cb\u5584\u5730\u7d66\u4e88\u89e3\u7b54\u3002 \u9a57\u5c4d \u554f\u984c\u8655\u7406\u5b8c\u8a18\u5f97\u958b\u6aa2\u8a0e\u6703(Postmortem)\uff0c\u8996\u60c5\u6cc1\u53ef\u4ee5\u6b63\u5f0f\u6216\u975e\u6b63\u5f0f\uff0c\u91cd\u9ede\u662f\u628a\u6545\u4e8b\u5206\u4eab\u7d66\u4f60\u7684\u5718\u968a\u3002 \u4e00\u822c\u4e8b\u5f8c\u6aa2\u8a0e\u5927\u6982\u6703\u5305\u542b\u4ee5\u4e0b\uff1a \u4e8b\u6545\u7684\u904e\u7a0b \u4e8b\u6545\u7684\u5f71\u97ff \u7576\u4e0b\u63a1\u53d6\u600e\u6a23\u7684\u63aa\u65bd\u6e1b\u7de9\u6216\u89e3\u6c7a \u767c\u751f\u4e8b\u6545\u7684\u539f\u56e0 \u672a\u4f86\u53ef\u4ee5\u63a1\u53d6\u7684\u63aa\u65bd\u4ee5\u9810\u9632\u518d\u6b21\u767c\u751f \u4e0d\u8981\u6307\u8cac\u4eba \u3002 \u8cc7\u6e90 SRE\u8b80\u66f8\u6703 (\u611f\u8b1dsys\u90e8\u9580)","title":"\u8655\u7406\u554f\u984c\u7684\u6b63\u78ba\u59ff\u52e2"},{"location":"Finished/%E8%99%95%E7%90%86%E5%95%8F%E9%A1%8C%E7%9A%84%E6%AD%A3%E7%A2%BA%E5%A7%BF%E5%8B%A2/#_1","text":"\u7cfb\u7d71\u958b\u767c\u5b8c\u4e0d\u662f\u5c31\u6c92\u4e8b\u4e86\uff0c\u7dad\u6301\u7cfb\u7d71\u6b63\u5e38\u904b\u4f5c\u4e5f\u662f\u6211\u5011\u65e5\u5e38\u5de5\u4f5c\u9805\u76ee\uff0c\u4f8b\u5982\u9019\u4e9b\u72c0\u6cc1\uff1a PM\u56de\u5831\u70ba\u4ec0\u9ebcXXX\u529f\u80fd\u5931\u6548\u3002 \u5230\u5ba2\u6236\u90a3\u88cf\u505a\u4e00\u822c\u7684\u7dad\u904b(\u4f8b\u5982\u5347\u7d1a\u7cfb\u7d71)\u9047\u5230\u7a81\u767c\u88dd\u6cc1\u3002 \u7cfb\u7d71\u5927\u7576\u6a5f\u7121\u6cd5\u6b63\u5e38\u904b\u4f5c\u3002 \u5e0c\u671b\u4ee5\u4e0b\u7684\u5efa\u8b70\u80fd\u5728\u4f60\u8655\u7406\u9019\u4e9b\u554f\u984c\u6642\u7d66\u4f60\u4e00\u9ede\u5e6b\u52a9\u3002","title":"\u8655\u7406\u554f\u984c\u7684\u6b63\u78ba\u59ff\u52e2"},{"location":"Finished/%E8%99%95%E7%90%86%E5%95%8F%E9%A1%8C%E7%9A%84%E6%AD%A3%E7%A2%BA%E5%A7%BF%E5%8B%A2/#_2","text":"\u5207\u83ab\u9a5a\u614c \uff0c\u9019\u53ea\u662f\u5de5\u7a0b\u5e2b\u65e5\u5e38\u3002 \u554f\u984c\u53ef\u80fd\u5f88\u56b4\u91cd\u5f88\u7dca\u6025\uff0c\u4f46\u662f\u4f60\u4e0d\u80fd\u6025\u3002 \u5728\u89e3\u6c7a\u554f\u984c\u4e4b\u524d\u4f60\u9084\u6709\u5f88\u591a\u4e8b\u60c5\u8981\u505a \uff0c\u89e3\u6c7a\u554f\u984c\u7d55\u5c0d\u4e0d\u662f\u7b2c\u4e00\u6b65\uff0c\u5343\u842c\u4e0d\u53ef\u975e\u5e38\u614c\u4e82\u5c31\u958b\u59cb\u601d\u8003\u5982\u4f55\u89e3\u6c7a\u554f\u984c\u3002 \u554f\u984c\u5f88\u53ef\u80fd\u4e0d\u662f\u4f60\u9020\u6210\u7684(\u5c24\u5176\u4f60\u662f\u500b\u65b0\u4eba\u7684\u6642\u5019)\uff0c\u6216\u4f60\u7167\u4e86SOP\u64cd\u4f5c\u7cfb\u7d71\u9084\u662f\u51fa\u4e86\u554f\u984c\uff0c\u90a3\u4e5f\u6216\u8a31\u662f\u7cfb\u7d71\u8a2d\u8a08\u4e0d\u826f\u3002\u4f46\u662f\u8ab0\u7684\u932f\u4e0d\u91cd\u8981\uff0c\u91cd\u9ede\u7684\u662f\u554f\u984c\u4ea4\u5230\u4e86\u4f60\u624b\u4e0a\uff0c\u73fe\u5728\u4ed6\u662f\u4f60\u7684\u8cac\u4efb\u3002","title":"\u6b63\u78ba\u7684\u614b\u5ea6"},{"location":"Finished/%E8%99%95%E7%90%86%E5%95%8F%E9%A1%8C%E7%9A%84%E6%AD%A3%E7%A2%BA%E5%A7%BF%E5%8B%A2/#_3","text":"\u8a18\u4f4f\u4f60\u4e0d\u662f\u4e00\u500b\u4eba\uff0c\u4f60\u53ef\u4ee5\u5411\u4efb\u4eba\u4f55\u5c0b\u6c42\u5354\u52a9\u3002 \u5ba2\u6236\u901a\u5e38\u6bd4\u4f60\u9084\u6025\uff0c\u5982\u679c\u9700\u8981\u5ba2\u6236\u5354\u52a9\u4f60\u505a\u751a\u9ebc\uff0c\u76f4\u63a5\u5411\u5ba2\u6236\u6216\u662fAM\u63d0\u51fa\u8acb\u6c42\uff0c\u4ed6\u5011\u901a\u5e38\u6703\u5f88\u6a02\u610f\u3002 \u5e36\u8457\u554f\u984c\u5c0b\u6c42\u5354\u52a9\u7684\u6642\u5019\u8981\u5c0f\u5fc3\u4f60\u7684\u5047\u8a2d\u53ef\u80fd\u662f\u932f\u7684\uff0c\u628a\u5ba2\u89c0\u7684\u75c7\u72c0\u544a\u8a34\u4f60\u5c0b\u6c42\u5354\u52a9\u7684\u4eba\u662f\u8f03\u597d\u7684\u65b9\u5411\u3002 \u5ba2\u6236\u662f\u6700\u53ef\u80fd\u641e\u4e0d\u6e05\u695a\u72c0\u6cc1\u7684\uff0c\u4e0d\u904e\u5f88\u591a\u6642\u5019\u6211\u5011\u81ea\u5df1\u7684PM/AM\u4e5f\u641e\u4e0d\u6e05\u695a\uff0c\u751a\u81f3RD\u5230\u6574\u9593\u516c\u53f8\u90fd\u641e\u4e0d\u6e05\u695a\u72c0\u6cc1\uff0c\u9047\u5230\u9019\u500b\u6642\u5019\u4e0d\u7528\u61f7\u7591\uff0c You're on your own (\u4f46\u4f60\u9084\u662f\u80fd\u5c0b\u6c42\u65b9\u5411\u4e0a\u7684\u5354\u52a9)\u3002","title":"\u5c0b\u6c42\u5354\u52a9"},{"location":"Finished/%E8%99%95%E7%90%86%E5%95%8F%E9%A1%8C%E7%9A%84%E6%AD%A3%E7%A2%BA%E5%A7%BF%E5%8B%A2/#_4","text":"\u4e86\u89e3\u554f\u984c\u7684\u7dca\u6025\u7a0b\u5ea6 \u662f\u7b2c\u4e00\u4ef6\u4e8b\u60c5\u3002 \u554f\u984c\u6709\u591a\u7dca\u6025\u4e0d\u662f\u5ba2\u6236\u8aaa\u7684\u7b97\u4e5f\u4e0d\u662fAM\u8aaa\u7684\u7b97\uff0c\u4f60\u8981\u6709\u81ea\u5df1\u7684\u80fd\u529b\u5224\u65b7\u3002 \u601d\u8003\u4ee5\u4e0b\u5e7e\u500b\u554f\u984c\u53ef\u4ee5\u5e6b\u52a9\u4f60\u5224\u65b7\u7dca\u6025\u7a0b\u5ea6\uff1a \u9019\u500b\u554f\u984c\u5b58\u5728\u591a\u4e45\u4e86? \u767c\u751f\u7684\u983b\u7387? \u5be6\u969b\u9020\u6210\u7684\u5f71\u97ff? \u662f\u5426\u6709\u8fa6\u6cd5\u5feb\u901f\u89e3\u6c7a? \u5224\u65b7\u7dca\u6025\u7a0b\u5ea6\u5f8c\u628a\u4f60\u8981\u505a\u7684\u4e8b\u3001\u52d5\u6a5f\u548c\u7d50\u679c\u8207AM\u8a0e\u8ad6\uff0c\u4ed6\u5982\u679c\u4e0d\u6eff\u610f\u4e0d\u904e\u4ed6\u53ef\u4ee5\u8ca0\u8cac\uff0c\u90a3\u807d\u4ed6\u7684\u3002","title":"\u512a\u5148\u6b0a"},{"location":"Finished/%E8%99%95%E7%90%86%E5%95%8F%E9%A1%8C%E7%9A%84%E6%AD%A3%E7%A2%BA%E5%A7%BF%E5%8B%A2/#_5","text":"\u4e0d\u8981\u76f8\u4fe1\u4efb\u4f55\u4eba\u8b1b\u7684\u8a71 \uff0c\u4efb\u4f55\u4eba\u544a\u8a34\u4f60\u7684\u8cc7\u8a0a\u90fd\u53ef\u4ee5\u7576\u53c3\u8003\uff0c\u4e5f\u50c5\u6b62\u65bc\u6b64\u800c\u5df2\uff0c\u9664\u4e86\u6b63\u5728\u57f7\u884c\u7684\u7a0b\u5f0f\u78bc\u5916\uff0c\u6c92\u6709\u4e00\u6a23\u6771\u897f\u662f\u53ef\u4ee5\u76f8\u4fe1\u7684\u3002 \u622a\u5716\u6216\u5f71\u7247\u4e5f\u4e0d\u80fd\u767e\u5206\u4e4b\u767e\u76f8\u4fe1\uff0c \u53ea\u6709\u81ea\u5df1\u91cd\u73fe\u4e00\u6b21 \u89aa\u773c\u898b\u5230\u7684\u75c7\u72c0\u624d\u53ef\u767e\u5206\u4e4b\u767e\u76f8\u4fe1\u3002 \u9664\u975e\u4f60\u7121\u6cd5\u91cd\u73fe\uff0c\u4e0d\u7136 \u5343\u842c\u4e0d\u53ef\u4ee5\u5077\u61f6\u89aa\u81ea\u91cd\u73fe\u9019\u500b\u6b65\u9a5f \uff0c\u4e0d\u7136\u4f60\u7d55\u5c0d\u6703\u5f8c\u6094\u4e0d\u5df2\u3002 \u8996\u554f\u984c\u7684\u7dca\u6025\u8ddf\u8907\u96dc\u7a0b\u5ea6\uff0c\u4f60\u9700\u8981\u601d\u8003\u4e26\u505a\u4e00\u4e9b\u9078\u64c7\uff0c\u9019\u4e9b\u4e8b\u60c5\u901a\u5e38\u6c92\u6709\u4e00\u5b9a\uff0c\u4f60\u5fc5\u9808\u81ea\u5df1\u7576\u4e0b\u5224\u65b7\uff1a \u6211\u662f\u5426\u8981\u5148\u6b62\u8840\uff0c\u5118\u7ba1\u53ef\u80fd\u518d\u4e5f\u7121\u6cd5\u91cd\u73fe\u554f\u984c? \u662f\u5426\u8981\u76f4\u63a5\u627e\u554f\u984c\u6839\u6e90?Log\u8981\u4e0d\u8981\u5148\u5099\u4efd\u907f\u514d\u907a\u5931? \u5982\u679c\u6211\u5148\u505a\u4e86\u77ed\u89e3\uff0c\u90a3\u6703\u5e36\u4f86\u751a\u9ebc\u5f8c\u907a\u75c7? \u5341\u4e8c\u9ede\u534a\u4e86\uff0c\u6211\u53ef\u4e0d\u53ef\u4ee5\u5148\u5403\u5348\u9910? \u7576AM\u554f\u4f60\"\u90a3\u6211\u8981\u600e\u9ebc\u56de\u5ba2\u6236?\"\u7684\u6642\u5019\uff0c\u8acb \u4fdd\u6301\u7406\u667a \uff0c\u6eab\u67d4\u89aa\u5207\u53cb\u5584\u5730\u7d66\u4e88\u89e3\u7b54\u3002","title":"\u8655\u7406\u554f\u984c"},{"location":"Finished/%E8%99%95%E7%90%86%E5%95%8F%E9%A1%8C%E7%9A%84%E6%AD%A3%E7%A2%BA%E5%A7%BF%E5%8B%A2/#_6","text":"\u554f\u984c\u8655\u7406\u5b8c\u8a18\u5f97\u958b\u6aa2\u8a0e\u6703(Postmortem)\uff0c\u8996\u60c5\u6cc1\u53ef\u4ee5\u6b63\u5f0f\u6216\u975e\u6b63\u5f0f\uff0c\u91cd\u9ede\u662f\u628a\u6545\u4e8b\u5206\u4eab\u7d66\u4f60\u7684\u5718\u968a\u3002 \u4e00\u822c\u4e8b\u5f8c\u6aa2\u8a0e\u5927\u6982\u6703\u5305\u542b\u4ee5\u4e0b\uff1a \u4e8b\u6545\u7684\u904e\u7a0b \u4e8b\u6545\u7684\u5f71\u97ff \u7576\u4e0b\u63a1\u53d6\u600e\u6a23\u7684\u63aa\u65bd\u6e1b\u7de9\u6216\u89e3\u6c7a \u767c\u751f\u4e8b\u6545\u7684\u539f\u56e0 \u672a\u4f86\u53ef\u4ee5\u63a1\u53d6\u7684\u63aa\u65bd\u4ee5\u9810\u9632\u518d\u6b21\u767c\u751f \u4e0d\u8981\u6307\u8cac\u4eba \u3002","title":"\u9a57\u5c4d"},{"location":"Finished/%E8%99%95%E7%90%86%E5%95%8F%E9%A1%8C%E7%9A%84%E6%AD%A3%E7%A2%BA%E5%A7%BF%E5%8B%A2/#_7","text":"SRE\u8b80\u66f8\u6703 (\u611f\u8b1dsys\u90e8\u9580)","title":"\u8cc7\u6e90"},{"location":"Game%20Development/Articles/","text":"Articles \u3010\u5fc3\u5f97\u3011Dynamic Bone (&\u4e73\u6416) \u7814\u7a76\u7b46\u8a18 (\u5716\u591a)","title":"Articles"},{"location":"Game%20Development/Articles/#articles","text":"\u3010\u5fc3\u5f97\u3011Dynamic Bone (&\u4e73\u6416) \u7814\u7a76\u7b46\u8a18 (\u5716\u591a)","title":"Articles"},{"location":"Game%20Development/Unity/","text":"Unity Version Control ignore\u53c3\u8003 # =========================== # Default Collab Ignore Rules # =========================== # OS Generated # ============ .DS_Store ._* .Spotlight-V100 .Trashes Icon? ehthumbs.db [Tt]humbs.db [Dd]esktop.ini # Visual Studio / MonoDevelop generated # ===================================== [Ee]xported[Oo]bj/ *.userprefs *.csproj *.pidb *.suo *.sln *.user *.unityproj *.booproj # Unity generated # =============== [Oo]bj/ [Bb]uild sysinfo.txt *.stackdump # Others? # ======= /Temp/ /Library/ Test Runner Assembly Definition(asmdef) : Unity\u5c08\u9580\u7684reference\u63a7\u7ba1\u6a94\u6848\uff0c\u5728\u4efb\u610f\u5730\u65b9create\u9019\u500bfile\u770b\u8d77\u4f86\u53ef\u4ee5\u76f4\u63a5\u5403\u5230\u6240\u6709main project\u7684script?","title":"Unity"},{"location":"Game%20Development/Unity/#unity","text":"","title":"Unity"},{"location":"Game%20Development/Unity/#version-control","text":"ignore\u53c3\u8003 # =========================== # Default Collab Ignore Rules # =========================== # OS Generated # ============ .DS_Store ._* .Spotlight-V100 .Trashes Icon? ehthumbs.db [Tt]humbs.db [Dd]esktop.ini # Visual Studio / MonoDevelop generated # ===================================== [Ee]xported[Oo]bj/ *.userprefs *.csproj *.pidb *.suo *.sln *.user *.unityproj *.booproj # Unity generated # =============== [Oo]bj/ [Bb]uild sysinfo.txt *.stackdump # Others? # ======= /Temp/ /Library/","title":"Version Control"},{"location":"Game%20Development/Unity/#test-runner","text":"Assembly Definition(asmdef) : Unity\u5c08\u9580\u7684reference\u63a7\u7ba1\u6a94\u6848\uff0c\u5728\u4efb\u610f\u5730\u65b9create\u9019\u500bfile\u770b\u8d77\u4f86\u53ef\u4ee5\u76f4\u63a5\u5403\u5230\u6240\u6709main project\u7684script?","title":"Test Runner"},{"location":"Information%20Security/readme/","text":"Information Security Encode, Encrypt and Hash \u4e00\u6b21\u641e\u61c2\u5bc6\u78bc\u5b78\u4e2d\u7684\u4e09\u5144\u5f1f \u2014 Encode\u3001Encrypt \u8ddf Hash \u807d\u8aaa\u4e0d\u80fd\u7528\u660e\u6587\u5b58\u5bc6\u78bc\uff0c\u90a3\u5230\u5e95\u8a72\u600e\u9ebc\u5b58\uff1f SSL What is SSH? Transport Layer Security XSS and CSRF \u5f9e\u9632\u79a6\u8a8d\u8b58CSRF Testing Web Application Penetration Testing","title":"Information Security"},{"location":"Information%20Security/readme/#information-security","text":"","title":"Information Security"},{"location":"Information%20Security/readme/#encode-encrypt-and-hash","text":"\u4e00\u6b21\u641e\u61c2\u5bc6\u78bc\u5b78\u4e2d\u7684\u4e09\u5144\u5f1f \u2014 Encode\u3001Encrypt \u8ddf Hash \u807d\u8aaa\u4e0d\u80fd\u7528\u660e\u6587\u5b58\u5bc6\u78bc\uff0c\u90a3\u5230\u5e95\u8a72\u600e\u9ebc\u5b58\uff1f","title":"Encode, Encrypt and Hash"},{"location":"Information%20Security/readme/#ssl","text":"What is SSH? Transport Layer Security","title":"SSL"},{"location":"Information%20Security/readme/#xss-and-csrf","text":"\u5f9e\u9632\u79a6\u8a8d\u8b58CSRF","title":"XSS and CSRF"},{"location":"Information%20Security/readme/#testing","text":"Web Application Penetration Testing","title":"Testing"},{"location":"Languages/JavaScript/Asynchronous%20Programming/","text":"Asynchronous Programming Callback Hell Error Handling Promise new Promise( /* executor */ function(resolve, reject) { ... } ); \u5728 Promise \u5be6\u4f5c\u4e2d\uff0c executor \u51fd\u5f0f\u5728\u50b3\u5165\u53c3\u6578 resolve \u8207 reject \u5f8c\u6703\u7acb\u523b\u57f7\u884c\uff08 executor \u51fd\u5f0f\u6703\u5728 Promise \u5efa\u69cb\u5f0f\u56de\u50b3 Promise \u7269\u4ef6\u524d\u88ab\u57f7\u884c\uff09\u3002 A Promise is in one of these states: pending : initial state, neither fulfilled nor rejected. fulfilled : meaning that the operation completed successfully. rejected : meaning that the operation failed. A pending promise can either be fulfilled with a value, or rejected with a reason (error). When either of these options happens, the associated handlers queued up by a promise's then method are called. (If the promise has already been fulfilled or rejected when a corresponding handler is attached, the handler will be called, so there is no race condition between an asynchronous operation completing and its handlers being attached.) The arguments to then are optional, and catch(failureCallback) is short for then(null, failureCallback) . Async Function async function name([param[, param[, ...param]]]) { statements } The async function declaration defines an asynchronous function \u2014 a function that returns an AsyncFunction object. Asynchronous functions operate in a separate order than the rest of the code via the event loop , returning an implicit Promise as its result. But the syntax and structure of code using async functions looks like standard synchronous functions. An async function can contain an await expression that pauses the execution of the async function to wait for the passed Promise 's resolution, then resumes the async function's execution and evaluates as the resolved value. The await keyword is only valid inside async functions. If you use it outside of an async function's body, you will get a SyntaxError . Most async functions can also be written as regular functions using Promises. However, async functions are less tricky when it comes to error handling. Error-First Callbacks Middleware Pattern ASP.NET Core Middleware","title":"Asynchronous Programming"},{"location":"Languages/JavaScript/Asynchronous%20Programming/#asynchronous-programming","text":"","title":"Asynchronous Programming"},{"location":"Languages/JavaScript/Asynchronous%20Programming/#callback-hell","text":"","title":"Callback Hell"},{"location":"Languages/JavaScript/Asynchronous%20Programming/#error-handling","text":"","title":"Error Handling"},{"location":"Languages/JavaScript/Asynchronous%20Programming/#promise","text":"new Promise( /* executor */ function(resolve, reject) { ... } ); \u5728 Promise \u5be6\u4f5c\u4e2d\uff0c executor \u51fd\u5f0f\u5728\u50b3\u5165\u53c3\u6578 resolve \u8207 reject \u5f8c\u6703\u7acb\u523b\u57f7\u884c\uff08 executor \u51fd\u5f0f\u6703\u5728 Promise \u5efa\u69cb\u5f0f\u56de\u50b3 Promise \u7269\u4ef6\u524d\u88ab\u57f7\u884c\uff09\u3002 A Promise is in one of these states: pending : initial state, neither fulfilled nor rejected. fulfilled : meaning that the operation completed successfully. rejected : meaning that the operation failed. A pending promise can either be fulfilled with a value, or rejected with a reason (error). When either of these options happens, the associated handlers queued up by a promise's then method are called. (If the promise has already been fulfilled or rejected when a corresponding handler is attached, the handler will be called, so there is no race condition between an asynchronous operation completing and its handlers being attached.) The arguments to then are optional, and catch(failureCallback) is short for then(null, failureCallback) .","title":"Promise"},{"location":"Languages/JavaScript/Asynchronous%20Programming/#async-function","text":"async function name([param[, param[, ...param]]]) { statements } The async function declaration defines an asynchronous function \u2014 a function that returns an AsyncFunction object. Asynchronous functions operate in a separate order than the rest of the code via the event loop , returning an implicit Promise as its result. But the syntax and structure of code using async functions looks like standard synchronous functions. An async function can contain an await expression that pauses the execution of the async function to wait for the passed Promise 's resolution, then resumes the async function's execution and evaluates as the resolved value. The await keyword is only valid inside async functions. If you use it outside of an async function's body, you will get a SyntaxError . Most async functions can also be written as regular functions using Promises. However, async functions are less tricky when it comes to error handling.","title":"Async Function"},{"location":"Languages/JavaScript/Asynchronous%20Programming/#error-first-callbacks","text":"","title":"Error-First Callbacks"},{"location":"Languages/JavaScript/Asynchronous%20Programming/#middleware-pattern","text":"ASP.NET Core Middleware","title":"Middleware Pattern"},{"location":"Languages/JavaScript/JavaScript%20%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F/","text":"JavaScript \u8a2d\u8a08\u6a21\u5f0f \u7b2c\u4e00\u7ae0\uff1a\u4ecb\u7d39 \u672c\u66f8\u8a0e\u8ad6\u7684\u56db\u7a2e\u6a21\u5f0f\uff1a \u8a2d\u8a08\u6a21\u5f0f(Design patterns) \u7de8\u78bc\u6a21\u5f0f(Coding patterns) \u53cd\u6a21\u5f0f(Antipatterns) \u56db\u4eba\u5e6b\u7684 \u8a2d\u8a08\u6a21\u5f0f \u4e3b\u8981\u662f\u7528\u5728\u5f37\u578b\u5225\u8a9e\u8a00\uff0c\u5229\u7528\u4e86\u4ee5class\u70ba\u57fa\u790e\u7684\u7e7c\u627f\u65b9\u5f0f\u4f86\u89e3\u6c7a\u67d0\u4e9b\u554f\u984c\uff0c\u4f7f\u7528\u9b06\u6563\u578b\u5225\u7684\u52d5\u614b\u8a9e\u8a00JS\u4f86\u5be6\u8e10\u9019\u4e9b\u6a21\u5f0f\u6c92\u751a\u9ebc\u9053\u7406\uff0c\u53ef\u80fd\u6709\u66f4\u7c21\u55ae\u7684\u9078\u64c7\u3002 \u7de8\u78bc\u6a21\u5f0f \u662f\u6307JS\u7279\u6709\u7684\u6a21\u5f0f\uff0c\u7528\u8a9e\u8a00\u7368\u6709\u7684\u529f\u80fd\u5be6\u8e10\uff0c\u662f\u672c\u66f8\u91cd\u9ede\u3002 \u53cd\u6a21\u5f0f \u4e0d\u662fbug\uff0c\u4ed6\u6307\u7684\u662f\u7cdf\u7cd5\u7684\u5be6\u8e10\u65b9\u5f0f\u3002 \u7b2c\u4e8c\u7ae0\uff1a \u7cbe\u8981 \u5728 var \u5ba3\u544a\u4e2d\u9023\u7e8c\u8ce6\u503c\uff0ca\u662f\u5340\u57df\u8b8a\u6578\uff0cb\u537b\u662f\u5168\u57df\u8b8a\u6578\u3002 //antipattern funciton foo() { var a = b = 0; // ... } cache length\u6a21\u5f0f\uff0c\u7576myarray\u662fHTMLCollection\u6642\u6548\u679c\u66f4\u597d\uff0c\u56e0\u70ba\u9019\u985e\u7269\u4ef6\u6bcf\u6b21\u5b58\u53d6\u96c6\u5408\u9577\u5ea6\u6642\u90fd\u662f\u76f4\u63a5\u67e5\u8a62DOM\u3002 for (var i = 0, max = myarray.length; i < max; i++) { // do something with myarray[i] } //\u66f4\u597d\u7684var\u55ae\u4e00\u6a21\u5f0f(\u53ef\u662fcode\u66f4\u919c) function looper() { var i = 0, max, myarray = []; for (i = 0, max = myarray.length; i < max; i++) { // do something with myarray[i] } } for-in pattern for (const key in object) { if (object.hasOwnProperty(key)) { const element = object[key]; } }","title":"JavaScript \u8a2d\u8a08\u6a21\u5f0f"},{"location":"Languages/JavaScript/JavaScript%20%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F/#javascript","text":"","title":"JavaScript \u8a2d\u8a08\u6a21\u5f0f"},{"location":"Languages/JavaScript/JavaScript%20%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F/#_1","text":"\u672c\u66f8\u8a0e\u8ad6\u7684\u56db\u7a2e\u6a21\u5f0f\uff1a \u8a2d\u8a08\u6a21\u5f0f(Design patterns) \u7de8\u78bc\u6a21\u5f0f(Coding patterns) \u53cd\u6a21\u5f0f(Antipatterns) \u56db\u4eba\u5e6b\u7684 \u8a2d\u8a08\u6a21\u5f0f \u4e3b\u8981\u662f\u7528\u5728\u5f37\u578b\u5225\u8a9e\u8a00\uff0c\u5229\u7528\u4e86\u4ee5class\u70ba\u57fa\u790e\u7684\u7e7c\u627f\u65b9\u5f0f\u4f86\u89e3\u6c7a\u67d0\u4e9b\u554f\u984c\uff0c\u4f7f\u7528\u9b06\u6563\u578b\u5225\u7684\u52d5\u614b\u8a9e\u8a00JS\u4f86\u5be6\u8e10\u9019\u4e9b\u6a21\u5f0f\u6c92\u751a\u9ebc\u9053\u7406\uff0c\u53ef\u80fd\u6709\u66f4\u7c21\u55ae\u7684\u9078\u64c7\u3002 \u7de8\u78bc\u6a21\u5f0f \u662f\u6307JS\u7279\u6709\u7684\u6a21\u5f0f\uff0c\u7528\u8a9e\u8a00\u7368\u6709\u7684\u529f\u80fd\u5be6\u8e10\uff0c\u662f\u672c\u66f8\u91cd\u9ede\u3002 \u53cd\u6a21\u5f0f \u4e0d\u662fbug\uff0c\u4ed6\u6307\u7684\u662f\u7cdf\u7cd5\u7684\u5be6\u8e10\u65b9\u5f0f\u3002","title":"\u7b2c\u4e00\u7ae0\uff1a\u4ecb\u7d39"},{"location":"Languages/JavaScript/JavaScript%20%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F/#_2","text":"\u5728 var \u5ba3\u544a\u4e2d\u9023\u7e8c\u8ce6\u503c\uff0ca\u662f\u5340\u57df\u8b8a\u6578\uff0cb\u537b\u662f\u5168\u57df\u8b8a\u6578\u3002 //antipattern funciton foo() { var a = b = 0; // ... } cache length\u6a21\u5f0f\uff0c\u7576myarray\u662fHTMLCollection\u6642\u6548\u679c\u66f4\u597d\uff0c\u56e0\u70ba\u9019\u985e\u7269\u4ef6\u6bcf\u6b21\u5b58\u53d6\u96c6\u5408\u9577\u5ea6\u6642\u90fd\u662f\u76f4\u63a5\u67e5\u8a62DOM\u3002 for (var i = 0, max = myarray.length; i < max; i++) { // do something with myarray[i] } //\u66f4\u597d\u7684var\u55ae\u4e00\u6a21\u5f0f(\u53ef\u662fcode\u66f4\u919c) function looper() { var i = 0, max, myarray = []; for (i = 0, max = myarray.length; i < max; i++) { // do something with myarray[i] } } for-in pattern for (const key in object) { if (object.hasOwnProperty(key)) { const element = object[key]; } }","title":"\u7b2c\u4e8c\u7ae0\uff1a \u7cbe\u8981"},{"location":"Languages/python/Alembic/","text":"alembic Alembic \u4f7f\u7528 Alembic \u4f86\u9032\u884c\u8cc7\u6599\u5eab\u7248\u672c\u7ba1\u7406 Running our First Migration The process which occurred here included that Alembic first checked if the database had a table called alembic_version , and if not, created it. Auto Generating Migrations alembic revision --autogenerate -m \"Added account table\" Relative Migration Identifiers alembic upgrade +2 alembic downgrade -1 alembic upgrade head","title":"alembic"},{"location":"Languages/python/Alembic/#alembic","text":"Alembic \u4f7f\u7528 Alembic \u4f86\u9032\u884c\u8cc7\u6599\u5eab\u7248\u672c\u7ba1\u7406","title":"alembic"},{"location":"Languages/python/Alembic/#running-our-first-migration","text":"The process which occurred here included that Alembic first checked if the database had a table called alembic_version , and if not, created it.","title":"Running our First Migration"},{"location":"Languages/python/Alembic/#auto-generating-migrations","text":"alembic revision --autogenerate -m \"Added account table\"","title":"Auto Generating Migrations"},{"location":"Languages/python/Alembic/#relative-migration-identifiers","text":"alembic upgrade +2 alembic downgrade -1 alembic upgrade head","title":"Relative Migration Identifiers"},{"location":"Languages/python/Pytest/","text":"Pytest keep_data @pytest.mark","title":"Pytest"},{"location":"Languages/python/Pytest/#pytest","text":"","title":"Pytest"},{"location":"Languages/python/Pytest/#keep_data","text":"","title":"keep_data"},{"location":"Languages/python/Pytest/#pytestmark","text":"","title":"@pytest.mark"},{"location":"Languages/python/SQLAlchemy/","text":"SQLAlchemy @hybrid_property relationship()","title":"SQLAlchemy"},{"location":"Languages/python/SQLAlchemy/#sqlalchemy","text":"","title":"SQLAlchemy"},{"location":"Languages/python/SQLAlchemy/#hybrid_property","text":"","title":"@hybrid_property"},{"location":"Languages/python/SQLAlchemy/#relationship","text":"","title":"relationship()"},{"location":"Languages/python/Virtualenv/","text":"Virtualenv Virtualenv Basic command virtualenv venv This will create a python virtual environment of the same version as virtualenv is installed into under path venv . Activators source bin/activate deactivate","title":"Virtualenv"},{"location":"Languages/python/Virtualenv/#virtualenv","text":"Virtualenv","title":"Virtualenv"},{"location":"Languages/python/Virtualenv/#basic-command","text":"virtualenv venv This will create a python virtual environment of the same version as virtualenv is installed into under path venv .","title":"Basic command"},{"location":"Languages/python/Virtualenv/#activators","text":"source bin/activate deactivate","title":"Activators"},{"location":"Languages/python/readme/","text":"Python PIP pip\u5c31\u662fpython\u7684\u5957\u4ef6\u7ba1\u7406\u5de5\u5177 pip freeze > requirements.txt \u53ef\u4ee5\u628a\u76ee\u524d\u74b0\u5883\u7684\u6240\u6709\u5957\u4ef6\u90fd\u5370\u51fa\u5230requirements.txt pip install -r requirements.txt --upgrade ubuntu\u4e0a\u5b89\u88dd\u4e86python3\u4e4b\u5f8c\u6703\u8207python2\u5171\u5b58\uff0c\u8981\u78ba\u5b9a\u73fe\u5728\u4f7f\u7528\u7684\u662fpython3\u9084\u662fpython2\uff0c\u5c24\u5176\u5728vscode console\u88e1\u9762\uff0cpython3\u61c9\u8a72\u8981\u642d\u914d\u7684\u662fpip3\u3002 Configuration Manually Configuration [global] extra-index-url = http://devpi.local.bridgewell.com/bridgewell/prod/+simple/ trusted-host = devpi.local.bridgewell.com Here are some common environment OS path Unix $HOME/.config/pip/pip.conf macOS $HOME/Library/Application Support/pip/pip.conf or $HOME/.config/pip/pip.conf Windows %APPDATA%\\pip\\pip.ini For other environments, check pip office document One-time Command $ pip install \\ --extra-index-url http://devpi.local.bridgewell.com/bridgewell/prod/+simple/ \\ --trusted-host devpi.local.bridgewell.com \\ shutong>=1.10.0 main() \u53ef\u4ee5\u4e00\u76ee\u4e86\u7136\u7684\u9032\u5165\u9ede if __name__ == '__main__': main() python\u6c92\u6709\u9032\u5165\u9ede\uff0c\u4efb\u4f55.py\u90fd\u53ef\u7368\u7acb\u57f7\u884c\uff0c\u6240\u4ee5\u9019\u500b\u5beb\u6cd5\u53ef\u4ee5\u589e\u52a0\u53ef\u8b80\u6027\u4e00\u773c\u5c31\u770b\u51fa\u9032\u5165\u9ede\uff0c\u53e6\u4e00\u500b\u512a\u9ede\u662f\u7576\u9019\u500b.py\u88ab\u5176\u4ed6import\u7684\u6642\u5019\u5c31\u53ef\u4ee5\u9632\u6b62\u57f7\u884cmain()\u3002 \u597d\u7528\u5957\u4ef6 SqlAlchemy: ORM in python logging: for log pywinrm: remote windows devpi: nuget in python Llint \u5abd\u7684\u6f54\u7656\u75c7 Linting Python in VS Code Flake8 Rules flake8-docstrings\uff1apublic interfaces \u9700\u52a0\u4e0a docstrings\u3002 flake8-import-order\uff1aimport statement \u9700\u8981\u7167 stdlib\u30013rd party\u3001local packages \u7684\u9806\u5e8f\u5206\u7d44\u3002\u7d44\u9593\u4ee5\u7a7a\u884c\u9694\u958b\u3002 flake8-quotes\uff1a\u7d71\u4e00\u55ae\u884c\u4f7f\u7528\u55ae\u5f15\u865f\u3001\u591a\u884c\u4f7f\u7528\u96d9\u5f15\u865f\u3002 pep8-naming\uff1a\u547d\u540d\u7b26\u5408 PEP8 \u898f\u7bc4\u3002 \u516c\u53f8.flake8 [flake8] max-line-length = 99 import-order-style = pep8 ignore = D100,D101,D102,D103,D104,D400,D401,E402,N806 exclude = .git, __pycache__, protobuf cryptography\u932f\u8aa4 Failed building wheel for cryptography \u8acb\u5b89\u88dd\uff0c\u6211\u4e0d\u77e5\u9053\u9019\u4e09\u5c0f https://cryptography.io/en/latest/installation/#building-cryptography-on-linux Linq in python http://mark-dot-net.blogspot.com/2014/03/python-equivalents-of-linq-methods.html Decorator def use_logging(level): def decorator(func): def wrapper(*args, **kwargs): if level == \"warn\": logging.warn(\"%s is running\" % func.__name__) elif level == \"info\": logging.info(\"%s is running\" % func.__name__) return func(*args) return wrapper return decorator args *kwargs \u4e0d\u5b9a\u9577\u5ea6\u53c3\u6578\u8207\u95dc\u9375\u5b57\u53c3\u6578 r prefix r``'' or r``\"\" \u515c\u5b57\u4e32 https://pyformat.info/ Lists, Tuples, Dictionaries, Sets List Tuple Dictionary Set [] or list() () {} set() Tuple unpacking row, col = cell List Slice Notation a[start:stop] # items start through stop-1 a[start:] # items start through the rest of the array a[:stop] # items from the beginning through stop-1 a[:] # a copy of the whole array False boolean False null None zero integer 0 zero float 0.0 empty string '' empty list [] empty tuple () empty dict {} empty set set() zip(), range() \u56de\u50b3\u70ba iterable object \u4e26\u4e0d\u662f\u6574\u500b\u5be6\u9ad4\uff0c\u6240\u4ee5\u9700\u642d\u914d for \u6216\u76f4\u63a5 list(), dict() \u4f7f\u7528\u3002 Comprehensions list: [ expression for item in iterable ] [ expression for item in iterable if condition ] dict: { key_expression : value_expression for expression in iterable } Namespaces and Scope \u4fee\u6539global\u8b8a\u6578\u9700\u8981\u5148\u5ba3\u544a\uff0c\u4e0d\u7136\u4e00\u5f8b\u8996\u70balocal variable\uff0c\u4f46\u662f \u8b80\u4e0d\u9700\u8981\u5ba3\u544a (\u4e7e\u60a8\u5a18\u8d85\u96f7)\u3002 def change_and_print_global (): global animal animal = 'wombat' Resource GitHub \u795e\u4eba\u6574\u7406\u51fa\u4e00\u4efd Python \u958b\u6e90\u6e05\u55ae awesome-python-applications An A-Z of useful Python tricks Python Complexitipy Comprehensive Python Cheatsheet The Hitchhiker\u2019s Guide to Python Real Python Tutorials The Little Book of Python Anti-Patterns","title":"Python"},{"location":"Languages/python/readme/#python","text":"","title":"Python"},{"location":"Languages/python/readme/#pip","text":"pip\u5c31\u662fpython\u7684\u5957\u4ef6\u7ba1\u7406\u5de5\u5177 pip freeze > requirements.txt \u53ef\u4ee5\u628a\u76ee\u524d\u74b0\u5883\u7684\u6240\u6709\u5957\u4ef6\u90fd\u5370\u51fa\u5230requirements.txt pip install -r requirements.txt --upgrade ubuntu\u4e0a\u5b89\u88dd\u4e86python3\u4e4b\u5f8c\u6703\u8207python2\u5171\u5b58\uff0c\u8981\u78ba\u5b9a\u73fe\u5728\u4f7f\u7528\u7684\u662fpython3\u9084\u662fpython2\uff0c\u5c24\u5176\u5728vscode console\u88e1\u9762\uff0cpython3\u61c9\u8a72\u8981\u642d\u914d\u7684\u662fpip3\u3002","title":"PIP"},{"location":"Languages/python/readme/#configuration","text":"","title":"Configuration"},{"location":"Languages/python/readme/#manually-configuration","text":"[global] extra-index-url = http://devpi.local.bridgewell.com/bridgewell/prod/+simple/ trusted-host = devpi.local.bridgewell.com Here are some common environment OS path Unix $HOME/.config/pip/pip.conf macOS $HOME/Library/Application Support/pip/pip.conf or $HOME/.config/pip/pip.conf Windows %APPDATA%\\pip\\pip.ini For other environments, check pip office document","title":"Manually Configuration"},{"location":"Languages/python/readme/#one-time-command","text":"$ pip install \\ --extra-index-url http://devpi.local.bridgewell.com/bridgewell/prod/+simple/ \\ --trusted-host devpi.local.bridgewell.com \\ shutong>=1.10.0","title":"One-time Command"},{"location":"Languages/python/readme/#main","text":"\u53ef\u4ee5\u4e00\u76ee\u4e86\u7136\u7684\u9032\u5165\u9ede if __name__ == '__main__': main() python\u6c92\u6709\u9032\u5165\u9ede\uff0c\u4efb\u4f55.py\u90fd\u53ef\u7368\u7acb\u57f7\u884c\uff0c\u6240\u4ee5\u9019\u500b\u5beb\u6cd5\u53ef\u4ee5\u589e\u52a0\u53ef\u8b80\u6027\u4e00\u773c\u5c31\u770b\u51fa\u9032\u5165\u9ede\uff0c\u53e6\u4e00\u500b\u512a\u9ede\u662f\u7576\u9019\u500b.py\u88ab\u5176\u4ed6import\u7684\u6642\u5019\u5c31\u53ef\u4ee5\u9632\u6b62\u57f7\u884cmain()\u3002","title":"main()"},{"location":"Languages/python/readme/#_1","text":"SqlAlchemy: ORM in python logging: for log pywinrm: remote windows devpi: nuget in python","title":"\u597d\u7528\u5957\u4ef6"},{"location":"Languages/python/readme/#llint","text":"\u5abd\u7684\u6f54\u7656\u75c7 Linting Python in VS Code Flake8 Rules flake8-docstrings\uff1apublic interfaces \u9700\u52a0\u4e0a docstrings\u3002 flake8-import-order\uff1aimport statement \u9700\u8981\u7167 stdlib\u30013rd party\u3001local packages \u7684\u9806\u5e8f\u5206\u7d44\u3002\u7d44\u9593\u4ee5\u7a7a\u884c\u9694\u958b\u3002 flake8-quotes\uff1a\u7d71\u4e00\u55ae\u884c\u4f7f\u7528\u55ae\u5f15\u865f\u3001\u591a\u884c\u4f7f\u7528\u96d9\u5f15\u865f\u3002 pep8-naming\uff1a\u547d\u540d\u7b26\u5408 PEP8 \u898f\u7bc4\u3002 \u516c\u53f8.flake8 [flake8] max-line-length = 99 import-order-style = pep8 ignore = D100,D101,D102,D103,D104,D400,D401,E402,N806 exclude = .git, __pycache__, protobuf","title":"Llint"},{"location":"Languages/python/readme/#cryptography","text":"Failed building wheel for cryptography \u8acb\u5b89\u88dd\uff0c\u6211\u4e0d\u77e5\u9053\u9019\u4e09\u5c0f https://cryptography.io/en/latest/installation/#building-cryptography-on-linux","title":"cryptography\u932f\u8aa4"},{"location":"Languages/python/readme/#linq-in-python","text":"http://mark-dot-net.blogspot.com/2014/03/python-equivalents-of-linq-methods.html","title":"Linq in python"},{"location":"Languages/python/readme/#decorator","text":"def use_logging(level): def decorator(func): def wrapper(*args, **kwargs): if level == \"warn\": logging.warn(\"%s is running\" % func.__name__) elif level == \"info\": logging.info(\"%s is running\" % func.__name__) return func(*args) return wrapper return decorator","title":"Decorator"},{"location":"Languages/python/readme/#args-kwargs","text":"\u4e0d\u5b9a\u9577\u5ea6\u53c3\u6578\u8207\u95dc\u9375\u5b57\u53c3\u6578","title":"args  *kwargs"},{"location":"Languages/python/readme/#r-prefix","text":"r``'' or r``\"\"","title":"r prefix"},{"location":"Languages/python/readme/#_2","text":"https://pyformat.info/","title":"\u515c\u5b57\u4e32"},{"location":"Languages/python/readme/#lists-tuples-dictionaries-sets","text":"List Tuple Dictionary Set [] or list() () {} set()","title":"Lists, Tuples, Dictionaries, Sets"},{"location":"Languages/python/readme/#tuple-unpacking","text":"row, col = cell","title":"Tuple unpacking"},{"location":"Languages/python/readme/#list-slice-notation","text":"a[start:stop] # items start through stop-1 a[start:] # items start through the rest of the array a[:stop] # items from the beginning through stop-1 a[:] # a copy of the whole array","title":"List Slice Notation"},{"location":"Languages/python/readme/#false","text":"boolean False null None zero integer 0 zero float 0.0 empty string '' empty list [] empty tuple () empty dict {} empty set set()","title":"False"},{"location":"Languages/python/readme/#zip-range","text":"\u56de\u50b3\u70ba iterable object \u4e26\u4e0d\u662f\u6574\u500b\u5be6\u9ad4\uff0c\u6240\u4ee5\u9700\u642d\u914d for \u6216\u76f4\u63a5 list(), dict() \u4f7f\u7528\u3002","title":"zip(), range()"},{"location":"Languages/python/readme/#comprehensions","text":"list: [ expression for item in iterable ] [ expression for item in iterable if condition ] dict: { key_expression : value_expression for expression in iterable }","title":"Comprehensions"},{"location":"Languages/python/readme/#namespaces-and-scope","text":"\u4fee\u6539global\u8b8a\u6578\u9700\u8981\u5148\u5ba3\u544a\uff0c\u4e0d\u7136\u4e00\u5f8b\u8996\u70balocal variable\uff0c\u4f46\u662f \u8b80\u4e0d\u9700\u8981\u5ba3\u544a (\u4e7e\u60a8\u5a18\u8d85\u96f7)\u3002 def change_and_print_global (): global animal animal = 'wombat'","title":"Namespaces and Scope"},{"location":"Languages/python/readme/#resource","text":"GitHub \u795e\u4eba\u6574\u7406\u51fa\u4e00\u4efd Python \u958b\u6e90\u6e05\u55ae awesome-python-applications An A-Z of useful Python tricks Python Complexitipy Comprehensive Python Cheatsheet The Hitchhiker\u2019s Guide to Python Real Python Tutorials The Little Book of Python Anti-Patterns","title":"Resource"},{"location":"System%20Design/Architect/","text":"Architect The Path to Becoming a Software Architect Recommended Books Software Architecture in Practice (3rd Edition) (SEI Series in Software Engineering) Essential Software Architecture \u5728 17 Media \u64d4\u4efb SRE \u7684\u6240\u898b\u53ca\u6240\u805e","title":"Architect"},{"location":"System%20Design/Architect/#architect","text":"The Path to Becoming a Software Architect","title":"Architect"},{"location":"System%20Design/Architect/#recommended-books","text":"Software Architecture in Practice (3rd Edition) (SEI Series in Software Engineering) Essential Software Architecture \u5728 17 Media \u64d4\u4efb SRE \u7684\u6240\u898b\u53ca\u6240\u805e","title":"Recommended Books"},{"location":"System%20Design/readme/","text":"System Design Resoureces Grokking the System Design Interview SystemsExpert system-design-interview SYSTEM DESIGN PREPARATION","title":"System Design"},{"location":"System%20Design/readme/#system-design","text":"","title":"System Design"},{"location":"System%20Design/readme/#resoureces","text":"Grokking the System Design Interview SystemsExpert system-design-interview SYSTEM DESIGN PREPARATION","title":"Resoureces"},{"location":"System%20and%20Editor/Docker/","text":"Docker Docker Documentation Resource https://philipzheng.gitbooks.io/docker_practice/content/dockerfile/instructions.html How to Build and Run Your Own Container Images Commands Cheet sheet Docker CLIs docker run -it ubuntu:18.04 /bin/bash cmd description docker ps List containers\u6ce8\u610f\u5982\u679c\u6c92container\u6c92\u5728\u57f7\u884c\u4e2d\u4e0d\u6703\u986f\u793a\uff0c\u8acb\u4e0b\u53c3\u6578\u2019--all\u2019\u6216\u2019-a\u2019 docker start/docker stop Start one or more stopped containers / Stop one or more running containers docker logs Fetch the logs of a container docker logs -f \u2014tail \u9019\u908a\u662f\u7d00\u9304stdout\u7684logs docker exec Run a command in a running container docker exec -it ubuntu_bash bash This will create a new Bash session in the container ubuntu_bash . Next, set an environment variable in the current bash session. exit to quit docker exec -it [container] /bin/bash \u57f7\u884ccontainer\u4e2d\u7684bash\uff0c\u5982\u540c\u9032\u5165container\u4e2d\u7684shell docker inspect Return low-level information on Docker objects\u53ef\u4ee5\u6aa2\u67e5\u9032\u5165\u9ede\u3001config\u7b49\u7b49\u8cc7\u8a0arunning\u4e2d\u7684container\u624d\u53ef\u4ee5\u770b docker info Display system-wide information service docker restart restart docker service docker create creates a container but does not start it. docker start starts a container so it is running. docker run creates and starts a container in one operation. docker run -d Run container in background and print container ID docker rm remove container docker rmi remove image docker network ls List networks dockerfile RUN vs CMD In a nutshell RUN executes command(s) in a new layer and creates a new image. E.g., it is often used for installing software packages. CMD sets default command and/or parameters, which can be overwritten from command line when docker container runs. ENTRYPOINT configures a container that will run as an executable. Container\u2019s config /var/lib/docker/containers/[container-id]/config.json \u9019\u662fcontainer\u7684config\u4f4d\u7f6e\uff0c\u53ea\u8981\u77e5\u9053container id\u5c31\u53ef\u4ee5\u627e\u5230\u4ed6\u9032\u884c\u4fee\u6539\uff0c\u6ce8\u610f\u9019\u4e0d\u662f\u5b98\u65b9\u5efa\u8b70\u4f5c\u6cd5\uff0c\u4e0d\u662f\u6240\u6709\u53c3\u6578\u90fd\u80fd\u4fee\u6539\uff0cEvn\u597d\u50cf\u9084\u53ef\u4ee5\uff0c\u4fee\u6539\u4e4b\u5f8c\u91cd\u555fcontainer\u662f\u6c92\u6548\u7684\uff0c\u5fc5\u9808\u91cd\u555fdocker: service docker restart How to debug docker info \u770b\u4f60\u7684container\u88dd\u5728\u54ea\u908a\uff0c\u88e1\u9762\u6703\u6709\u9019\u4e00\u884c Docker Root Dir: \uff0c\u53ef\u4ee5\u5230\u9019\u8def\u5f91\u5e95\u4e0b\u627econtainer\uff0c\u88e1\u9762\u61c9\u6709\u76e1\u6709","title":"Docker"},{"location":"System%20and%20Editor/Docker/#docker","text":"Docker Documentation","title":"Docker"},{"location":"System%20and%20Editor/Docker/#resource","text":"https://philipzheng.gitbooks.io/docker_practice/content/dockerfile/instructions.html How to Build and Run Your Own Container Images","title":"Resource"},{"location":"System%20and%20Editor/Docker/#commands","text":"Cheet sheet Docker CLIs docker run -it ubuntu:18.04 /bin/bash cmd description docker ps List containers\u6ce8\u610f\u5982\u679c\u6c92container\u6c92\u5728\u57f7\u884c\u4e2d\u4e0d\u6703\u986f\u793a\uff0c\u8acb\u4e0b\u53c3\u6578\u2019--all\u2019\u6216\u2019-a\u2019 docker start/docker stop Start one or more stopped containers / Stop one or more running containers docker logs Fetch the logs of a container docker logs -f \u2014tail \u9019\u908a\u662f\u7d00\u9304stdout\u7684logs docker exec Run a command in a running container docker exec -it ubuntu_bash bash This will create a new Bash session in the container ubuntu_bash . Next, set an environment variable in the current bash session. exit to quit docker exec -it [container] /bin/bash \u57f7\u884ccontainer\u4e2d\u7684bash\uff0c\u5982\u540c\u9032\u5165container\u4e2d\u7684shell docker inspect Return low-level information on Docker objects\u53ef\u4ee5\u6aa2\u67e5\u9032\u5165\u9ede\u3001config\u7b49\u7b49\u8cc7\u8a0arunning\u4e2d\u7684container\u624d\u53ef\u4ee5\u770b docker info Display system-wide information service docker restart restart docker service docker create creates a container but does not start it. docker start starts a container so it is running. docker run creates and starts a container in one operation. docker run -d Run container in background and print container ID docker rm remove container docker rmi remove image docker network ls List networks","title":"Commands"},{"location":"System%20and%20Editor/Docker/#dockerfile","text":"","title":"dockerfile"},{"location":"System%20and%20Editor/Docker/#run-vs-cmd","text":"","title":"RUN vs CMD"},{"location":"System%20and%20Editor/Docker/#in-a-nutshell","text":"RUN executes command(s) in a new layer and creates a new image. E.g., it is often used for installing software packages. CMD sets default command and/or parameters, which can be overwritten from command line when docker container runs. ENTRYPOINT configures a container that will run as an executable.","title":"In a nutshell"},{"location":"System%20and%20Editor/Docker/#containers-config","text":"/var/lib/docker/containers/[container-id]/config.json \u9019\u662fcontainer\u7684config\u4f4d\u7f6e\uff0c\u53ea\u8981\u77e5\u9053container id\u5c31\u53ef\u4ee5\u627e\u5230\u4ed6\u9032\u884c\u4fee\u6539\uff0c\u6ce8\u610f\u9019\u4e0d\u662f\u5b98\u65b9\u5efa\u8b70\u4f5c\u6cd5\uff0c\u4e0d\u662f\u6240\u6709\u53c3\u6578\u90fd\u80fd\u4fee\u6539\uff0cEvn\u597d\u50cf\u9084\u53ef\u4ee5\uff0c\u4fee\u6539\u4e4b\u5f8c\u91cd\u555fcontainer\u662f\u6c92\u6548\u7684\uff0c\u5fc5\u9808\u91cd\u555fdocker: service docker restart","title":"Container\u2019s config"},{"location":"System%20and%20Editor/Docker/#how-to-debug","text":"docker info \u770b\u4f60\u7684container\u88dd\u5728\u54ea\u908a\uff0c\u88e1\u9762\u6703\u6709\u9019\u4e00\u884c Docker Root Dir: \uff0c\u53ef\u4ee5\u5230\u9019\u8def\u5f91\u5e95\u4e0b\u627econtainer\uff0c\u88e1\u9762\u61c9\u6709\u76e1\u6709","title":"How to debug"},{"location":"System%20and%20Editor/Git%20and%20GitLab/","text":"Git & GitLab Learning Git How to write a good commit message A properly formed Git commit subject line should always be able to complete the following sentence: if applied, this commit will your subject line here. For example : if applied, this commit will Delete unnecessary files if applied, this commit will Add grep option if applied, this commit will Fix error when protocol is missing It will not work for bad commit messages : if applied, this commit will contact page if applied, this commit will list of online users, some other changes because of server Git flow https://nvie.com/posts/a-successful-git-branching-model/ https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow Tags \u9078\u4e00\u500b tag [FEAT] \u65b0\u589e\u529f\u80fd\u7684\u8b8a\u52d5 [BUGFIX] \u4fee bug \u76f8\u95dc\u7684\u8b8a\u52d5 [REFACTOR] \u529f\u80fd\u4e0d\u8b8a\u4f46\u7a0b\u5f0f\u8b8a\u7684\u8b8a\u52d5 [TASK] \u5176\u4ed6\u96dc\u9805\u8b8a\u52d5 [CHORE] \u8ddf code \u7121\u95dc\u7684\u8b8a\u52d5 \u4f8b\u5982 readme [STYLE] \u6539 coding style \u76f8\u95dc\u7684\u8b8a\u52d5 \u4f8b\u5982\u7e2e\u6392 \u547d\u540d pull \u2014rebase \u4e0d\u8981 merge remote to local Commit message https://blog.louie.lu/2017/03/21/%E5%A6%82%E4%BD%95%E5%AF%AB%E4%B8%80%E5%80%8B-git-commit-message/ https://gist.github.com/adeekshith/cd4c95a064977cdc6c50 Gitmoji https://gitmoji.carloscuesta.me/ Resource Online Turtorial Git book 30 \u5929\u7cbe\u901a Git \u7248\u672c\u63a7\u7ba1 Git Command git clone [repo] git status git remote -v git commit -m [comment msg] git push origin master git checkout origin develop git blame \u6a94\u6848\u540d\u7a31 \u9019\u500b\u6307\u4ee4\u6703\u5217\u51fa\u9019\u500b\u6a94\u6848\u88e1\u7684\u6bcf\u4e00\u884c\u662f\u8ab0\u5728\u4ec0\u9ebc\u6642\u9593\u3001\u54ea\u4e00\u6b21 commit \u5beb\u9032\u53bb\u7684\uff0c\u60f3\u8cf4\u90fd\u8cf4\u4e0d\u6389\u3002 How do you force a merge with Git? ref I don\u2019t care if there is any other conflict. My branch A will win. Always git checkout A git merge -s ours master git checkout master git merge A It is just the File B which should win. All others should be merged as normal git checkout A cp B ../outsideRepository git checkout master git merge --no-commit --no-ff A cp ../outsideRepsitory/B ./ # Resolve other conflicts... git commit -m \"Your merge message :-)\" Master branch? A is the new master. git checkout A git branch -D master #It forces to delete the master branch git branch master #Creates a new master on current head git checkout master git push origin master --force Git Attributes \u4f7f\u7528 .gitattributes \u53ef\u4ee5\u65b0\u589e\u4e00\u4e9b\u7279\u6b8a\u529f\u80fd\uff0c\u5176\u4e2d\u4e00\u9805\u70ba\u8a2d\u5b9a \u5408\u4f75\u7b56\u7565 \uff0c\u7bc4\u4f8b\uff1a slackbot_settings.py merge=ours \u4f7f\u7528 merge=ours \u8acb\u6ce8\u610f\u5fc5\u9808\u5728 config \u958b\u5668\u6b64\u529f\u80fd\uff0c\u4f7f\u7528\u4e0b\u9762\u6307\u4ee4\u67e5\u770b config git config --global -l \u5982\u679c\u6c92\u6709 merge.ours.driver=true \u8acb\u7528\u4ee5\u4e0b\u6307\u4ee4\u65b0\u589e\uff1a git config --global merge.ours.driver true GitLab https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/files/gitlab-config-template/gitlab.rb.template https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/doc/settings/gitlab.yml.md https://docs.gitlab.com/ee/raketasks/backup_restore.html Changing gitlab.yml https://docs.gitlab.com/omnibus/settings/gitlab.yml.html issue board CI/CD A beginner's guide to continuous integration GitLab CI/CD Pipeline Configuration Reference SSH Backup and Restore https://docs.gitlab.com/ee/raketasks/backup_restore.html \u5c07\u5099\u4efd\u4e1f\u5230 dropbox\uff0c\u8a18\u5f97 cd /etc/gitlab sudo vim gitlab.rb # gitlab_rails['manage_backup_path'] = false # gitlab_rails['backup_path'] = \"/home/kai/Dropbox/gitlab_backup\" # gitlab_rails['backup_archive_permissions'] = 0777 gitlab-ctl reconfigure sudo crontab -e 24 * * * * gitlab-rake gitlab:backup:create \u4e0d\u5e78\u7248\u672c\u4e0d\u5408\u4f60\u9700\u8981\uff1a Downgrade \u7279\u5b9a\u7248\u672c CI template: CS build and robocopy stages: - build - deploy build: stage: build tags: - windows only: - branches script: - chcp 65001 - echo on - '%NUGET% restore ScupioMonitor.sln' - '%MSBUILD% ScupioMonitor.sln /p:Configuration=Debug' artifacts: name: '%CI_JOB_NAME%-%CI_COMMIT_REF_SLUG%' expire_in: 1 week paths: - HealthChecker/bin/Debug/*.exe - HealthChecker/bin/Debug/*.dll deploy: stage: deploy tags: - windows only: - branches script: - chcp 65001 - echo on - net use \\\\n046\\c$\\ScupioTasks /user:administrator %DEPLOY_PASS% # https://stackoverflow.com/questions/44504795/how-to-stop-robocopy-from-exiting-the-build - (robocopy HealthChecker/bin/Debug/ //n046/c$/ScupioTasks) ^& IF %ERRORLEVEL% LSS 8 SET ERRORLEVEL = 0","title":"Git & GitLab Learning"},{"location":"System%20and%20Editor/Git%20and%20GitLab/#git-gitlab-learning","text":"","title":"Git &amp; GitLab Learning"},{"location":"System%20and%20Editor/Git%20and%20GitLab/#git","text":"","title":"Git"},{"location":"System%20and%20Editor/Git%20and%20GitLab/#how-to-write-a-good-commit-message","text":"A properly formed Git commit subject line should always be able to complete the following sentence: if applied, this commit will your subject line here. For example : if applied, this commit will Delete unnecessary files if applied, this commit will Add grep option if applied, this commit will Fix error when protocol is missing It will not work for bad commit messages : if applied, this commit will contact page if applied, this commit will list of online users, some other changes because of server","title":"How to write a good commit message"},{"location":"System%20and%20Editor/Git%20and%20GitLab/#git-flow","text":"https://nvie.com/posts/a-successful-git-branching-model/ https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow","title":"Git flow"},{"location":"System%20and%20Editor/Git%20and%20GitLab/#tags","text":"\u9078\u4e00\u500b tag [FEAT] \u65b0\u589e\u529f\u80fd\u7684\u8b8a\u52d5 [BUGFIX] \u4fee bug \u76f8\u95dc\u7684\u8b8a\u52d5 [REFACTOR] \u529f\u80fd\u4e0d\u8b8a\u4f46\u7a0b\u5f0f\u8b8a\u7684\u8b8a\u52d5 [TASK] \u5176\u4ed6\u96dc\u9805\u8b8a\u52d5 [CHORE] \u8ddf code \u7121\u95dc\u7684\u8b8a\u52d5 \u4f8b\u5982 readme [STYLE] \u6539 coding style \u76f8\u95dc\u7684\u8b8a\u52d5 \u4f8b\u5982\u7e2e\u6392 \u547d\u540d","title":"Tags"},{"location":"System%20and%20Editor/Git%20and%20GitLab/#pull-rebase","text":"\u4e0d\u8981 merge remote to local","title":"pull \u2014rebase"},{"location":"System%20and%20Editor/Git%20and%20GitLab/#commit-message","text":"https://blog.louie.lu/2017/03/21/%E5%A6%82%E4%BD%95%E5%AF%AB%E4%B8%80%E5%80%8B-git-commit-message/ https://gist.github.com/adeekshith/cd4c95a064977cdc6c50","title":"Commit message"},{"location":"System%20and%20Editor/Git%20and%20GitLab/#gitmoji","text":"https://gitmoji.carloscuesta.me/","title":"Gitmoji"},{"location":"System%20and%20Editor/Git%20and%20GitLab/#resource","text":"Online Turtorial Git book 30 \u5929\u7cbe\u901a Git \u7248\u672c\u63a7\u7ba1","title":"Resource"},{"location":"System%20and%20Editor/Git%20and%20GitLab/#git-command","text":"git clone [repo] git status git remote -v git commit -m [comment msg] git push origin master git checkout origin develop git blame \u6a94\u6848\u540d\u7a31 \u9019\u500b\u6307\u4ee4\u6703\u5217\u51fa\u9019\u500b\u6a94\u6848\u88e1\u7684\u6bcf\u4e00\u884c\u662f\u8ab0\u5728\u4ec0\u9ebc\u6642\u9593\u3001\u54ea\u4e00\u6b21 commit \u5beb\u9032\u53bb\u7684\uff0c\u60f3\u8cf4\u90fd\u8cf4\u4e0d\u6389\u3002","title":"Git Command"},{"location":"System%20and%20Editor/Git%20and%20GitLab/#how-do-you-force-a-merge-with-git","text":"ref","title":"How do you force a merge with Git?"},{"location":"System%20and%20Editor/Git%20and%20GitLab/#i-dont-care-if-there-is-any-other-conflict-my-branch-a-will-win-always","text":"git checkout A git merge -s ours master git checkout master git merge A","title":"I don\u2019t care if there is any other conflict. My branch A will win. Always"},{"location":"System%20and%20Editor/Git%20and%20GitLab/#it-is-just-the-file-b-which-should-win-all-others-should-be-merged-as-normal","text":"git checkout A cp B ../outsideRepository git checkout master git merge --no-commit --no-ff A cp ../outsideRepsitory/B ./ # Resolve other conflicts... git commit -m \"Your merge message :-)\"","title":"It is just the File B which should win. All others should be merged as normal"},{"location":"System%20and%20Editor/Git%20and%20GitLab/#master-branch-a-is-the-new-master","text":"git checkout A git branch -D master #It forces to delete the master branch git branch master #Creates a new master on current head git checkout master git push origin master --force","title":"Master branch? A is the new master."},{"location":"System%20and%20Editor/Git%20and%20GitLab/#git-attributes","text":"\u4f7f\u7528 .gitattributes \u53ef\u4ee5\u65b0\u589e\u4e00\u4e9b\u7279\u6b8a\u529f\u80fd\uff0c\u5176\u4e2d\u4e00\u9805\u70ba\u8a2d\u5b9a \u5408\u4f75\u7b56\u7565 \uff0c\u7bc4\u4f8b\uff1a slackbot_settings.py merge=ours \u4f7f\u7528 merge=ours \u8acb\u6ce8\u610f\u5fc5\u9808\u5728 config \u958b\u5668\u6b64\u529f\u80fd\uff0c\u4f7f\u7528\u4e0b\u9762\u6307\u4ee4\u67e5\u770b config git config --global -l \u5982\u679c\u6c92\u6709 merge.ours.driver=true \u8acb\u7528\u4ee5\u4e0b\u6307\u4ee4\u65b0\u589e\uff1a git config --global merge.ours.driver true","title":"Git Attributes"},{"location":"System%20and%20Editor/Git%20and%20GitLab/#gitlab","text":"https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/files/gitlab-config-template/gitlab.rb.template https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/doc/settings/gitlab.yml.md https://docs.gitlab.com/ee/raketasks/backup_restore.html","title":"GitLab"},{"location":"System%20and%20Editor/Git%20and%20GitLab/#changing-gitlabyml","text":"https://docs.gitlab.com/omnibus/settings/gitlab.yml.html","title":"Changing gitlab.yml"},{"location":"System%20and%20Editor/Git%20and%20GitLab/#issue-board","text":"","title":"issue board"},{"location":"System%20and%20Editor/Git%20and%20GitLab/#cicd","text":"A beginner's guide to continuous integration GitLab CI/CD Pipeline Configuration Reference","title":"CI/CD"},{"location":"System%20and%20Editor/Git%20and%20GitLab/#ssh","text":"","title":"SSH"},{"location":"System%20and%20Editor/Git%20and%20GitLab/#backup-and-restore","text":"https://docs.gitlab.com/ee/raketasks/backup_restore.html \u5c07\u5099\u4efd\u4e1f\u5230 dropbox\uff0c\u8a18\u5f97 cd /etc/gitlab sudo vim gitlab.rb # gitlab_rails['manage_backup_path'] = false # gitlab_rails['backup_path'] = \"/home/kai/Dropbox/gitlab_backup\" # gitlab_rails['backup_archive_permissions'] = 0777 gitlab-ctl reconfigure sudo crontab -e 24 * * * * gitlab-rake gitlab:backup:create \u4e0d\u5e78\u7248\u672c\u4e0d\u5408\u4f60\u9700\u8981\uff1a Downgrade \u7279\u5b9a\u7248\u672c","title":"Backup and Restore"},{"location":"System%20and%20Editor/Git%20and%20GitLab/#ci-template-cs-build-and-robocopy","text":"stages: - build - deploy build: stage: build tags: - windows only: - branches script: - chcp 65001 - echo on - '%NUGET% restore ScupioMonitor.sln' - '%MSBUILD% ScupioMonitor.sln /p:Configuration=Debug' artifacts: name: '%CI_JOB_NAME%-%CI_COMMIT_REF_SLUG%' expire_in: 1 week paths: - HealthChecker/bin/Debug/*.exe - HealthChecker/bin/Debug/*.dll deploy: stage: deploy tags: - windows only: - branches script: - chcp 65001 - echo on - net use \\\\n046\\c$\\ScupioTasks /user:administrator %DEPLOY_PASS% # https://stackoverflow.com/questions/44504795/how-to-stop-robocopy-from-exiting-the-build - (robocopy HealthChecker/bin/Debug/ //n046/c$/ScupioTasks) ^& IF %ERRORLEVEL% LSS 8 SET ERRORLEVEL = 0","title":"CI template: CS build and robocopy"},{"location":"System%20and%20Editor/Internet%20Information%20Services%20%28IIS%29/","text":"IIS Simple HTML5 Server \u7ad9\u53f0\u53f3\u9375->\u65b0\u589e\u61c9\u7528\u7a0b\u5f0f->\u8a2d\u5b9a\u5be6\u9ad4\u8def\u5f91 \u78ba\u5b9aweb.config\u7684\u6b0a\u9650\uff0c\u6b0a\u9650\u8a2d\u5b9a\u5b8c\u8a18\u5f97\u91cd\u555fiis \u9810\u8a2d\u6587\u4ef6\u628a\u76ee\u6a19\u6587\u4ef6\u5f80\u4e0a\u79fb\u6210\u70ba\u9810\u8a2d\u76ee\u9304\uff0c\u53ef\u4ee5\u5728 \u7ad9\u53f0->\u7ba1\u7406\u61c9\u7528\u7a0b\u5f0f->\u700f\u89bd \u76f4\u63a5\u958b\u555f\u9810\u8a2d\u76ee\u9304 \u5982\u679c\u4f60\u767c\u73fe\u6240\u6709\u6771\u897f\u90fd\u662f\u7a7a\u7684\uff0c\u53ef\u80fd\u662f\u6c92\u958b\u555f\u975c\u614b\u5167\u5bb9\uff1a In Control Panel --> Programs --> Programs And Features --> Turn Windows features on or off -> Internet Information Services -> World Wide Web Services -> Common HTTP Features -> Static Content Also make sure .NET Extensibility 3.5 and .NET Extensibility 4.5 are checked.","title":"IIS"},{"location":"System%20and%20Editor/Internet%20Information%20Services%20%28IIS%29/#iis","text":"","title":"IIS"},{"location":"System%20and%20Editor/Internet%20Information%20Services%20%28IIS%29/#simple-html5-server","text":"\u7ad9\u53f0\u53f3\u9375->\u65b0\u589e\u61c9\u7528\u7a0b\u5f0f->\u8a2d\u5b9a\u5be6\u9ad4\u8def\u5f91 \u78ba\u5b9aweb.config\u7684\u6b0a\u9650\uff0c\u6b0a\u9650\u8a2d\u5b9a\u5b8c\u8a18\u5f97\u91cd\u555fiis \u9810\u8a2d\u6587\u4ef6\u628a\u76ee\u6a19\u6587\u4ef6\u5f80\u4e0a\u79fb\u6210\u70ba\u9810\u8a2d\u76ee\u9304\uff0c\u53ef\u4ee5\u5728 \u7ad9\u53f0->\u7ba1\u7406\u61c9\u7528\u7a0b\u5f0f->\u700f\u89bd \u76f4\u63a5\u958b\u555f\u9810\u8a2d\u76ee\u9304 \u5982\u679c\u4f60\u767c\u73fe\u6240\u6709\u6771\u897f\u90fd\u662f\u7a7a\u7684\uff0c\u53ef\u80fd\u662f\u6c92\u958b\u555f\u975c\u614b\u5167\u5bb9\uff1a In Control Panel --> Programs --> Programs And Features --> Turn Windows features on or off -> Internet Information Services -> World Wide Web Services -> Common HTTP Features -> Static Content Also make sure .NET Extensibility 3.5 and .NET Extensibility 4.5 are checked.","title":"Simple HTML5 Server"},{"location":"System%20and%20Editor/Jenkins/","text":"Jenkins .Net Build Example Execute Windows batch command %NUGET% restore SEDatafeedChecker.sln Build a Visual Studio project or solution using MSBuild MSBuild Build File SEDatafeedChecker.sln Windows PowerShell(Nunit) $workspace = \"$env:workspace\" $targetDll = $workspace+ \"\\SEDatafeedTest\\bin\\Debug\\SEDatafeedTest.dll\" $result = $workspace + '\\TestResult_All.xml' $resultp = \"/result=$result\" C:\\\"Program Files (x86)\"\\NUnit.org\\nunit-console\\nunit3-console.exe $targetDll $resultp Archive the artifacts in Post-build Actions Archive the artifacts Files to archive SEDatafeedChecker\\bin\\Debug\\**\\* \u4f7f\u7528 \\**\\* \u53ef\u4ee5\u5305\u542b\u5b50\u76ee\u9304 Copy artifacts from another project in Build Which build Latest successful build Artifacts to copy SEDatafeedChecker\\bin\\Debug\\**\\* Flatten directories \u6253\u52fe\u53ef\u4ee5\u628a\u5efa\u7f6e\u7684artifacts\u76f4\u63a5\u8907\u88fd\u5230\u5c08\u6848\u5e95\u4e0b\uff0c\u53ef\u4ee5\u7701\u53bb\u8f38\u5165\u8def\u5f91 Jenkins Parameter \u6ce8\u610f\u6709\u6642\u5019\u662f %xxx% \u6709\u6642\u5019\u662f ${} \uff0c\u770b\u4f60\u7528\u7684\u662fwindows batch\u9084\u662fpowershell Good to read \u7cbe\u901a Jenkins Pipeline","title":"Jenkins"},{"location":"System%20and%20Editor/Jenkins/#jenkins","text":"","title":"Jenkins"},{"location":"System%20and%20Editor/Jenkins/#net-build-example","text":"Execute Windows batch command %NUGET% restore SEDatafeedChecker.sln Build a Visual Studio project or solution using MSBuild MSBuild Build File SEDatafeedChecker.sln Windows PowerShell(Nunit) $workspace = \"$env:workspace\" $targetDll = $workspace+ \"\\SEDatafeedTest\\bin\\Debug\\SEDatafeedTest.dll\" $result = $workspace + '\\TestResult_All.xml' $resultp = \"/result=$result\" C:\\\"Program Files (x86)\"\\NUnit.org\\nunit-console\\nunit3-console.exe $targetDll $resultp","title":".Net Build Example"},{"location":"System%20and%20Editor/Jenkins/#archive-the-artifacts-in-post-build-actions","text":"Archive the artifacts Files to archive SEDatafeedChecker\\bin\\Debug\\**\\* \u4f7f\u7528 \\**\\* \u53ef\u4ee5\u5305\u542b\u5b50\u76ee\u9304","title":"Archive the artifacts in Post-build Actions"},{"location":"System%20and%20Editor/Jenkins/#copy-artifacts-from-another-project-in-build","text":"Which build Latest successful build Artifacts to copy SEDatafeedChecker\\bin\\Debug\\**\\* Flatten directories \u6253\u52fe\u53ef\u4ee5\u628a\u5efa\u7f6e\u7684artifacts\u76f4\u63a5\u8907\u88fd\u5230\u5c08\u6848\u5e95\u4e0b\uff0c\u53ef\u4ee5\u7701\u53bb\u8f38\u5165\u8def\u5f91","title":"Copy artifacts from another project in Build"},{"location":"System%20and%20Editor/Jenkins/#jenkins-parameter","text":"\u6ce8\u610f\u6709\u6642\u5019\u662f %xxx% \u6709\u6642\u5019\u662f ${} \uff0c\u770b\u4f60\u7528\u7684\u662fwindows batch\u9084\u662fpowershell","title":"Jenkins Parameter"},{"location":"System%20and%20Editor/Jenkins/#good-to-read","text":"\u7cbe\u901a Jenkins Pipeline","title":"Good to read"},{"location":"System%20and%20Editor/Jmeter/","text":"Jmeter Non-GUI Mode (Command Line mode) -n This specifies JMeter is to run in non-gui mode -t [name of JMX file that contains the Test Plan]. -l [name of JTL file to log sample results to]. -j [name of JMeter run log file]. -r Run the test in the servers specified by the JMeter property \"remote_hosts\" -R [list of remote servers] Run the test in the specified remote servers -g [path to CSV file] generate report dashboard only -e generate report dashboard after load test -o output folder where to generate the report dashboard after load test. Folder must not exist or be empty The script also lets you specify the optional firewall/proxy server information: -H [proxy server hostname or ip address] -P [proxy server port] Example: jmeter -n -t my_test.jmx -l log.jtl After test you can create Summary and Aggregate reports from a .jtl file using Jmeter GUI or just using jenkins Performance Plugin . Pass properties on command line __P function __P Example: Define the property value: jmeter -Jgroup1.threads=7 -Jhostname1=www.realhost.edu Fetch the values( in jmx ): ${__P(group1.threads)} - return the value of group1.thread ${__P(group1.loops)} - return the value of group1.loops ${__P(hostname,www.dummy.org)} - return value of property hostname or www.dummy.org if not defined In the examples above, the first function call would return 7, the second would return 1 and the last would return www.dummy.org (unless those properties were defined elsewhere!) CSV Data Set Config using .csv file as variable input csv data set config","title":"Jmeter"},{"location":"System%20and%20Editor/Jmeter/#jmeter","text":"","title":"Jmeter"},{"location":"System%20and%20Editor/Jmeter/#non-gui-mode-command-line-mode","text":"-n This specifies JMeter is to run in non-gui mode -t [name of JMX file that contains the Test Plan]. -l [name of JTL file to log sample results to]. -j [name of JMeter run log file]. -r Run the test in the servers specified by the JMeter property \"remote_hosts\" -R [list of remote servers] Run the test in the specified remote servers -g [path to CSV file] generate report dashboard only -e generate report dashboard after load test -o output folder where to generate the report dashboard after load test. Folder must not exist or be empty The script also lets you specify the optional firewall/proxy server information: -H [proxy server hostname or ip address] -P [proxy server port] Example: jmeter -n -t my_test.jmx -l log.jtl After test you can create Summary and Aggregate reports from a .jtl file using Jmeter GUI or just using jenkins Performance Plugin .","title":"Non-GUI Mode (Command Line mode)"},{"location":"System%20and%20Editor/Jmeter/#pass-properties-on-command-line","text":"__P function __P Example: Define the property value: jmeter -Jgroup1.threads=7 -Jhostname1=www.realhost.edu Fetch the values( in jmx ): ${__P(group1.threads)} - return the value of group1.thread ${__P(group1.loops)} - return the value of group1.loops ${__P(hostname,www.dummy.org)} - return value of property hostname or www.dummy.org if not defined In the examples above, the first function call would return 7, the second would return 1 and the last would return www.dummy.org (unless those properties were defined elsewhere!)","title":"Pass properties on command line"},{"location":"System%20and%20Editor/Jmeter/#csv-data-set-config","text":"using .csv file as variable input csv data set config","title":"CSV Data Set Config"},{"location":"System%20and%20Editor/Linux/","text":"Ubuntu \u5957\u4ef6\u7ba1\u7406 Debian \u6d3e\u7cfb \u2192Ubuntu\u2192Apt Redhat \u6d3e\u7cfb \u2192CentOS\u2192Yum Terminal call terminal ctrl + alt + t clear ctrl + l Bash \u9ce5\u54e5\u8a8d\u8b58\u8207\u5b78\u7fd2BASH cmd descriptions pwd \u5217\u51fa\u76ee\u524d\u5b8c\u6574\u8def\u5f91 top cp \u8907\u88fd\u6a94\u6848 tar \u6253\u5305 cat \u628a\u6a94\u6848\u8f38\u51fa\u5230 stdout touch \u5efa\u7acb\u6a94\u6848 touch \"kai-\\$(date +%Y%m%d)\" \u4ee5\u65e5\u671f\u5efa\u6a94 usermod -aG [group][user] add user to group export VAR=value \u8a2d\u5b9a\u74b0\u5883\u8b8a\u6578 \u4e32\u806f\u6307\u4ee4 symbol descriptions ; \u9023\u7e8c\u4e0b\u9054\u6307\u4ee4 && \u7576\u6307\u4ee4\u56de\u50b3 1(\u6210\u529f)\u5247\u57f7\u884c\u4e0b\u4e00\u500b\u6307\u4ee4 || \u7576\u524d\u6307\u4ee4\u56de\u50b3 0(\u5931\u6557)\u57f7\u884c\u4e0b\u4e00\u6307\u4ee4 > stdoutput | pipe example cd /home/kai/Desktop/kaitest && touch \"kai-$(date +%d%s)\" Disc Usage du -h \u9060\u7aef\u57f7\u884c make \u6307\u4ee4 make -n > xxx.sh ssh user@host < xxx.sh \u9060\u7aef\u5168\u5957 sshpass -p $HOST_PWD ssh -o StrictHostKeyChecking=no $WORKER_NAME@$DEPLOY_MACHINE < makerun.sh \u4e0d\u6aa2\u67e5 key\uff0c\u81ea\u52d5\u5316\u597d\u7528 -o StrictHostKeyChecking=no env, set export set: \u76ee\u524dshell\u7684\u74b0\u5883\u8b8a\u6578 env: \u9664\u4e86\u662f\u76ee\u524dshell\u7684\u74b0\u5883\u8b8a\u6578\u4ee5\u5916\uff0c\u80fd\u628a\u9019\u4e9b\u8b8a\u6578\u4e00\u8d77\u5e36\u5230\u76ee\u524dshell\u767c\u8d77\u7684\u5b50\u7a0b\u5f0f export: \u8a2d\u5b9aenv\u8b8a\u6578 export env from file export $(cat env/YOUR_ENV_FILE |xargs) Makefile https://hackmd.io/s/SySTMXPvl \u7279\u5225\u5b57\u5143 @ \u4e0d\u8981\u986f\u793a\u57f7\u884c\u7684\u6307\u4ee4 \u56e0\u57f7\u884c make \u6307\u4ee4\u5f8c\u6703\u5728\u7d42\u7aef\u6a5f\u5370\u51fa\u6b63\u5728\u57f7\u884c\u7684\u6307\u4ee4 - \u8868\u793a\u5373\u4f7f\u8a72\u884c\u6307\u4ee4\u51fa\u932f\uff0c\u4e5f\u4e0d\u6703\u4e2d\u65b7\u57f7\u884c\uff0c\u800c make \u53ea\u8981\u9047\u5230\u4efb\u4f55\u932f\u8aa4\u5c31\u6703\u4e2d\u65b7\u57f7\u884c\u3002\u4f46\u50cf\u662f\u5728\u9032\u884c clean \u6642\uff0c\u4e5f\u8a31\u6839\u672c\u6c92\u6709\u4efb\u4f55\u6a94\u6848\u53ef\u4ee5 clean\uff0c\u56e0\u800c rm \u6703\u50b3\u56de\u932f\u8aa4\u503c\uff0c\u56e0\u800c\u5c0e\u81f4 make \u4e2d\u65b7\u57f7\u884c\u3002\u6211\u5011\u53ef\u4ee5\u5229\u7528-\u4f86\u95dc\u9589\u932f\u8aa4\u4e2d\u65b7\u529f\u80fd\uff0c\u8b93 make \u4e0d\u6703\u56e0\u800c\u4e2d\u65b7\u3002 SSH Add ssh private key ssh-add [~/.ssh/id_rsa] \u5982\u679c\u51fa\u73fe @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @ WARNING: UNPROTECTED PRIVATE KEY FILE! @ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ \u8868\u793a\u6b0a\u9650\u958b\u592a\u5927 chmod 0600 [private key file] sshpass sshpass:\u4e0d\u7528\u4e92\u52d5\u9060\u7aef\u4f7f\u7528 ssh \u4e0b command \u7684\u5de5\u5177 sshpass -p 'mypassword' ssh myaccount@my.linux.host Cron tab cron -e \u7de8\u8f2f\u8a72\u4f7f\u7528\u8005\u7684 crontab \u6307\u4ee4 cron -l \u5217\u51fa\u8a72\u4f7f\u7528\u8005\u64c1\u6709\u7684 crontab \u6307\u4ee4 cron -r \u5c07\u4f7f\u7528\u8005\u7684 crontab \u5168\u90e8\u6e05\u9664\uff01\uff08 \u5c0f\u5fc3\u4f7f\u7528 \uff09 \u203b \u4e0b\u9054\u6307\u4ee4\u8acb\u7528 \u7d55\u5c0d\u8def\u5f91 \u907f\u514d\u932f\u8aa4 */5 * * * * /home/ubuntu/test.sh\uff1a\u6bcf\u4e94\u5206\u9418\u57f7\u884c\u4e00\u6b21\u6e2c\u8a66 shell script Set static IP \u7528 UI \u9ede Resources GNU/Linux \u5e38\u7528\u6307\u4ee4","title":"Ubuntu"},{"location":"System%20and%20Editor/Linux/#ubuntu","text":"","title":"Ubuntu"},{"location":"System%20and%20Editor/Linux/#_1","text":"Debian \u6d3e\u7cfb \u2192Ubuntu\u2192Apt Redhat \u6d3e\u7cfb \u2192CentOS\u2192Yum","title":"\u5957\u4ef6\u7ba1\u7406"},{"location":"System%20and%20Editor/Linux/#terminal","text":"","title":"Terminal"},{"location":"System%20and%20Editor/Linux/#call-terminal","text":"ctrl + alt + t","title":"call terminal"},{"location":"System%20and%20Editor/Linux/#clear","text":"ctrl + l","title":"clear"},{"location":"System%20and%20Editor/Linux/#bash","text":"\u9ce5\u54e5\u8a8d\u8b58\u8207\u5b78\u7fd2BASH cmd descriptions pwd \u5217\u51fa\u76ee\u524d\u5b8c\u6574\u8def\u5f91 top cp \u8907\u88fd\u6a94\u6848 tar \u6253\u5305 cat \u628a\u6a94\u6848\u8f38\u51fa\u5230 stdout touch \u5efa\u7acb\u6a94\u6848 touch \"kai-\\$(date +%Y%m%d)\" \u4ee5\u65e5\u671f\u5efa\u6a94 usermod -aG [group][user] add user to group export VAR=value \u8a2d\u5b9a\u74b0\u5883\u8b8a\u6578","title":"Bash"},{"location":"System%20and%20Editor/Linux/#_2","text":"symbol descriptions ; \u9023\u7e8c\u4e0b\u9054\u6307\u4ee4 && \u7576\u6307\u4ee4\u56de\u50b3 1(\u6210\u529f)\u5247\u57f7\u884c\u4e0b\u4e00\u500b\u6307\u4ee4 || \u7576\u524d\u6307\u4ee4\u56de\u50b3 0(\u5931\u6557)\u57f7\u884c\u4e0b\u4e00\u6307\u4ee4 > stdoutput | pipe example cd /home/kai/Desktop/kaitest && touch \"kai-$(date +%d%s)\"","title":"\u4e32\u806f\u6307\u4ee4"},{"location":"System%20and%20Editor/Linux/#disc-usage","text":"du -h","title":"Disc Usage"},{"location":"System%20and%20Editor/Linux/#make","text":"make -n > xxx.sh ssh user@host < xxx.sh \u9060\u7aef\u5168\u5957 sshpass -p $HOST_PWD ssh -o StrictHostKeyChecking=no $WORKER_NAME@$DEPLOY_MACHINE < makerun.sh \u4e0d\u6aa2\u67e5 key\uff0c\u81ea\u52d5\u5316\u597d\u7528 -o StrictHostKeyChecking=no","title":"\u9060\u7aef\u57f7\u884c make \u6307\u4ee4"},{"location":"System%20and%20Editor/Linux/#env-set-export","text":"set: \u76ee\u524dshell\u7684\u74b0\u5883\u8b8a\u6578 env: \u9664\u4e86\u662f\u76ee\u524dshell\u7684\u74b0\u5883\u8b8a\u6578\u4ee5\u5916\uff0c\u80fd\u628a\u9019\u4e9b\u8b8a\u6578\u4e00\u8d77\u5e36\u5230\u76ee\u524dshell\u767c\u8d77\u7684\u5b50\u7a0b\u5f0f export: \u8a2d\u5b9aenv\u8b8a\u6578","title":"env, set export"},{"location":"System%20and%20Editor/Linux/#export-env-from-file","text":"export $(cat env/YOUR_ENV_FILE |xargs)","title":"export env from file"},{"location":"System%20and%20Editor/Linux/#makefile","text":"https://hackmd.io/s/SySTMXPvl \u7279\u5225\u5b57\u5143 @ \u4e0d\u8981\u986f\u793a\u57f7\u884c\u7684\u6307\u4ee4 \u56e0\u57f7\u884c make \u6307\u4ee4\u5f8c\u6703\u5728\u7d42\u7aef\u6a5f\u5370\u51fa\u6b63\u5728\u57f7\u884c\u7684\u6307\u4ee4 - \u8868\u793a\u5373\u4f7f\u8a72\u884c\u6307\u4ee4\u51fa\u932f\uff0c\u4e5f\u4e0d\u6703\u4e2d\u65b7\u57f7\u884c\uff0c\u800c make \u53ea\u8981\u9047\u5230\u4efb\u4f55\u932f\u8aa4\u5c31\u6703\u4e2d\u65b7\u57f7\u884c\u3002\u4f46\u50cf\u662f\u5728\u9032\u884c clean \u6642\uff0c\u4e5f\u8a31\u6839\u672c\u6c92\u6709\u4efb\u4f55\u6a94\u6848\u53ef\u4ee5 clean\uff0c\u56e0\u800c rm \u6703\u50b3\u56de\u932f\u8aa4\u503c\uff0c\u56e0\u800c\u5c0e\u81f4 make \u4e2d\u65b7\u57f7\u884c\u3002\u6211\u5011\u53ef\u4ee5\u5229\u7528-\u4f86\u95dc\u9589\u932f\u8aa4\u4e2d\u65b7\u529f\u80fd\uff0c\u8b93 make \u4e0d\u6703\u56e0\u800c\u4e2d\u65b7\u3002","title":"Makefile"},{"location":"System%20and%20Editor/Linux/#ssh","text":"","title":"SSH"},{"location":"System%20and%20Editor/Linux/#add-ssh-private-key","text":"ssh-add [~/.ssh/id_rsa] \u5982\u679c\u51fa\u73fe @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @ WARNING: UNPROTECTED PRIVATE KEY FILE! @ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ \u8868\u793a\u6b0a\u9650\u958b\u592a\u5927 chmod 0600 [private key file]","title":"Add ssh private key"},{"location":"System%20and%20Editor/Linux/#sshpass","text":"sshpass:\u4e0d\u7528\u4e92\u52d5\u9060\u7aef\u4f7f\u7528 ssh \u4e0b command \u7684\u5de5\u5177 sshpass -p 'mypassword' ssh myaccount@my.linux.host","title":"sshpass"},{"location":"System%20and%20Editor/Linux/#cron-tab","text":"cron -e \u7de8\u8f2f\u8a72\u4f7f\u7528\u8005\u7684 crontab \u6307\u4ee4 cron -l \u5217\u51fa\u8a72\u4f7f\u7528\u8005\u64c1\u6709\u7684 crontab \u6307\u4ee4 cron -r \u5c07\u4f7f\u7528\u8005\u7684 crontab \u5168\u90e8\u6e05\u9664\uff01\uff08 \u5c0f\u5fc3\u4f7f\u7528 \uff09 \u203b \u4e0b\u9054\u6307\u4ee4\u8acb\u7528 \u7d55\u5c0d\u8def\u5f91 \u907f\u514d\u932f\u8aa4 */5 * * * * /home/ubuntu/test.sh\uff1a\u6bcf\u4e94\u5206\u9418\u57f7\u884c\u4e00\u6b21\u6e2c\u8a66 shell script","title":"Cron tab"},{"location":"System%20and%20Editor/Linux/#set-static-ip","text":"\u7528 UI \u9ede","title":"Set static IP"},{"location":"System%20and%20Editor/Linux/#resources","text":"GNU/Linux \u5e38\u7528\u6307\u4ee4","title":"Resources"},{"location":"System%20and%20Editor/Powershell/","text":"PowerShell Notes \u5e38\u7528cmdlet \u78ba\u8a8d\u7248\u672c Get-Host \u53d6\u5f97\u6642\u9593 Get-Date -Format yyyyMMdd # \u5b9a\u7fa9\u4f86\u6e90\u8207\u76ee\u7684\u8cc7\u6599\u593e\u7684\u7d55\u5c0d\u8def\u5f91 $srcfolder = 'C:\\Program Files (x86)\\Bridgewell' #\u6700\u65b0\u6a94\u6848\u7684\u8cc7\u6599\u593e $folderName = 'update' + (Get-Date -Format yyyyMMdd) $tarfolder = 'C:\\Users\\Administrator\\Desktop\\' + $folderName #\u76ee\u7684\u8cc7\u6599\u593e \u6307\u4ee4\u57f7\u884c\u8def\u5f91 Split-Path $MyInvocation.MyCommand.Path script\u8def\u5f91 $PSScriptRoot \u5e38\u7528\u6307\u4ee4 \u6e05\u9664\u756b\u9762(\u8b8a\u6578\u9084\u6703\u5b58\u5728) cls \u958b\u555f\u6307\u4ee4\u76ee\u9304 start . Prompt\u547c\u53ebscript:Invoke-Expression \u7bc4\u4f8b Invoke-Expression c:\\scripts\\test.ps1 & c:\\scripts\\test.ps1 \u50b3\u905eParameter $args[0] $args[1] $args[2] \u9060\u7aefPS Enter-PSSession Server01 Exit-PSSession $secpasswd = ConvertTo-SecureString \"password\" -AsPlainText -Force $mycreds = New-Object System.Management.Automation.PSCredential (\"user\", $secpasswd) Enter-PSSession -ComputerName n196 -Credential $mycreds \u7121\u8cc7\u6599\u593e\u5247\u5efa\u7acb IF (!(Test-Path $FolderToCreate -PathType Container)) { New-Item -ItemType Directory -Force -Path $FolderToCreate } WindowsService net start BWECDataUpdateWindowService net stop BWECDataUpdateWindowService \u5b57\u4e32Slpit, Trim $parts = $content -split '\\n' $parts[0] $parts[1] if ($parts[0].Trim() -eq '@Q@') { 'WTF' } \u8b80\u6a94 $content = [IO.File]::ReadAllText(\".\\test.txt\") Get Assembly Version function get-assembly-version() { param([string] $file) $version = [System.Reflection.AssemblyName]::GetAssemblyName($file).Version; #format the version and output it... $version } \u66ab\u505c pause \u986f\u793a\u901a\u8a0a\u5354\u5b9a\u7d71\u8a08\u8cc7\u6599 nbtstat DNS nslookup How to debug ps1 Write-Host == printf Join-Path Select-String \u78ba\u8a8d\u5ba2\u6236\u7d66\u7684\u5e33\u5bc6\u662f\u5426\u6b63\u78ba runas /u:yourdomain\\a_test_user notepad.exe Exit code Exit 0 Environment Variables in PowerShell $env:<variable_name>","title":"PowerShell Notes"},{"location":"System%20and%20Editor/Powershell/#powershell-notes","text":"","title":"PowerShell Notes"},{"location":"System%20and%20Editor/Powershell/#cmdlet","text":"\u78ba\u8a8d\u7248\u672c Get-Host \u53d6\u5f97\u6642\u9593 Get-Date -Format yyyyMMdd # \u5b9a\u7fa9\u4f86\u6e90\u8207\u76ee\u7684\u8cc7\u6599\u593e\u7684\u7d55\u5c0d\u8def\u5f91 $srcfolder = 'C:\\Program Files (x86)\\Bridgewell' #\u6700\u65b0\u6a94\u6848\u7684\u8cc7\u6599\u593e $folderName = 'update' + (Get-Date -Format yyyyMMdd) $tarfolder = 'C:\\Users\\Administrator\\Desktop\\' + $folderName #\u76ee\u7684\u8cc7\u6599\u593e \u6307\u4ee4\u57f7\u884c\u8def\u5f91 Split-Path $MyInvocation.MyCommand.Path script\u8def\u5f91 $PSScriptRoot","title":"\u5e38\u7528cmdlet"},{"location":"System%20and%20Editor/Powershell/#_1","text":"","title":"\u5e38\u7528\u6307\u4ee4"},{"location":"System%20and%20Editor/Powershell/#_2","text":"cls","title":"\u6e05\u9664\u756b\u9762(\u8b8a\u6578\u9084\u6703\u5b58\u5728)"},{"location":"System%20and%20Editor/Powershell/#_3","text":"start .","title":"\u958b\u555f\u6307\u4ee4\u76ee\u9304"},{"location":"System%20and%20Editor/Powershell/#promptscriptinvoke-expression","text":"\u7bc4\u4f8b Invoke-Expression c:\\scripts\\test.ps1 & c:\\scripts\\test.ps1","title":"Prompt\u547c\u53ebscript:Invoke-Expression"},{"location":"System%20and%20Editor/Powershell/#parameter","text":"$args[0] $args[1] $args[2]","title":"\u50b3\u905eParameter"},{"location":"System%20and%20Editor/Powershell/#ps","text":"Enter-PSSession Server01 Exit-PSSession $secpasswd = ConvertTo-SecureString \"password\" -AsPlainText -Force $mycreds = New-Object System.Management.Automation.PSCredential (\"user\", $secpasswd) Enter-PSSession -ComputerName n196 -Credential $mycreds","title":"\u9060\u7aefPS"},{"location":"System%20and%20Editor/Powershell/#_4","text":"IF (!(Test-Path $FolderToCreate -PathType Container)) { New-Item -ItemType Directory -Force -Path $FolderToCreate }","title":"\u7121\u8cc7\u6599\u593e\u5247\u5efa\u7acb"},{"location":"System%20and%20Editor/Powershell/#windowsservice","text":"net start BWECDataUpdateWindowService net stop BWECDataUpdateWindowService","title":"WindowsService"},{"location":"System%20and%20Editor/Powershell/#slpit-trim","text":"$parts = $content -split '\\n' $parts[0] $parts[1] if ($parts[0].Trim() -eq '@Q@') { 'WTF' }","title":"\u5b57\u4e32Slpit, Trim"},{"location":"System%20and%20Editor/Powershell/#_5","text":"$content = [IO.File]::ReadAllText(\".\\test.txt\")","title":"\u8b80\u6a94"},{"location":"System%20and%20Editor/Powershell/#get-assembly-version","text":"function get-assembly-version() { param([string] $file) $version = [System.Reflection.AssemblyName]::GetAssemblyName($file).Version; #format the version and output it... $version }","title":"Get Assembly Version"},{"location":"System%20and%20Editor/Powershell/#_6","text":"pause","title":"\u66ab\u505c"},{"location":"System%20and%20Editor/Powershell/#_7","text":"nbtstat","title":"\u986f\u793a\u901a\u8a0a\u5354\u5b9a\u7d71\u8a08\u8cc7\u6599"},{"location":"System%20and%20Editor/Powershell/#dns","text":"nslookup","title":"DNS"},{"location":"System%20and%20Editor/Powershell/#how-to-debug-ps1","text":"Write-Host == printf Join-Path Select-String","title":"How to debug ps1"},{"location":"System%20and%20Editor/Powershell/#_8","text":"runas /u:yourdomain\\a_test_user notepad.exe","title":"\u78ba\u8a8d\u5ba2\u6236\u7d66\u7684\u5e33\u5bc6\u662f\u5426\u6b63\u78ba"},{"location":"System%20and%20Editor/Powershell/#exit-code","text":"Exit 0","title":"Exit code"},{"location":"System%20and%20Editor/Powershell/#environment-variables-in-powershell","text":"$env:<variable_name>","title":"Environment Variables in PowerShell"},{"location":"System%20and%20Editor/Vim/","text":"Vim u undo i editor mode ctrl-R redo set nu vim rc clear all gg dG when exit cmd description :q to quit (short for :quit) :q! to quit without saving (short for :quit!) :wq to write and quit :wq! to write and quit even if file has only read permission (if file does not have write permission: force write) :x to write and quit (similar to :wq, but only write if there are changes) :exit to write and exit (same as :x) :qa to quit all (short for :quitall) :cq to quit without saving and make Vim return non-zero error (i.e. exit with error)","title":"Vim"},{"location":"System%20and%20Editor/Vim/#vim","text":"u undo i editor mode ctrl-R redo set nu vim rc","title":"Vim"},{"location":"System%20and%20Editor/Vim/#clear-all","text":"gg dG","title":"clear all"},{"location":"System%20and%20Editor/Vim/#when-exit","text":"cmd description :q to quit (short for :quit) :q! to quit without saving (short for :quit!) :wq to write and quit :wq! to write and quit even if file has only read permission (if file does not have write permission: force write) :x to write and quit (similar to :wq, but only write if there are changes) :exit to write and exit (same as :x) :qa to quit all (short for :quitall) :cq to quit without saving and make Vim return non-zero error (i.e. exit with error)","title":"when exit"},{"location":"System%20and%20Editor/VisualStudio/","text":"VisualStudio Package Dependency \u6703\u4ee5\u6700\u4e0a\u5c64\u7684\u7a0b\u5f0f\u4f7f\u7528\u7684\u7248\u672c\u70ba\u6e96 \u5e95\u5c64\u7684\u5143\u4ef6\u8ddf\u4e0a\u5c64\u7684package\u7248\u672c\u4e0d\u7b26\u6703\u8df3error \u5c31\u7b97\u662f\u88e1\u9762\u6c92\u6709\u7528\u5230\u8a72package \u5728\u6700\u5916\u5c64\u5c08\u6848\u80fd\u770b\u6240\u6709\u5e95\u4e0b\u7a0b\u5f0f\u4f7f\u7528\u7684package\u7248\u672c Specflow lose track Exit Visual Studio. Open Windows Explorer. In the address bar, type %TEMP% and hit Enter to go to your temp folder. Find the files whose names start with \"specflow-stepmap-YourProjectName\" with a .cache extension. Delete those files. Start Visual Studio again. \u5c07\u932f\u8aa4\u8a0a\u606f\u8f49\u6210\u82f1\u6587 System.Threading.Thread.CurrentThread.CurrentCulture = System.Globalization.CultureInfo.CreateSpecificCulture(\"en-US\"); System.Threading.Thread.CurrentThread.CurrentUICulture = new System.Globalization.CultureInfo(\"en-US\");","title":"VisualStudio"},{"location":"System%20and%20Editor/VisualStudio/#visualstudio","text":"","title":"VisualStudio"},{"location":"System%20and%20Editor/VisualStudio/#package-dependency","text":"\u6703\u4ee5\u6700\u4e0a\u5c64\u7684\u7a0b\u5f0f\u4f7f\u7528\u7684\u7248\u672c\u70ba\u6e96 \u5e95\u5c64\u7684\u5143\u4ef6\u8ddf\u4e0a\u5c64\u7684package\u7248\u672c\u4e0d\u7b26\u6703\u8df3error \u5c31\u7b97\u662f\u88e1\u9762\u6c92\u6709\u7528\u5230\u8a72package \u5728\u6700\u5916\u5c64\u5c08\u6848\u80fd\u770b\u6240\u6709\u5e95\u4e0b\u7a0b\u5f0f\u4f7f\u7528\u7684package\u7248\u672c","title":"Package Dependency"},{"location":"System%20and%20Editor/VisualStudio/#specflow-lose-track","text":"Exit Visual Studio. Open Windows Explorer. In the address bar, type %TEMP% and hit Enter to go to your temp folder. Find the files whose names start with \"specflow-stepmap-YourProjectName\" with a .cache extension. Delete those files. Start Visual Studio again.","title":"Specflow lose track"},{"location":"System%20and%20Editor/VisualStudio/#_1","text":"System.Threading.Thread.CurrentThread.CurrentCulture = System.Globalization.CultureInfo.CreateSpecificCulture(\"en-US\"); System.Threading.Thread.CurrentThread.CurrentUICulture = new System.Globalization.CultureInfo(\"en-US\");","title":"\u5c07\u932f\u8aa4\u8a0a\u606f\u8f49\u6210\u82f1\u6587"},{"location":"System%20and%20Editor/Windows%20Cmd/","text":"Windows Cmd \u57f7\u884c\u5b8c\u547d\u4ee4\u5f8c\u4e0d\u95dc\u9589\u7a97\u53e3\uff1a cmd /k dir \u53ef\u7528\u4f86combo\u5728\u6377\u5f91\u7684\u76ee\u6a19\u5167\u5275\u9020\u51fa\u9810\u8a2d\u597d\u8def\u5f91\u7684\u6377\u5f91\uff1a %windir%\\system32\\cmd.exe /k \"C:\\Program Files (x86)\\NUnit.org\\nunit-console\\nunit_console.bat\" \u770b\u5404port\u958b\u555f\u4e86\u54ea\u4e9b\u670d\u52d9 netstat -a netstat -ant | find \":80\" \u5728\u4e2d\u6587\u7248Windows\u4e2d\uff0cCommand Prompt\u9810\u8a2d\u4f7f\u7528BIG5\u7de8\u78bc\uff0c\u56e0\u6b64\u6aa2\u8996UTF-8\u7de8\u78bc\u6a94\u6848\u6642\u6703\u51fa\u73fe\u4e82\u78bc\u3002\u4f7f\u7528chcp\u5207\u63db\u8a9e\u7cfb\u6210UTF-8 chcp 65001","title":"Windows Cmd"},{"location":"System%20and%20Editor/Windows%20Cmd/#windows-cmd","text":"\u57f7\u884c\u5b8c\u547d\u4ee4\u5f8c\u4e0d\u95dc\u9589\u7a97\u53e3\uff1a cmd /k dir \u53ef\u7528\u4f86combo\u5728\u6377\u5f91\u7684\u76ee\u6a19\u5167\u5275\u9020\u51fa\u9810\u8a2d\u597d\u8def\u5f91\u7684\u6377\u5f91\uff1a %windir%\\system32\\cmd.exe /k \"C:\\Program Files (x86)\\NUnit.org\\nunit-console\\nunit_console.bat\" \u770b\u5404port\u958b\u555f\u4e86\u54ea\u4e9b\u670d\u52d9 netstat -a netstat -ant | find \":80\" \u5728\u4e2d\u6587\u7248Windows\u4e2d\uff0cCommand Prompt\u9810\u8a2d\u4f7f\u7528BIG5\u7de8\u78bc\uff0c\u56e0\u6b64\u6aa2\u8996UTF-8\u7de8\u78bc\u6a94\u6848\u6642\u6703\u51fa\u73fe\u4e82\u78bc\u3002\u4f7f\u7528chcp\u5207\u63db\u8a9e\u7cfb\u6210UTF-8 chcp 65001","title":"Windows Cmd"},{"location":"System%20and%20Editor/cmd%20vs%20bash/","text":"Cmd vs Bash Unix Windows Description Example cd cd \u9032\u5165\u76ee\u9304 cd .. mkdir md \u958b\u5b50\u76ee\u8def mkdir hello pwd cd \u986f\u793a\u5e55\u524d\u76ee\u9304 pwd env set \u986f\u793a\u5e55\u524d\u74b0\u5883\u8b8a\u6578 env setenv set \u8a2d\u5b9a\u74b0\u5883\u8b8a\u6578 setenv pp pwd rm del \u522a\u9664\u6a94\u6848 rm -r hello cat/more type \u986f\u793a\u6a94\u6848\u5167\u5bb9 more .login ls dir \u986f\u793a\u6a94\u6848 ls cp copy \u8907\u88fd\u6a94\u6848 cp .login anotherfile mv ren \u79fb\u52d5/\u91cd\u65b0\u547d\u540d\u6a94\u6848 mv .login .login.orig man help \u7dda\u4e0a\u6307\u4ee4\u67e5\u8a62 man ps ps \u986f\u793a process - Windows CMD https://ss64.com/nt/","title":"Cmd vs Bash"},{"location":"System%20and%20Editor/cmd%20vs%20bash/#cmd-vs-bash","text":"Unix Windows Description Example cd cd \u9032\u5165\u76ee\u9304 cd .. mkdir md \u958b\u5b50\u76ee\u8def mkdir hello pwd cd \u986f\u793a\u5e55\u524d\u76ee\u9304 pwd env set \u986f\u793a\u5e55\u524d\u74b0\u5883\u8b8a\u6578 env setenv set \u8a2d\u5b9a\u74b0\u5883\u8b8a\u6578 setenv pp pwd rm del \u522a\u9664\u6a94\u6848 rm -r hello cat/more type \u986f\u793a\u6a94\u6848\u5167\u5bb9 more .login ls dir \u986f\u793a\u6a94\u6848 ls cp copy \u8907\u88fd\u6a94\u6848 cp .login anotherfile mv ren \u79fb\u52d5/\u91cd\u65b0\u547d\u540d\u6a94\u6848 mv .login .login.orig man help \u7dda\u4e0a\u6307\u4ee4\u67e5\u8a62 man ps ps \u986f\u793a process -","title":"Cmd vs Bash"},{"location":"System%20and%20Editor/cmd%20vs%20bash/#windows-cmd","text":"https://ss64.com/nt/","title":"Windows CMD"},{"location":"Web/Frontend/","text":"Frontend Package Management NPM \u5f9epackage.json\u5148\u5f9e\u9019\u88e1\u958b\u59cb\u770b \u521d\u59cb npm init \u9084\u539f npm install Javascript IIFE(Immediately Invoked Function Expression) Strict Mode Prototype Hoisting Polyfill Transpiler Arrow Function let, const, var CDN uglify feautify Roadmap HTML Emmet(\u5bebhtml) Pug(\u5207\u7248) CSS JavaScript \u76f8\u5bb9\u6027(jQuery) CSS preprocessor\uff0c\u5e38\u7528\u7684\uff1aSCSS/SASS\u3001Less \u8ddf Stylus) mixin, PostCSS Autoprefixer browserify(var A = require(\u2018libraryA\u2019)) Gulp(\u7528\u7a0b\u5f0f\u78bc\u4f86\u7ba1\u7406\u4f60\u7684 workflow) babel webpack \u5728\u5b78 React \u4ee5\u524d\uff0c\u53ea\u5e0c\u671b\u4f60\u8a18\u5f97 React \u7684\u9019\u500b\u6838\u5fc3\u6982\u5ff5\u5c31\u597d\uff1a\u53ea\u6539\u8b8a state \u5c31\u597d\uff0cUI \u5c31\u6703\u81ea\u52d5\u8ddf\u8457\u6539\u8b8a\u3002 \u9019\u500b\u6982\u5ff5\u5c31\u53eb\u505a SPA\uff0c\u5168\u540d\u662f Single Page Application\uff0c\u55ae\u9801\u5f0f\u61c9\u7528\u3002\u8207\u4e4b\u5c0d\u61c9\u7684\u6982\u5ff5\u662f MPA\uff0cMultiple Page Application\u3002 CSR vs SSR MVC \u5c31\u662f\u56e0\u70ba code \u8b8a\u5f97\u8d8a\u4f86\u8d8a\u4e82\uff0c\u6240\u4ee5\u5c07\u8077\u8cac\u5340\u5206\u6e05\u695a\u7684\u4e00\u7a2e\u8a2d\u8a08\u6a21\u5f0f\u3002SPA \u5c31\u662f\u56e0\u70ba\u60f3\u589e\u9032\u4f7f\u7528\u8005\u9ad4\u9a57\uff0c\u800c\u51fa\u73fe\u7684\u4e00\u7a2e\u5728\u524d\u7aef\u5229\u7528 Ajax \u9054\u6210\u4e0d\u63db\u9801\u7684\u65b9\u6cd5\u3002SSR \u5c31\u662f\u56e0\u70ba\u8981\u89e3\u6c7a SPA \u7684 SEO \u554f\u984c\u800c\u51fa\u73fe\u7684\u89e3\u6cd5\u3002 react: virtual dom\u70ba\u4ec0\u9ebc\u53ef\u4ee5\u641c\u9019\u9ebc\u5feb bookmarklet How to Create a JavaScript Bookmarklet \u52d5\u614b\u7522\u751fhtml tags document.open(); document.write(); document.close(); iframe = document.createElement('iframe'); iframe.src = src; document.appendChild(iframe); HTML5 Imports: Import HTML Files Into HTML Files Blob \u52d5\u614b\u8f09\u5165JS source = document.createElement('script'); source.async = true; source.src = src; \u8207iframe\u4e92\u52d5 iframe.contentWindow.postMessage(message, targetOrigin); \u5224\u65b7\u5b58\u4e0d\u5b58\u5728 array.indexOf(x) > -1 Browser Support caniuse ECMAScript 5 compatibility table Testing Karma Javascript Prototype Chain JavaScript's Pseudo Classical Inheritance diagram","title":"Frontend"},{"location":"Web/Frontend/#frontend","text":"","title":"Frontend"},{"location":"Web/Frontend/#package-management","text":"","title":"Package Management"},{"location":"Web/Frontend/#npm","text":"\u5f9epackage.json\u5148\u5f9e\u9019\u88e1\u958b\u59cb\u770b \u521d\u59cb npm init \u9084\u539f npm install","title":"NPM"},{"location":"Web/Frontend/#javascript","text":"IIFE(Immediately Invoked Function Expression) Strict Mode Prototype Hoisting Polyfill Transpiler Arrow Function let, const, var CDN uglify feautify","title":"Javascript"},{"location":"Web/Frontend/#roadmap","text":"HTML Emmet(\u5bebhtml) Pug(\u5207\u7248) CSS JavaScript \u76f8\u5bb9\u6027(jQuery) CSS preprocessor\uff0c\u5e38\u7528\u7684\uff1aSCSS/SASS\u3001Less \u8ddf Stylus) mixin, PostCSS Autoprefixer browserify(var A = require(\u2018libraryA\u2019)) Gulp(\u7528\u7a0b\u5f0f\u78bc\u4f86\u7ba1\u7406\u4f60\u7684 workflow) babel webpack \u5728\u5b78 React \u4ee5\u524d\uff0c\u53ea\u5e0c\u671b\u4f60\u8a18\u5f97 React \u7684\u9019\u500b\u6838\u5fc3\u6982\u5ff5\u5c31\u597d\uff1a\u53ea\u6539\u8b8a state \u5c31\u597d\uff0cUI \u5c31\u6703\u81ea\u52d5\u8ddf\u8457\u6539\u8b8a\u3002 \u9019\u500b\u6982\u5ff5\u5c31\u53eb\u505a SPA\uff0c\u5168\u540d\u662f Single Page Application\uff0c\u55ae\u9801\u5f0f\u61c9\u7528\u3002\u8207\u4e4b\u5c0d\u61c9\u7684\u6982\u5ff5\u662f MPA\uff0cMultiple Page Application\u3002 CSR vs SSR MVC \u5c31\u662f\u56e0\u70ba code \u8b8a\u5f97\u8d8a\u4f86\u8d8a\u4e82\uff0c\u6240\u4ee5\u5c07\u8077\u8cac\u5340\u5206\u6e05\u695a\u7684\u4e00\u7a2e\u8a2d\u8a08\u6a21\u5f0f\u3002SPA \u5c31\u662f\u56e0\u70ba\u60f3\u589e\u9032\u4f7f\u7528\u8005\u9ad4\u9a57\uff0c\u800c\u51fa\u73fe\u7684\u4e00\u7a2e\u5728\u524d\u7aef\u5229\u7528 Ajax \u9054\u6210\u4e0d\u63db\u9801\u7684\u65b9\u6cd5\u3002SSR \u5c31\u662f\u56e0\u70ba\u8981\u89e3\u6c7a SPA \u7684 SEO \u554f\u984c\u800c\u51fa\u73fe\u7684\u89e3\u6cd5\u3002 react: virtual dom\u70ba\u4ec0\u9ebc\u53ef\u4ee5\u641c\u9019\u9ebc\u5feb bookmarklet How to Create a JavaScript Bookmarklet","title":"Roadmap"},{"location":"Web/Frontend/#html-tags","text":"document.open(); document.write(); document.close(); iframe = document.createElement('iframe'); iframe.src = src; document.appendChild(iframe); HTML5 Imports: Import HTML Files Into HTML Files Blob","title":"\u52d5\u614b\u7522\u751fhtml tags"},{"location":"Web/Frontend/#js","text":"source = document.createElement('script'); source.async = true; source.src = src;","title":"\u52d5\u614b\u8f09\u5165JS"},{"location":"Web/Frontend/#iframe","text":"iframe.contentWindow.postMessage(message, targetOrigin);","title":"\u8207iframe\u4e92\u52d5"},{"location":"Web/Frontend/#_1","text":"array.indexOf(x) > -1","title":"\u5224\u65b7\u5b58\u4e0d\u5b58\u5728"},{"location":"Web/Frontend/#browser-support","text":"caniuse ECMAScript 5 compatibility table","title":"Browser Support"},{"location":"Web/Frontend/#testing","text":"Karma","title":"Testing"},{"location":"Web/Frontend/#javascript-prototype-chain","text":"JavaScript's Pseudo Classical Inheritance diagram","title":"Javascript Prototype Chain"},{"location":"Web/Nodejs/","text":"Nodejs \u6982\u5ff5 \u4e8b\u4ef6\u8ff4\u5708 \u975e\u963b\u65b7\u5f0fIO \u4e26\u884c\u6a21\u578b\u548c\u4e8b\u4ef6\u5faa\u74b0 \u5176\u4ed6\u4e3b\u984c \u6311\u6230\u700f\u89bd\u5668\u6975\u9650 Chrome Experiments JS Linux VM jslinux The C10K problem DIRTy\u7684\u597d\u7bc4\u4f8b Browserling data intensive real-time applications (dirt) Node.js \u958b\u767c\u4e4b\u7236\uff1a\u300c\u5341\u500bNode.js \u7684\u8a2d\u8a08\u932f\u8aa4\u300d\uff0d \u4ee5\u53ca\u5176\u7d42\u6975\u89e3\u6c7a\u8fa6\u6cd5","title":"Nodejs"},{"location":"Web/Nodejs/#nodejs","text":"","title":"Nodejs"},{"location":"Web/Nodejs/#_1","text":"\u4e8b\u4ef6\u8ff4\u5708 \u975e\u963b\u65b7\u5f0fIO \u4e26\u884c\u6a21\u578b\u548c\u4e8b\u4ef6\u5faa\u74b0","title":"\u6982\u5ff5"},{"location":"Web/Nodejs/#_2","text":"\u6311\u6230\u700f\u89bd\u5668\u6975\u9650 Chrome Experiments JS Linux VM jslinux The C10K problem DIRTy\u7684\u597d\u7bc4\u4f8b Browserling data intensive real-time applications (dirt) Node.js \u958b\u767c\u4e4b\u7236\uff1a\u300c\u5341\u500bNode.js \u7684\u8a2d\u8a08\u932f\u8aa4\u300d\uff0d \u4ee5\u53ca\u5176\u7d42\u6975\u89e3\u6c7a\u8fa6\u6cd5","title":"\u5176\u4ed6\u4e3b\u984c"},{"location":"Web/readme/","text":"Web Docs CSS CSS in JS styled component storybook Resources MDN web docs W3school JavaScript.info codecademy Learn to Code HTML & CSS javascript-html5-tutorial.net Web Google \u524d\u7aef\u52d5\u756b\u5eab\u61f6\u4eba\u5305 The shared component cloud \u00b7 Bit 9 Top JS Gaming Engines and Libraries for 2020 V8 JavaScript engine clean-code-javascript Books You Don't Know JS Learning JavaScript Design Pattern Blogs What the f*ck JavaScript? \u96f6\u57fa\u790e\u7684\u5c0f\u660e\u8981\u5982\u4f55\u6210\u70ba\u524d\u7aef\u5de5\u7a0b\u5e2b\uff1f alert(1) to win A Complete Beginner\u2019s Guide to React Shubo's Notes Front-end Developer Handbook 2019 \u2461ality \u2013 JavaScript and more JavaScript.isSexy","title":"Web Docs"},{"location":"Web/readme/#web-docs","text":"","title":"Web Docs"},{"location":"Web/readme/#css","text":"CSS in JS styled component storybook","title":"CSS"},{"location":"Web/readme/#resources","text":"MDN web docs W3school JavaScript.info codecademy Learn to Code HTML & CSS javascript-html5-tutorial.net Web Google \u524d\u7aef\u52d5\u756b\u5eab\u61f6\u4eba\u5305 The shared component cloud \u00b7 Bit 9 Top JS Gaming Engines and Libraries for 2020 V8 JavaScript engine clean-code-javascript","title":"Resources"},{"location":"Web/readme/#books","text":"You Don't Know JS Learning JavaScript Design Pattern","title":"Books"},{"location":"Web/readme/#blogs","text":"What the f*ck JavaScript? \u96f6\u57fa\u790e\u7684\u5c0f\u660e\u8981\u5982\u4f55\u6210\u70ba\u524d\u7aef\u5de5\u7a0b\u5e2b\uff1f alert(1) to win A Complete Beginner\u2019s Guide to React Shubo's Notes Front-end Developer Handbook 2019 \u2461ality \u2013 JavaScript and more JavaScript.isSexy","title":"Blogs"},{"location":"Web/codecademy/CSS/","text":"Learn CSS Intro to CSS The basic structure of every web page, HTML, is very plain on its own. The beautiful websites that you see across the internet are styled with a variety of tools, including CSS. CSS, or Cascading Style Sheets, is a language that web developers use to style the HTML content on a web page. If you\u2019re interested in modifying colors, font types, font sizes, shadows, images, element positioning, and more, CSS is the tool for the job! Inline Styles Although CSS is a different language than HTML, it\u2019s possible to write CSS code directly within HTML code using inline styles . <p style=\"color: red;\">I'm learning to code!</p> If you\u2019d like to add more than one style with inline styles, simply keep adding to the style attribute. Make sure to end the styles with a semicolon ( ; ). <p style=\"color: red; font-size: 20px;\">I'm learning to code!</p> The <style> Tag HTML allows you to write CSS code in its own dedicated section with the <style> element. CSS can be written between opening and closing <style> tags. To use the <style> element, it must be placed inside of the <head> element. <head> <style> p { color: red; font-size: 20px; } </style> </head> The .css file You can create a CSS file by using the .css file name extension, like so: style.css With a CSS file, you can write all the CSS code needed to style a page without sacrificing the readability and maintainability of your HTML file. Linking the CSS File Use the <link> element to link HTML and CSS files together. The <link> element must be placed within the head of the HTML file. It is a self-closing tag and requires the following three attributes: href \u2014 like the anchor element, the value of this attribute must be the address, or path, to the CSS file. type \u2014 this attribute describes the type of document that you are linking to (in this case, a CSS file). The value of this attribute should be set to text/css . rel \u2014 this attribute describes the relationship between the HTML file and the CSS file. Because you are linking to a stylesheet, the value should be set to stylesheet . <link href=\"https://www.codecademy.com/stylesheets/style.css\" type=\"text/css\" rel=\"stylesheet\"> <link href=\"./style.css\" type=\"text/css\" rel=\"stylesheet\"> Tag Name CSS can select HTML elements by using an element\u2019s tag name. A tag name is the word (or character) between HTML angle brackets. p { } In the example above, all paragraph elements will be selected using a CSS selector . The selector in the example above is p . Note that the CSS selector matches the HTML tag for that element, but without the angle brackets. In addition, two curly braces follow immediately after the selector (an opening and closing brace, respectively). Any CSS properties will go inside of the curly braces to style the selected elements. Class Name CSS is not limited to selecting elements by tag name. HTML elements can have more than just a tag name; they can also have attributes . One common attribute is the class attribute. It\u2019s also possible to select an element by its class attribute. <p class=\"brand\">Sole Shoe Company</p> .brand { } To select an HTML element by its class using CSS, a period ( . ) must be prepended to the class\u2019s name. In the example above case, the class is brand , so the CSS selector for it is .brand . Multiple Classes It\u2019s possible to add more than one class name to an HTML element\u2019s class attribute. .green { color: green; } .bold { font-weight: bold; } <h1 class=\"green bold\"> ... </h1> We can add multiple classes to an HTML element\u2019s class attribute by separating them with a space. This enables us to mix and match CSS classes to create many unique styles without writing a custom class for every style combination needed. ID Name If an HTML element needs to be styled uniquely (no matter what classes are applied to the element), we can add an ID to the element. Then, CSS can select HTML elements by their id attribute. To select an id element, CSS prepends the id name with a hashtag ( # ). <h1 id=\"large-title\"> ... </h1> #large-title { } Classes and IDs CSS can select HTML elements by their tag, class, and ID. CSS classes and IDs have different purposes, which can affect which one you use to style HTML elements. CSS classes are meant to be reused over many elements. By writing CSS classes, you can style elements in a variety of ways by mixing classes on HTML elements. While classes are meant to be used many times, an ID is meant to style only one element. As we\u2019ll learn in the next exercise, IDs override the styles of tags and classes. Since IDs override class and tag styles, they should be used sparingly and only on elements that need to always appear the same. Specificity Specificity is the order by which the browser decides which CSS styles will be displayed. A best practice in CSS is to style elements while using the lowest degree of specificity, so that if an element needs a new style, it is easy to override. IDs are the most specific selector in CSS, followed by classes, and finally, tags. To make styles easy to edit, it\u2019s best to style with a tag selector, if possible. If not, add a class selector. If that is not specific enough, then consider using an ID selector. Chaining Selectors When writing CSS rules, it\u2019s possible to require an HTML element to have two or more CSS selectors at the same time. This is done by combining multiple selectors, which we will refer to as chaining. For instance, if there was a .special class for h1 elements, the CSS would look like: h1.special { } Nested Elements <ul class='main-list'> <li> ... </li> <li> ... </li> <li> ... </li> </ul> The nested elements are selected with the following CSS(note the space in the selector): .main-list li { } Selecting elements in this way can make our selectors even more specific by making sure they appear in the context we expect. We can target deeply nested child elements. While we can target arbitrarily nested elements with the descendant selector , in practice we should aim to keep our selectors short. As a very general rule of thumb, if our descendant selectors start to become greater than 3 levels deep we may want to consider ways to more specifically target the element in question. For example, perhaps we can throw a class on the targeted element instead of using a deeply nested selector. Chaining and Specificity A chained or qualified selector has a higher specificity than a class selector but a lower specificity than the id selector Adding more than one tag, class, or ID to a CSS selector increases the specificity of the CSS selector. The order of specificity from highest to lowest is: id selector ( #main ) descendant selector and chained or qualified selector ( .main p and p.main ) Specificity Calculator Important There is one thing that is even more specific than IDs: !important . !important can be applied to specific attributes instead of full rules. It will override any style no matter how specific it is. As a result, it should almost never be used. Once !important is used, it is very hard to override. Multiple Selectors In order to make CSS more concise, it\u2019s possible to add CSS styles to multiple CSS selectors all at once. This prevents writing repetitive code. h1, .menu { font-family: Georgia; } Review CSS Selectors Throughout this lesson, you learned how to select HTML elements with CSS and apply styles to them. Let\u2019s review what you learned: CSS can change the look of HTML elements. In order to do this, CSS must select HTML elements, then apply styles to them. CSS ca\u3112n select HTML elements by tag, class, or ID. Multiple CSS classes can be applied to one HTML element. Classes can be reusable, while IDs can only be used once. IDs are more specific than classes, and classes are more specific than tags. That means IDs will override any styles from a class, and classes will override any styles from a tag selector. Multiple selectors can be chained together to select an element. This raises the specificity, but can be necessary. Nested elements can be selected by separating selectors with a space. The !important flag will override any style, however it should almost never be used, as it is extremely difficult to override. Multiple unrelated selectors can receive the same styles by separating the selector names with commas.","title":"Learn CSS"},{"location":"Web/codecademy/CSS/#learn-css","text":"","title":"Learn CSS"},{"location":"Web/codecademy/CSS/#intro-to-css","text":"The basic structure of every web page, HTML, is very plain on its own. The beautiful websites that you see across the internet are styled with a variety of tools, including CSS. CSS, or Cascading Style Sheets, is a language that web developers use to style the HTML content on a web page. If you\u2019re interested in modifying colors, font types, font sizes, shadows, images, element positioning, and more, CSS is the tool for the job!","title":"Intro to CSS"},{"location":"Web/codecademy/CSS/#inline-styles","text":"Although CSS is a different language than HTML, it\u2019s possible to write CSS code directly within HTML code using inline styles . <p style=\"color: red;\">I'm learning to code!</p> If you\u2019d like to add more than one style with inline styles, simply keep adding to the style attribute. Make sure to end the styles with a semicolon ( ; ). <p style=\"color: red; font-size: 20px;\">I'm learning to code!</p>","title":"Inline Styles"},{"location":"Web/codecademy/CSS/#the-style-tag","text":"HTML allows you to write CSS code in its own dedicated section with the <style> element. CSS can be written between opening and closing <style> tags. To use the <style> element, it must be placed inside of the <head> element. <head> <style> p { color: red; font-size: 20px; } </style> </head>","title":"The &lt;style&gt; Tag"},{"location":"Web/codecademy/CSS/#the-css-file","text":"You can create a CSS file by using the .css file name extension, like so: style.css With a CSS file, you can write all the CSS code needed to style a page without sacrificing the readability and maintainability of your HTML file.","title":"The .css file"},{"location":"Web/codecademy/CSS/#linking-the-css-file","text":"Use the <link> element to link HTML and CSS files together. The <link> element must be placed within the head of the HTML file. It is a self-closing tag and requires the following three attributes: href \u2014 like the anchor element, the value of this attribute must be the address, or path, to the CSS file. type \u2014 this attribute describes the type of document that you are linking to (in this case, a CSS file). The value of this attribute should be set to text/css . rel \u2014 this attribute describes the relationship between the HTML file and the CSS file. Because you are linking to a stylesheet, the value should be set to stylesheet . <link href=\"https://www.codecademy.com/stylesheets/style.css\" type=\"text/css\" rel=\"stylesheet\"> <link href=\"./style.css\" type=\"text/css\" rel=\"stylesheet\">","title":"Linking the CSS File"},{"location":"Web/codecademy/CSS/#tag-name","text":"CSS can select HTML elements by using an element\u2019s tag name. A tag name is the word (or character) between HTML angle brackets. p { } In the example above, all paragraph elements will be selected using a CSS selector . The selector in the example above is p . Note that the CSS selector matches the HTML tag for that element, but without the angle brackets. In addition, two curly braces follow immediately after the selector (an opening and closing brace, respectively). Any CSS properties will go inside of the curly braces to style the selected elements.","title":"Tag Name"},{"location":"Web/codecademy/CSS/#class-name","text":"CSS is not limited to selecting elements by tag name. HTML elements can have more than just a tag name; they can also have attributes . One common attribute is the class attribute. It\u2019s also possible to select an element by its class attribute. <p class=\"brand\">Sole Shoe Company</p> .brand { } To select an HTML element by its class using CSS, a period ( . ) must be prepended to the class\u2019s name. In the example above case, the class is brand , so the CSS selector for it is .brand .","title":"Class Name"},{"location":"Web/codecademy/CSS/#multiple-classes","text":"It\u2019s possible to add more than one class name to an HTML element\u2019s class attribute. .green { color: green; } .bold { font-weight: bold; } <h1 class=\"green bold\"> ... </h1> We can add multiple classes to an HTML element\u2019s class attribute by separating them with a space. This enables us to mix and match CSS classes to create many unique styles without writing a custom class for every style combination needed.","title":"Multiple Classes"},{"location":"Web/codecademy/CSS/#id-name","text":"If an HTML element needs to be styled uniquely (no matter what classes are applied to the element), we can add an ID to the element. Then, CSS can select HTML elements by their id attribute. To select an id element, CSS prepends the id name with a hashtag ( # ). <h1 id=\"large-title\"> ... </h1> #large-title { }","title":"ID Name"},{"location":"Web/codecademy/CSS/#classes-and-ids","text":"CSS can select HTML elements by their tag, class, and ID. CSS classes and IDs have different purposes, which can affect which one you use to style HTML elements. CSS classes are meant to be reused over many elements. By writing CSS classes, you can style elements in a variety of ways by mixing classes on HTML elements. While classes are meant to be used many times, an ID is meant to style only one element. As we\u2019ll learn in the next exercise, IDs override the styles of tags and classes. Since IDs override class and tag styles, they should be used sparingly and only on elements that need to always appear the same.","title":"Classes and IDs"},{"location":"Web/codecademy/CSS/#specificity","text":"Specificity is the order by which the browser decides which CSS styles will be displayed. A best practice in CSS is to style elements while using the lowest degree of specificity, so that if an element needs a new style, it is easy to override. IDs are the most specific selector in CSS, followed by classes, and finally, tags. To make styles easy to edit, it\u2019s best to style with a tag selector, if possible. If not, add a class selector. If that is not specific enough, then consider using an ID selector.","title":"Specificity"},{"location":"Web/codecademy/CSS/#chaining-selectors","text":"When writing CSS rules, it\u2019s possible to require an HTML element to have two or more CSS selectors at the same time. This is done by combining multiple selectors, which we will refer to as chaining. For instance, if there was a .special class for h1 elements, the CSS would look like: h1.special { }","title":"Chaining Selectors"},{"location":"Web/codecademy/CSS/#nested-elements","text":"<ul class='main-list'> <li> ... </li> <li> ... </li> <li> ... </li> </ul> The nested elements are selected with the following CSS(note the space in the selector): .main-list li { } Selecting elements in this way can make our selectors even more specific by making sure they appear in the context we expect. We can target deeply nested child elements. While we can target arbitrarily nested elements with the descendant selector , in practice we should aim to keep our selectors short. As a very general rule of thumb, if our descendant selectors start to become greater than 3 levels deep we may want to consider ways to more specifically target the element in question. For example, perhaps we can throw a class on the targeted element instead of using a deeply nested selector.","title":"Nested Elements"},{"location":"Web/codecademy/CSS/#chaining-and-specificity","text":"A chained or qualified selector has a higher specificity than a class selector but a lower specificity than the id selector Adding more than one tag, class, or ID to a CSS selector increases the specificity of the CSS selector. The order of specificity from highest to lowest is: id selector ( #main ) descendant selector and chained or qualified selector ( .main p and p.main ) Specificity Calculator","title":"Chaining and Specificity"},{"location":"Web/codecademy/CSS/#important","text":"There is one thing that is even more specific than IDs: !important . !important can be applied to specific attributes instead of full rules. It will override any style no matter how specific it is. As a result, it should almost never be used. Once !important is used, it is very hard to override.","title":"Important"},{"location":"Web/codecademy/CSS/#multiple-selectors","text":"In order to make CSS more concise, it\u2019s possible to add CSS styles to multiple CSS selectors all at once. This prevents writing repetitive code. h1, .menu { font-family: Georgia; }","title":"Multiple Selectors"},{"location":"Web/codecademy/CSS/#review-css-selectors","text":"Throughout this lesson, you learned how to select HTML elements with CSS and apply styles to them. Let\u2019s review what you learned: CSS can change the look of HTML elements. In order to do this, CSS must select HTML elements, then apply styles to them. CSS ca\u3112n select HTML elements by tag, class, or ID. Multiple CSS classes can be applied to one HTML element. Classes can be reusable, while IDs can only be used once. IDs are more specific than classes, and classes are more specific than tags. That means IDs will override any styles from a class, and classes will override any styles from a tag selector. Multiple selectors can be chained together to select an element. This raises the specificity, but can be necessary. Nested elements can be selected by separating selectors with a space. The !important flag will override any style, however it should almost never be used, as it is extremely difficult to override. Multiple unrelated selectors can receive the same styles by separating the selector names with commas.","title":"Review CSS Selectors"},{"location":"Web/codecademy/HTML/","text":"Introduction to HTML What is HTML? HTML stands for HyperText Markup Language: A markup language is a computer language that defines the structure and presentation of raw text. In HTML, the computer can interpret raw text that is wrapped in HTML elements. HyperText is text displayed on a computer or device that provides access to other text through links, also known as hyperlinks . You probably clicked on a couple of hyperlinks on your way to this Codecademy course. HTML Anatomy HTML is composed of elements . These elements structure the webpage and define its content. Let\u2019s take a look at how they\u2019re written. <p>Hello Wrold</p> HTML element (or simply, element) \u2014 a unit of content in an HTML document formed by HTML tags and the text or media it contains. HTML Tag \u2014 the element name, surrounded by an opening (<) and closing (>) angle bracket. Opening Tag \u2014 the first HTML tag used to start an HTML element. The tag type is surrounded by opening and closing angle brackets. Content \u2014 The information (text or other elements) contained between the opening and closing tags of an HTML element. Closing tag \u2014 the second HTML tag used to end an HTML element. Closing tags have a forward slash (/) inside of them, directly after the left angle bracket. The Body One of the key HTML elements we use to build a webpage is the body element. Only content inside the opening and closing body tags can be displayed to the screen. <body> <p>What's up, doc?</p> </body> HTML Structure HTML is organized as a collection of family tree relationships. When an element is contained inside another element, it is considered the child of that element. The child element is said to be nested inside of the parent element. <body> <p>This paragraph is a child of the body</p> </body> Since there can be multiple levels of nesting, this analogy can be extended to grandchildren, great-grandchildren, and beyond. The relationship between elements and their ancestor and descendent elements is known as hierarchy . <body> <div> <h1>Sibling to p, but also grandchild of body</h1> <p>Sibling to h1, but also grandchild of body</p> </div> </body> The <html> tag is the root element of every page and it should always have <head> and <body> child elements. The <head> and <body> elements are siblings to each other and children to the <html> parent. Understanding HTML hierarchy is important because child elements can inherit behavior and styling from their parent element. You\u2019ll learn more about webpage hierarchy when you start digging into CSS. Headings In HTML, there are six different headings , or heading elements . Headings can be used for a variety of purposes, like titling sections, articles, or other forms of content. The following is the list of heading elements available in HTML. They are ordered from largest to smallest in size. <h1> \u2014 used for main headings. All other smaller headings are used for subheadings. <h2> <h3> <h4> <h5> <h6> Divs <div> is short for \u201cdivision\u201d or a container that divides the page into sections. These sections are very useful for grouping elements in your HTML together. Attributes If we want to expand an element\u2019s tag, we can do so using an attribute . Attributes are content added to the opening tag of an element and can be used in several different ways, from providing information to changing styling. Attributes are made up of the following two parts: The name of the attribute The value of the attribute <div id=\"intro\"> <h1>Introduction</h1> </div> Attribute List Global Attributes Displaying Text If you want to display text in HTML, you can use a paragraph or span : Paragraphs ( <p> ) contain a block of plain text. <span> contains short pieces of text or other HTML. They are used to separate small pieces of content that are on the same line as other content. <div> <h1>Technology</h1> </div> <div> <p><span>Self-driving cars</span> are anticipated to replace up to 2 million jobs over the next two decades.</p> </div> It\u2019s best to use a element when you want to target a specific piece of content that is inline , or on the same line as other text. If you want to divide your content into blocks , it\u2019s better to use a . Styling Text You can also style text using HTML tags. The <em> tag emphasizes text, while the <strong> tag highlights important text. The <em> tag will generally render as italic emphasis. The <strong> will generally render as bold emphasis. Browsers have built-in style sheets that will generally style these tags. <p><strong>The Nile River</strong> is the <em>longest</em> river in the world, measuring over 6,850 kilometers long (approximately 4,260 miles).</p> What is a style sheet? Within the context of web development, a style sheet is a CSS document which specifies the presentation of the content described by associated HTML. In other words, style sheets style our web pages! Line Breaks The spacing between code in an HTML file doesn\u2019t affect the positioning of elements in the browser. If you are interested in modifying the spacing in the browser, you can use HTML\u2019s line break element: <br> . The line break element is unique because it is only composed of a starting tag. You can use it anywhere within your HTML code and a line break will be shown in the browser. Both <br> and <br/> are valid syntaxes, choose what you want. Unordered Lists In HTML, you can use an unordered list tag ( <ul> ) to create a list of items in no particular order. An unordered list outlines individual list items with a bullet point. The <ul> element should not hold raw text and won\u2019t automatically format raw text into an unordered list of items. Individual list items must be added to the unordered list using the <li> tag. The <li> or list item tag is used to describe an item in a list. <ul> <li>Limes</li> <li>Tortillas</li> <li>Chicken</li> </ul> The <li> element can be a direct child of either the <ul> or the <ol> elements but it should never exist outside of either of these parent elements. Ordered Lists Ordered lists ( <ol> ) are like unordered lists, except that each list item is numbered. They are useful when you need to list different steps in a process or rank items for first to last. The <li> element can contain any element which is valid within the <body> tag. Images The <img> tag allows you to add an image to a web page. Most elements require both opening and closing tags, but the <img> tag is a self-closing tag. Note that the end of the <img> tag has a forward slash /. Self-closing tags may include or omit the final slash \u2014 both will render properly. The important distinction between self-closing tags and all other tags is that self-closing tags represent void elements. Void elements like img and br cannot contain any content. All other tags may (but are not required to) contain content. <img src=\"image-location.jpg\" /> The <img> tag has a required attribute called src . The src attribute must be set to the image\u2019s source , or the location of the image. In this case, the value of src must be the uniform resource locator (URL) of the image. A URL is the web address or local address where a file is stored. Image Alts The alt attribute, which means alternative text, brings meaning to the images on our sites. The alt attribute can be added to the image tag just like the src attribute. The value of alt should be a description of the image. <img src=\"#\" alt=\"A field of yellow sunflowers\" /> The alt attribute also serves the following purposes: If an image fails to load on a web page, a user can mouse over the area originally intended for the image and read a brief description of the image. This is made possible by the description you provide in the alt attribute. Visually impaired users often browse the web with the aid of screen reading software. When you include the alt attribute, the screen reading software can read the image\u2019s description out loud to the visually impaired user. The alt attribute also plays a role in Search Engine Optimization (SEO), because search engines cannot \u201csee\u201d the images on websites as they crawl the internet. Having descriptive alt attributes can improve the ranking of your site. Videos In addition to images, HTML also supports displaying videos. Like the <img> tag, the <video> tag requires a src attribute with a link to the video source. Unlike the <img> tag however, the <video> element requires an opening and a closing tag. <video src=\"myVideo.mp4\" width=\"320\" height=\"240\" controls> Video not supported </video> In this example, the video source ( src ) is myVideo.mp4 The source can be a video file that is hosted alongside your webpage, or a URL that points to a video file hosted on another webpage. After the src attribute, the width and height attributes are used to set the size of the video displayed in the browser. The controls attribute instructs the browser to include basic video controls: pause, play and skip. The text, \u201cVideo not supported\u201d, between the opening and closing video tags will only be displayed if the browser is unable to load the video. The controls attribute is an example of a \u201cBoolean attribute\u201d. Boolean attributes have true/false conditions. Including a boolean attribute within an element signifies the condition is true (or on) while omitting it signifies the condition is false (or off). Review Congratulations on completing the first lesson of HTML! You are well on your way to becoming a skilled web developer. Let\u2019s review what you\u2019ve learned so far: HTML stands for H yper T ext M arkup L anguage and is used to create the structure and content of a webpage. Most HTML elements contain opening and closing tags with raw text or other HTML tags between them. HTML elements can be nested inside other elements. The enclosed element is the child of the enclosing parent element. Any visible content should be placed within the opening and closing <body> tags . Headings and sub-headings, <h1> to <h6> tags, are used to enlarge text. <p> , <span> and <div> tags specify text or blocks. The <em> and <strong> tags are used to emphasize text. Line breaks are created with the <br> tag. Ordered lists ( <ol> ) are numbered and unordered lists ( <ul> ) are bulleted. Images ( <img> ) and videos ( <video> ) can be added by linking to an existing source. HTML Document Standards","title":"Introduction to HTML"},{"location":"Web/codecademy/HTML/#introduction-to-html","text":"","title":"Introduction to HTML"},{"location":"Web/codecademy/HTML/#what-is-html","text":"HTML stands for HyperText Markup Language: A markup language is a computer language that defines the structure and presentation of raw text. In HTML, the computer can interpret raw text that is wrapped in HTML elements. HyperText is text displayed on a computer or device that provides access to other text through links, also known as hyperlinks . You probably clicked on a couple of hyperlinks on your way to this Codecademy course.","title":"What is HTML?"},{"location":"Web/codecademy/HTML/#html-anatomy","text":"HTML is composed of elements . These elements structure the webpage and define its content. Let\u2019s take a look at how they\u2019re written. <p>Hello Wrold</p> HTML element (or simply, element) \u2014 a unit of content in an HTML document formed by HTML tags and the text or media it contains. HTML Tag \u2014 the element name, surrounded by an opening (<) and closing (>) angle bracket. Opening Tag \u2014 the first HTML tag used to start an HTML element. The tag type is surrounded by opening and closing angle brackets. Content \u2014 The information (text or other elements) contained between the opening and closing tags of an HTML element. Closing tag \u2014 the second HTML tag used to end an HTML element. Closing tags have a forward slash (/) inside of them, directly after the left angle bracket.","title":"HTML Anatomy"},{"location":"Web/codecademy/HTML/#the-body","text":"One of the key HTML elements we use to build a webpage is the body element. Only content inside the opening and closing body tags can be displayed to the screen. <body> <p>What's up, doc?</p> </body>","title":"The Body"},{"location":"Web/codecademy/HTML/#html-structure","text":"HTML is organized as a collection of family tree relationships. When an element is contained inside another element, it is considered the child of that element. The child element is said to be nested inside of the parent element. <body> <p>This paragraph is a child of the body</p> </body> Since there can be multiple levels of nesting, this analogy can be extended to grandchildren, great-grandchildren, and beyond. The relationship between elements and their ancestor and descendent elements is known as hierarchy . <body> <div> <h1>Sibling to p, but also grandchild of body</h1> <p>Sibling to h1, but also grandchild of body</p> </div> </body> The <html> tag is the root element of every page and it should always have <head> and <body> child elements. The <head> and <body> elements are siblings to each other and children to the <html> parent. Understanding HTML hierarchy is important because child elements can inherit behavior and styling from their parent element. You\u2019ll learn more about webpage hierarchy when you start digging into CSS.","title":"HTML Structure"},{"location":"Web/codecademy/HTML/#headings","text":"In HTML, there are six different headings , or heading elements . Headings can be used for a variety of purposes, like titling sections, articles, or other forms of content. The following is the list of heading elements available in HTML. They are ordered from largest to smallest in size. <h1> \u2014 used for main headings. All other smaller headings are used for subheadings. <h2> <h3> <h4> <h5> <h6>","title":"Headings"},{"location":"Web/codecademy/HTML/#divs","text":"<div> is short for \u201cdivision\u201d or a container that divides the page into sections. These sections are very useful for grouping elements in your HTML together.","title":"Divs"},{"location":"Web/codecademy/HTML/#attributes","text":"If we want to expand an element\u2019s tag, we can do so using an attribute . Attributes are content added to the opening tag of an element and can be used in several different ways, from providing information to changing styling. Attributes are made up of the following two parts: The name of the attribute The value of the attribute <div id=\"intro\"> <h1>Introduction</h1> </div> Attribute List Global Attributes","title":"Attributes"},{"location":"Web/codecademy/HTML/#displaying-text","text":"If you want to display text in HTML, you can use a paragraph or span : Paragraphs ( <p> ) contain a block of plain text. <span> contains short pieces of text or other HTML. They are used to separate small pieces of content that are on the same line as other content. <div> <h1>Technology</h1> </div> <div> <p><span>Self-driving cars</span> are anticipated to replace up to 2 million jobs over the next two decades.</p> </div> It\u2019s best to use a element when you want to target a specific piece of content that is inline , or on the same line as other text. If you want to divide your content into blocks , it\u2019s better to use a .","title":"Displaying Text"},{"location":"Web/codecademy/HTML/#styling-text","text":"You can also style text using HTML tags. The <em> tag emphasizes text, while the <strong> tag highlights important text. The <em> tag will generally render as italic emphasis. The <strong> will generally render as bold emphasis. Browsers have built-in style sheets that will generally style these tags. <p><strong>The Nile River</strong> is the <em>longest</em> river in the world, measuring over 6,850 kilometers long (approximately 4,260 miles).</p> What is a style sheet? Within the context of web development, a style sheet is a CSS document which specifies the presentation of the content described by associated HTML. In other words, style sheets style our web pages!","title":"Styling Text"},{"location":"Web/codecademy/HTML/#line-breaks","text":"The spacing between code in an HTML file doesn\u2019t affect the positioning of elements in the browser. If you are interested in modifying the spacing in the browser, you can use HTML\u2019s line break element: <br> . The line break element is unique because it is only composed of a starting tag. You can use it anywhere within your HTML code and a line break will be shown in the browser. Both <br> and <br/> are valid syntaxes, choose what you want.","title":"Line Breaks"},{"location":"Web/codecademy/HTML/#unordered-lists","text":"In HTML, you can use an unordered list tag ( <ul> ) to create a list of items in no particular order. An unordered list outlines individual list items with a bullet point. The <ul> element should not hold raw text and won\u2019t automatically format raw text into an unordered list of items. Individual list items must be added to the unordered list using the <li> tag. The <li> or list item tag is used to describe an item in a list. <ul> <li>Limes</li> <li>Tortillas</li> <li>Chicken</li> </ul> The <li> element can be a direct child of either the <ul> or the <ol> elements but it should never exist outside of either of these parent elements.","title":"Unordered Lists"},{"location":"Web/codecademy/HTML/#ordered-lists","text":"Ordered lists ( <ol> ) are like unordered lists, except that each list item is numbered. They are useful when you need to list different steps in a process or rank items for first to last. The <li> element can contain any element which is valid within the <body> tag.","title":"Ordered Lists"},{"location":"Web/codecademy/HTML/#images","text":"The <img> tag allows you to add an image to a web page. Most elements require both opening and closing tags, but the <img> tag is a self-closing tag. Note that the end of the <img> tag has a forward slash /. Self-closing tags may include or omit the final slash \u2014 both will render properly. The important distinction between self-closing tags and all other tags is that self-closing tags represent void elements. Void elements like img and br cannot contain any content. All other tags may (but are not required to) contain content. <img src=\"image-location.jpg\" /> The <img> tag has a required attribute called src . The src attribute must be set to the image\u2019s source , or the location of the image. In this case, the value of src must be the uniform resource locator (URL) of the image. A URL is the web address or local address where a file is stored.","title":"Images"},{"location":"Web/codecademy/HTML/#image-alts","text":"The alt attribute, which means alternative text, brings meaning to the images on our sites. The alt attribute can be added to the image tag just like the src attribute. The value of alt should be a description of the image. <img src=\"#\" alt=\"A field of yellow sunflowers\" /> The alt attribute also serves the following purposes: If an image fails to load on a web page, a user can mouse over the area originally intended for the image and read a brief description of the image. This is made possible by the description you provide in the alt attribute. Visually impaired users often browse the web with the aid of screen reading software. When you include the alt attribute, the screen reading software can read the image\u2019s description out loud to the visually impaired user. The alt attribute also plays a role in Search Engine Optimization (SEO), because search engines cannot \u201csee\u201d the images on websites as they crawl the internet. Having descriptive alt attributes can improve the ranking of your site.","title":"Image Alts"},{"location":"Web/codecademy/HTML/#videos","text":"In addition to images, HTML also supports displaying videos. Like the <img> tag, the <video> tag requires a src attribute with a link to the video source. Unlike the <img> tag however, the <video> element requires an opening and a closing tag. <video src=\"myVideo.mp4\" width=\"320\" height=\"240\" controls> Video not supported </video> In this example, the video source ( src ) is myVideo.mp4 The source can be a video file that is hosted alongside your webpage, or a URL that points to a video file hosted on another webpage. After the src attribute, the width and height attributes are used to set the size of the video displayed in the browser. The controls attribute instructs the browser to include basic video controls: pause, play and skip. The text, \u201cVideo not supported\u201d, between the opening and closing video tags will only be displayed if the browser is unable to load the video. The controls attribute is an example of a \u201cBoolean attribute\u201d. Boolean attributes have true/false conditions. Including a boolean attribute within an element signifies the condition is true (or on) while omitting it signifies the condition is false (or off).","title":"Videos"},{"location":"Web/codecademy/HTML/#review","text":"Congratulations on completing the first lesson of HTML! You are well on your way to becoming a skilled web developer. Let\u2019s review what you\u2019ve learned so far: HTML stands for H yper T ext M arkup L anguage and is used to create the structure and content of a webpage. Most HTML elements contain opening and closing tags with raw text or other HTML tags between them. HTML elements can be nested inside other elements. The enclosed element is the child of the enclosing parent element. Any visible content should be placed within the opening and closing <body> tags . Headings and sub-headings, <h1> to <h6> tags, are used to enlarge text. <p> , <span> and <div> tags specify text or blocks. The <em> and <strong> tags are used to emphasize text. Line breaks are created with the <br> tag. Ordered lists ( <ol> ) are numbered and unordered lists ( <ul> ) are bulleted. Images ( <img> ) and videos ( <video> ) can be added by linking to an existing source.","title":"Review"},{"location":"Web/codecademy/HTML/#html-document-standards","text":"","title":"HTML Document Standards"},{"location":"Web/react/Modern%20React%20with%20Redux/","text":"Modern React with Redux JSX vs HTML Adding custom styling to an element uses different syntax. Use className instead of class due to class is JS keyword JSX can reference JS variables( you can't show JS object as text ) html <div class=\"div\" style=\"background-color:red;\"></div> JSX <div className=\"div\" style={{ backgroundColor:'red' }}></div> Rules of State Only usable with class components(technically can be used with functional components using the 'hook' system) You will confuse props with state :( 'State' is a JS object that contains data relevant to a component Updating 'state' on a component causes the component to (almost) instantly rerender State must be initialized when a component is created State can only be updated using the function 'setState' Component Lifecycle constructor render Content visible on screen componentDidMount Sit and wait for updates... componentDidUpdate Sit and wait until this component is not longer shown componentWillUnmount componentDidUpdate invoked right after render do data loading at componentDidMount stage although you can 100% do this in constructor stage other lifecycle methods(rarely used) shouldComponentUpdate getDerivedStateFromProps getSnapshotBeforeUpdate Alternate State Initialization class App extends React.Component { constructor(prop) { super(props); this.state = { value: null, }; } } class App extends React.Component { state = { value: null, }; } Adding Some Styling you could create specific CSS file for a react component and import it, the webpack will do the rest of things. keep component name, css file name and css class name the same is a good convention. ex: SeasonDisplay.js, SeasonDisplay.css, season-display(classname) Specifying Default Props XXX.defaultProps = { a: 'xxx' }; Avoiding Conditionals in Render Use helper render function to keep DRY renderContent() { // retrun some JSX } render() { return { <div> {renderContent()} </div> } } Solving Context('this') Issues function bind in constructor inline arrow function outline arrow function Keys in Lists list is just a concept not really have to be <li> only have to assign the key to the root element Grid CSS when you apply some styling based upon the content of each component, like makeing a grid styling with different grid-span for images, you usually have to wirte some JS to do this. Accessing the DOM with Refs Gives access to a single DOM element We create refs in the constructor, assign them to instance variables, then pass a particular JSX element as props class ImageCard extends React.Component { constructor(props) { super(props) this.imageRef = React.createRef(); } componentDidMount() { // do something on this.imageRef.current } return ( <div> <img ref={this.imageRef}> </div> ) } Let's Test Your React Mastery! Component Design try to separate components and draw the component hierarchy Scaffolding the App import React from 'react'; import ReactDOM from 'react-dom'; import App from './components/App'; ReactDOM.render( <App />, document.querySelector('#root'); ) Reminder on Event Handlers set state at input element's value because we want to store the data inside the component and not inside the DOM Handling Form Submittal prevent default behavior on form element Accessing the Youtube API remember the API key will send to the user because it will be used inside of the browser. So take care of security issues. Styling a List You can switch out the actual element type that we're using and just apply the same class name and it will still do the appropriate styling to it in sematic UI. tips: use the separate css file to custmize styling and keep the root element of component using the same className as the css file name. What is Redux? State management library Resources Diffchecker CODEPEN https://semantic-ui.com/ faker.js - generate massive amounts of realistic fake data in Node.js and the browser unsplash.com AXIOS","title":"Modern React with Redux"},{"location":"Web/react/Modern%20React%20with%20Redux/#modern-react-with-redux","text":"","title":"Modern React with Redux"},{"location":"Web/react/Modern%20React%20with%20Redux/#jsx-vs-html","text":"Adding custom styling to an element uses different syntax. Use className instead of class due to class is JS keyword JSX can reference JS variables( you can't show JS object as text ) html <div class=\"div\" style=\"background-color:red;\"></div> JSX <div className=\"div\" style={{ backgroundColor:'red' }}></div>","title":"JSX vs HTML"},{"location":"Web/react/Modern%20React%20with%20Redux/#rules-of-state","text":"Only usable with class components(technically can be used with functional components using the 'hook' system) You will confuse props with state :( 'State' is a JS object that contains data relevant to a component Updating 'state' on a component causes the component to (almost) instantly rerender State must be initialized when a component is created State can only be updated using the function 'setState'","title":"Rules of State"},{"location":"Web/react/Modern%20React%20with%20Redux/#component-lifecycle","text":"constructor render Content visible on screen componentDidMount Sit and wait for updates... componentDidUpdate Sit and wait until this component is not longer shown componentWillUnmount componentDidUpdate invoked right after render do data loading at componentDidMount stage although you can 100% do this in constructor stage other lifecycle methods(rarely used) shouldComponentUpdate getDerivedStateFromProps getSnapshotBeforeUpdate","title":"Component Lifecycle"},{"location":"Web/react/Modern%20React%20with%20Redux/#alternate-state-initialization","text":"class App extends React.Component { constructor(prop) { super(props); this.state = { value: null, }; } } class App extends React.Component { state = { value: null, }; }","title":"Alternate State Initialization"},{"location":"Web/react/Modern%20React%20with%20Redux/#adding-some-styling","text":"you could create specific CSS file for a react component and import it, the webpack will do the rest of things. keep component name, css file name and css class name the same is a good convention. ex: SeasonDisplay.js, SeasonDisplay.css, season-display(classname)","title":"Adding Some Styling"},{"location":"Web/react/Modern%20React%20with%20Redux/#specifying-default-props","text":"XXX.defaultProps = { a: 'xxx' };","title":"Specifying Default Props"},{"location":"Web/react/Modern%20React%20with%20Redux/#avoiding-conditionals-in-render","text":"Use helper render function to keep DRY renderContent() { // retrun some JSX } render() { return { <div> {renderContent()} </div> } }","title":"Avoiding Conditionals in Render"},{"location":"Web/react/Modern%20React%20with%20Redux/#solving-contextthis-issues","text":"function bind in constructor inline arrow function outline arrow function","title":"Solving Context('this') Issues"},{"location":"Web/react/Modern%20React%20with%20Redux/#keys-in-lists","text":"list is just a concept not really have to be <li> only have to assign the key to the root element","title":"Keys in Lists"},{"location":"Web/react/Modern%20React%20with%20Redux/#grid-css","text":"when you apply some styling based upon the content of each component, like makeing a grid styling with different grid-span for images, you usually have to wirte some JS to do this.","title":"Grid CSS"},{"location":"Web/react/Modern%20React%20with%20Redux/#accessing-the-dom-with-refs","text":"Gives access to a single DOM element We create refs in the constructor, assign them to instance variables, then pass a particular JSX element as props class ImageCard extends React.Component { constructor(props) { super(props) this.imageRef = React.createRef(); } componentDidMount() { // do something on this.imageRef.current } return ( <div> <img ref={this.imageRef}> </div> ) }","title":"Accessing the DOM with Refs"},{"location":"Web/react/Modern%20React%20with%20Redux/#lets-test-your-react-mastery","text":"","title":"Let's Test Your React Mastery!"},{"location":"Web/react/Modern%20React%20with%20Redux/#component-design","text":"try to separate components and draw the component hierarchy","title":"Component Design"},{"location":"Web/react/Modern%20React%20with%20Redux/#scaffolding-the-app","text":"import React from 'react'; import ReactDOM from 'react-dom'; import App from './components/App'; ReactDOM.render( <App />, document.querySelector('#root'); )","title":"Scaffolding the App"},{"location":"Web/react/Modern%20React%20with%20Redux/#reminder-on-event-handlers","text":"set state at input element's value because we want to store the data inside the component and not inside the DOM","title":"Reminder on Event Handlers"},{"location":"Web/react/Modern%20React%20with%20Redux/#handling-form-submittal","text":"prevent default behavior on form element","title":"Handling Form Submittal"},{"location":"Web/react/Modern%20React%20with%20Redux/#accessing-the-youtube-api","text":"remember the API key will send to the user because it will be used inside of the browser. So take care of security issues.","title":"Accessing the Youtube API"},{"location":"Web/react/Modern%20React%20with%20Redux/#styling-a-list","text":"You can switch out the actual element type that we're using and just apply the same class name and it will still do the appropriate styling to it in sematic UI. tips: use the separate css file to custmize styling and keep the root element of component using the same className as the css file name.","title":"Styling a List"},{"location":"Web/react/Modern%20React%20with%20Redux/#what-is-redux","text":"State management library","title":"What is Redux?"},{"location":"Web/react/Modern%20React%20with%20Redux/#resources","text":"Diffchecker CODEPEN https://semantic-ui.com/ faker.js - generate massive amounts of realistic fake data in Node.js and the browser unsplash.com AXIOS","title":"Resources"},{"location":"Web/topics/Ajax/","text":"Ajax Ajax \u975e\u540c\u6b65 JavaScript \u53ca XML\uff08Asynchronous JavaScript and XML\uff0cAJAX\uff09 \u4e26\u4e0d\u80fd\u7a31\u505a\u662f\u7a2e\u300c\u6280\u8853\u300d\uff0c\u800c\u662f 2005 \u5e74\u6642\u7531 Jesse James Garrett \u6240\u767c\u660e\u7684\u8853\u8a9e\uff0c\u63cf\u8ff0\u4e00\u7a2e\u4f7f\u7528\u6578\u500b\u65e2\u6709\u6280\u8853\u7684\u300c\u65b0\u300d\u65b9\u6cd5\u3002\u9019\u4e9b\u6280\u8853\u5305\u62ec HTML \u6216 XHTML\u3001\u5c64\u758a\u6a23\u5f0f\u8868\u3001JavaScript\u3001\u6587\u4ef6\u7269\u4ef6\u6a21\u578b\u3001XML\u3001XSLT \u4ee5\u53ca\u6700\u91cd\u8981\u7684 XMLHttpRequest \u7269\u4ef6\u3002 \u7576\u9019\u4e9b\u6280\u8853\u88ab\u7d50\u5408\u5728 Ajax \u6a21\u578b\u4e2d\uff0cWeb \u61c9\u7528\u7a0b\u5f0f\u4fbf\u80fd\u5feb\u901f\u3001\u5373\u6642\u66f4\u52d5\u4ecb\u9762\u53ca\u5167\u5bb9\uff0c\u4e0d\u9700\u8981\u91cd\u65b0\u8b80\u53d6\u6574\u500b\u7db2\u9801\uff0c\u8b93\u7a0b\u5f0f\u66f4\u5feb\u56de\u61c9\u4f7f\u7528\u8005\u7684\u64cd\u4f5c\u3002 \u96d6\u7136 X \u5728 Ajax \u4e2d\u4ee3\u8868 XML\uff0c\u4f46\u7531\u65bc JSON \u7684\u8a31\u591a\u512a\u9ede\uff0c\u5982\u8f15\u91cf\u4ee5\u53ca\u5176\u672c\u8eab\u5c31\u662f JavaScript \u7684\u4e00\u90e8\u5206\u7b49\uff0c\u8b93\u73fe\u4eca JSON \u6bd4\u8d77 XML \u88ab\u66f4\u5ee3\u6cdb\u7684\u4f7f\u7528\u3002JSON \u8207 XML \u5169\u8005\u90fd\u88ab\u7528\u4f86\u5728 Ajax \u6a21\u578b\u4e2d\u5305\u88dd\u8cc7\u8a0a\u3002 \u9019\u4e9b\u6280\u8853\u5305\u542b XMLHttpRequest API Fetch API Server-sent events XML JXON XPath \u7b49\u7b49","title":"Ajax"},{"location":"Web/topics/Ajax/#ajax","text":"Ajax \u975e\u540c\u6b65 JavaScript \u53ca XML\uff08Asynchronous JavaScript and XML\uff0cAJAX\uff09 \u4e26\u4e0d\u80fd\u7a31\u505a\u662f\u7a2e\u300c\u6280\u8853\u300d\uff0c\u800c\u662f 2005 \u5e74\u6642\u7531 Jesse James Garrett \u6240\u767c\u660e\u7684\u8853\u8a9e\uff0c\u63cf\u8ff0\u4e00\u7a2e\u4f7f\u7528\u6578\u500b\u65e2\u6709\u6280\u8853\u7684\u300c\u65b0\u300d\u65b9\u6cd5\u3002\u9019\u4e9b\u6280\u8853\u5305\u62ec HTML \u6216 XHTML\u3001\u5c64\u758a\u6a23\u5f0f\u8868\u3001JavaScript\u3001\u6587\u4ef6\u7269\u4ef6\u6a21\u578b\u3001XML\u3001XSLT \u4ee5\u53ca\u6700\u91cd\u8981\u7684 XMLHttpRequest \u7269\u4ef6\u3002 \u7576\u9019\u4e9b\u6280\u8853\u88ab\u7d50\u5408\u5728 Ajax \u6a21\u578b\u4e2d\uff0cWeb \u61c9\u7528\u7a0b\u5f0f\u4fbf\u80fd\u5feb\u901f\u3001\u5373\u6642\u66f4\u52d5\u4ecb\u9762\u53ca\u5167\u5bb9\uff0c\u4e0d\u9700\u8981\u91cd\u65b0\u8b80\u53d6\u6574\u500b\u7db2\u9801\uff0c\u8b93\u7a0b\u5f0f\u66f4\u5feb\u56de\u61c9\u4f7f\u7528\u8005\u7684\u64cd\u4f5c\u3002 \u96d6\u7136 X \u5728 Ajax \u4e2d\u4ee3\u8868 XML\uff0c\u4f46\u7531\u65bc JSON \u7684\u8a31\u591a\u512a\u9ede\uff0c\u5982\u8f15\u91cf\u4ee5\u53ca\u5176\u672c\u8eab\u5c31\u662f JavaScript \u7684\u4e00\u90e8\u5206\u7b49\uff0c\u8b93\u73fe\u4eca JSON \u6bd4\u8d77 XML \u88ab\u66f4\u5ee3\u6cdb\u7684\u4f7f\u7528\u3002JSON \u8207 XML \u5169\u8005\u90fd\u88ab\u7528\u4f86\u5728 Ajax \u6a21\u578b\u4e2d\u5305\u88dd\u8cc7\u8a0a\u3002 \u9019\u4e9b\u6280\u8853\u5305\u542b XMLHttpRequest API Fetch API Server-sent events XML JXON XPath \u7b49\u7b49","title":"Ajax"},{"location":"Web/topics/CORS/","text":"Cross-Origin Resource Sharing (CORS) Cross-Origin Read Blocking for Web Developers Cross-Origin Resource Sharing (CORS) Cross-Origin Resource Sharing (CORS) is a mechanism that uses additional HTTP headers to tell browsers to give a web application running at one origin, access to selected resources from a different origin. A web application executes a cross-origin HTTP request when it requests a resource that has a different origin (domain, protocol, or port) from its own. Same Origin Policy Same-origin policy Definition of an origin Two URLs have the same origin if the protocol , port (if specified), and host are the same for both. ex: https://store.company.com/page.html and http://store.company.com:81/dir/page.html is not same origin Scripts executed from pages with an about:blank or javascript: URL inherit the origin of the document containing that URL, since these types of URLs do not contain information about an origin server. Functional overview Simple requests which don\u2019t trigger a CORS preflight. Preflighted requests Requests with credentials(\u6c92\u7814\u7a76) Headers Response from server Access-Control-Allow-Origin Access-Control-Expose-Headers Access-Control-Max-Age Access-Control-Allow-Credentials Access-Control-Allow-Methods Access-Control-Allow-Headers Request from client Origin Access-Control-Request-Method Access-Control-Request-Headers Related APIs Location Location.origin window.location window.frameElement window.frames When frameElement null Window.frameElement Returns the element (such as <iframe> or <object> ) in which the window is embedded, or null if the element is either top-level or is embedded into a document with a different script origin ; that is, in cross-origin situations. file:// in CORS If you're trying to do a cross-domain XMLHttpRequest via CORS... Make sure you're testing via http:// . Scripts running via file:// have limited support for CORS. Make sure the browser actually supports CORS. (Opera and Internet Explorer are late to the party)","title":"Cross-Origin Resource Sharing (CORS)"},{"location":"Web/topics/CORS/#cross-origin-resource-sharing-cors","text":"Cross-Origin Read Blocking for Web Developers Cross-Origin Resource Sharing (CORS) Cross-Origin Resource Sharing (CORS) is a mechanism that uses additional HTTP headers to tell browsers to give a web application running at one origin, access to selected resources from a different origin. A web application executes a cross-origin HTTP request when it requests a resource that has a different origin (domain, protocol, or port) from its own.","title":"Cross-Origin Resource Sharing (CORS)"},{"location":"Web/topics/CORS/#same-origin-policy","text":"Same-origin policy","title":"Same Origin Policy"},{"location":"Web/topics/CORS/#definition-of-an-origin","text":"Two URLs have the same origin if the protocol , port (if specified), and host are the same for both. ex: https://store.company.com/page.html and http://store.company.com:81/dir/page.html is not same origin Scripts executed from pages with an about:blank or javascript: URL inherit the origin of the document containing that URL, since these types of URLs do not contain information about an origin server.","title":"Definition of an origin"},{"location":"Web/topics/CORS/#functional-overview","text":"Simple requests which don\u2019t trigger a CORS preflight. Preflighted requests Requests with credentials(\u6c92\u7814\u7a76)","title":"Functional overview"},{"location":"Web/topics/CORS/#headers","text":"Response from server Access-Control-Allow-Origin Access-Control-Expose-Headers Access-Control-Max-Age Access-Control-Allow-Credentials Access-Control-Allow-Methods Access-Control-Allow-Headers Request from client Origin Access-Control-Request-Method Access-Control-Request-Headers","title":"Headers"},{"location":"Web/topics/CORS/#related-apis","text":"Location Location.origin window.location window.frameElement window.frames","title":"Related APIs"},{"location":"Web/topics/CORS/#when-frameelement-null","text":"Window.frameElement Returns the element (such as <iframe> or <object> ) in which the window is embedded, or null if the element is either top-level or is embedded into a document with a different script origin ; that is, in cross-origin situations.","title":"When frameElement null"},{"location":"Web/topics/CORS/#file-in-cors","text":"If you're trying to do a cross-domain XMLHttpRequest via CORS... Make sure you're testing via http:// . Scripts running via file:// have limited support for CORS. Make sure the browser actually supports CORS. (Opera and Internet Explorer are late to the party)","title":"file:// in CORS"},{"location":"Web/topics/Chrome%20Extension/","text":"Chrome Extension Manifest \u63d2\u4ef6\u7684\u8a2d\u5b9a\uff0c\u53ea\u8981\u6709\u9019\u500b\u6a94\u6848\u5c31\u80fd\u5b89\u88dd permissions\u7ba1\u7406\u53ef\u5b58\u53d6\u7684\u8cc7\u6e90\u6b0a\u9650\uff0cex: storage, activeTab background scripts, page_action(popup), icon, option_page\u90fd\u662f\u8ddf\u4ed6\u8a3b\u518a Background Script \u4f7f\u7528\u5728 \u700f\u89bd\u5668 \u5c64\u7d1a\u7684JS(\u4e0d\u662f\u5728\u9801\u9762\u5c64\u7d1a) event based which are browser triggers such as navigating to a new page, removing a bookmark, or closing a tab. The extension is first installed or updated to a new version. The background page was listening for an event, and the event is dispatched. A content script or other extension sends a message. Another view in the extension, such as a popup, calls runtime.getBackgroundPage. \u5728\u64f4\u5145\u529f\u80fd\u9801\u9762\u6309 \u67e5\u770b\u6aa2\u8996\u6a21\u5f0f\u80cc\u666f\u9801\u9762 \u53ef\u4ee5\u6aa2\u67e5log UI element \u64c1\u6709\u5404\u7a2e\u5f62\u5f0f\uff0c\u6700\u5e38\u7528\u7684\u662fpopup \u5176\u4ed6\u5f62\u5f0f\u5982omnibox(search bar), context menu \u53ef\u4ee5\u8a2d\u5b9a\u5168\u7db2\u9801\u555f\u7528\u6216\u7279\u5b9a\u7db2\u9801\u555f\u7528 \u5167\u5d4c\u7684popupjs\u53ef\u76f4\u63a5\u5c0dUI\u53f3\u9375\u6aa2\u67e5\u958b\u555fdevTool popupjs\u53ef\u4f7f\u7528 Inject Scripts \u65b9\u5f0f\u8207content script\u6e9d\u901a Content Script \u771f\u6b63\u8dd1\u5728\u7db2\u9801context\u7684script\uff0c\u53ef\u4ee5\u64cd\u4f5cDOM \u53ef\u50b3\u905e\u8a0a\u606f\u7d66background script Option Page Chrome API declarativeContent\u8ddf\u958b\u555f\u7684\u5206\u9801\u4e92\u52d5 Misc tabs\u4f7f\u7528 id \u4f86\u5b9a\u4f4d\uff0c index \u624d\u662f\u9806\u5e8f \u5404component\u95dc\u4fc2 \u8207 \u5404component\u6e9d\u901a \u96f7 about:blank \u4f7f\u7528activeTab permission\u6703\u5931\u6557(\u9084\u4e0d\u77e5\u9053\u8981\u4f7f\u7528\u751a\u9ebc) catch error in callback by lastError","title":"Chrome Extension"},{"location":"Web/topics/Chrome%20Extension/#chrome-extension","text":"","title":"Chrome Extension"},{"location":"Web/topics/Chrome%20Extension/#manifest","text":"\u63d2\u4ef6\u7684\u8a2d\u5b9a\uff0c\u53ea\u8981\u6709\u9019\u500b\u6a94\u6848\u5c31\u80fd\u5b89\u88dd permissions\u7ba1\u7406\u53ef\u5b58\u53d6\u7684\u8cc7\u6e90\u6b0a\u9650\uff0cex: storage, activeTab background scripts, page_action(popup), icon, option_page\u90fd\u662f\u8ddf\u4ed6\u8a3b\u518a","title":"Manifest"},{"location":"Web/topics/Chrome%20Extension/#background-script","text":"\u4f7f\u7528\u5728 \u700f\u89bd\u5668 \u5c64\u7d1a\u7684JS(\u4e0d\u662f\u5728\u9801\u9762\u5c64\u7d1a) event based which are browser triggers such as navigating to a new page, removing a bookmark, or closing a tab. The extension is first installed or updated to a new version. The background page was listening for an event, and the event is dispatched. A content script or other extension sends a message. Another view in the extension, such as a popup, calls runtime.getBackgroundPage. \u5728\u64f4\u5145\u529f\u80fd\u9801\u9762\u6309 \u67e5\u770b\u6aa2\u8996\u6a21\u5f0f\u80cc\u666f\u9801\u9762 \u53ef\u4ee5\u6aa2\u67e5log","title":"Background Script"},{"location":"Web/topics/Chrome%20Extension/#ui-element","text":"\u64c1\u6709\u5404\u7a2e\u5f62\u5f0f\uff0c\u6700\u5e38\u7528\u7684\u662fpopup \u5176\u4ed6\u5f62\u5f0f\u5982omnibox(search bar), context menu \u53ef\u4ee5\u8a2d\u5b9a\u5168\u7db2\u9801\u555f\u7528\u6216\u7279\u5b9a\u7db2\u9801\u555f\u7528 \u5167\u5d4c\u7684popupjs\u53ef\u76f4\u63a5\u5c0dUI\u53f3\u9375\u6aa2\u67e5\u958b\u555fdevTool popupjs\u53ef\u4f7f\u7528 Inject Scripts \u65b9\u5f0f\u8207content script\u6e9d\u901a","title":"UI element"},{"location":"Web/topics/Chrome%20Extension/#content-script","text":"\u771f\u6b63\u8dd1\u5728\u7db2\u9801context\u7684script\uff0c\u53ef\u4ee5\u64cd\u4f5cDOM \u53ef\u50b3\u905e\u8a0a\u606f\u7d66background script","title":"Content Script"},{"location":"Web/topics/Chrome%20Extension/#option-page","text":"","title":"Option Page"},{"location":"Web/topics/Chrome%20Extension/#chrome-api","text":"declarativeContent\u8ddf\u958b\u555f\u7684\u5206\u9801\u4e92\u52d5","title":"Chrome API"},{"location":"Web/topics/Chrome%20Extension/#misc","text":"tabs\u4f7f\u7528 id \u4f86\u5b9a\u4f4d\uff0c index \u624d\u662f\u9806\u5e8f \u5404component\u95dc\u4fc2 \u8207 \u5404component\u6e9d\u901a","title":"Misc"},{"location":"Web/topics/Chrome%20Extension/#_1","text":"about:blank \u4f7f\u7528activeTab permission\u6703\u5931\u6557(\u9084\u4e0d\u77e5\u9053\u8981\u4f7f\u7528\u751a\u9ebc) catch error in callback by lastError","title":"\u96f7"},{"location":"Web/topics/Http%20Cookies/","text":"HTTP cookies HTTP cookies \u4f7f\u7528Nodejs\u8a2d\u5b9acookie Headers Set-Cookie: <cookie-name>=<cookie-value> Expires :\u904e\u671f\u6642\u9593 Max-Age :\u53ef\u7dad\u6301\u6700\u5927\u6642\u9593 Secure :\u53ea\u53ef\u7d93\u7531\u52a0\u5bc6\u8acb\u6c42HTTPS\u50b3\u9001 HttpOnly :\u4e0d\u53ef\u900f\u904eJS\u7684 document.cookie \u53d6\u5f97\uff0c\u907f\u514dXSS\u653b\u64ca SameSite :\u4e0d\u53ef\u4ee5\u8de8\u7ad9\u8acb\u6c42\u65b9\u5f0f\u5bc4\u9001\uff0c\u907f\u514dCSRF\u653b\u64ca \u7b2c\u4e09\u65b9 cookies Cookies \u6703\u5e36\u6709\u4ed6\u5011\u6240\u5c6c\u7684\u7db2\u57df\u540d\u3002\u82e5\u6b64\u7db2\u57df\u548c\u4f60\u6240\u5728\u7684\u9801\u9762\u7db2\u57df\u76f8\u540c\uff0ccookies \u5373\u70ba\u7b2c\u4e00\u65b9\uff08first-party\uff09cookie\uff0c\u4e0d\u540c\u5247\u70ba\u7b2c\u4e09\u65b9\uff08third-party\uff09cookie\u3002\u7b2c\u4e00\u65b9 cookies \u53ea\u88ab\u9001\u5230\u8a2d\u5b9a\u4ed6\u5011\u7684\u4f3a\u670d\u5668\uff0c\u4f46\u4e00\u500b\u7db2\u9801\u53ef\u80fd\u542b\u6709\u5b58\u5728\u5176\u4ed6\u7db2\u57df\u4f3a\u670d\u5668\u7684\u5716\u7247\u6216\u7d44\u4ef6\uff08\u50cf\u6a6b\u5e45\u5ee3\u544a\uff09\u3002\u900f\u904e\u9019\u4e9b\u7b2c\u4e09\u65b9\u7d44\u4ef6\u50b3\u9001\u7684 cookies \u4fbf\u662f\u7b2c\u4e09\u65b9 cookies\uff0c\u7d93\u5e38\u88ab\u7528\u65bc\u5ee3\u544a\u548c\u7db2\u9801\u4e0a\u7684\u8ffd\u8e64\u3002 Site domain does not match cookie domain SameSite=None Reject insecure SameSite=None cookies \u5b89\u5168 Cross-site scripting (XSS) CSRF (Cross-Site Request Forgery) Cross-Origin Resource Sharing (CORS) XSS exploits the trust a user has for a particular site, CSRF exploits the trust that a site has in a user's browser. XSS \u662f\u4ee3\u78bc\u6ce8\u5165\uff0c CSRF \u662f\u62ff\u5230\u6b0a\u9650\u57f7\u884c\u547d\u4ee4","title":"HTTP cookies"},{"location":"Web/topics/Http%20Cookies/#http-cookies","text":"HTTP cookies \u4f7f\u7528Nodejs\u8a2d\u5b9acookie","title":"HTTP cookies"},{"location":"Web/topics/Http%20Cookies/#headers","text":"Set-Cookie: <cookie-name>=<cookie-value> Expires :\u904e\u671f\u6642\u9593 Max-Age :\u53ef\u7dad\u6301\u6700\u5927\u6642\u9593 Secure :\u53ea\u53ef\u7d93\u7531\u52a0\u5bc6\u8acb\u6c42HTTPS\u50b3\u9001 HttpOnly :\u4e0d\u53ef\u900f\u904eJS\u7684 document.cookie \u53d6\u5f97\uff0c\u907f\u514dXSS\u653b\u64ca SameSite :\u4e0d\u53ef\u4ee5\u8de8\u7ad9\u8acb\u6c42\u65b9\u5f0f\u5bc4\u9001\uff0c\u907f\u514dCSRF\u653b\u64ca","title":"Headers"},{"location":"Web/topics/Http%20Cookies/#cookies","text":"Cookies \u6703\u5e36\u6709\u4ed6\u5011\u6240\u5c6c\u7684\u7db2\u57df\u540d\u3002\u82e5\u6b64\u7db2\u57df\u548c\u4f60\u6240\u5728\u7684\u9801\u9762\u7db2\u57df\u76f8\u540c\uff0ccookies \u5373\u70ba\u7b2c\u4e00\u65b9\uff08first-party\uff09cookie\uff0c\u4e0d\u540c\u5247\u70ba\u7b2c\u4e09\u65b9\uff08third-party\uff09cookie\u3002\u7b2c\u4e00\u65b9 cookies \u53ea\u88ab\u9001\u5230\u8a2d\u5b9a\u4ed6\u5011\u7684\u4f3a\u670d\u5668\uff0c\u4f46\u4e00\u500b\u7db2\u9801\u53ef\u80fd\u542b\u6709\u5b58\u5728\u5176\u4ed6\u7db2\u57df\u4f3a\u670d\u5668\u7684\u5716\u7247\u6216\u7d44\u4ef6\uff08\u50cf\u6a6b\u5e45\u5ee3\u544a\uff09\u3002\u900f\u904e\u9019\u4e9b\u7b2c\u4e09\u65b9\u7d44\u4ef6\u50b3\u9001\u7684 cookies \u4fbf\u662f\u7b2c\u4e09\u65b9 cookies\uff0c\u7d93\u5e38\u88ab\u7528\u65bc\u5ee3\u544a\u548c\u7db2\u9801\u4e0a\u7684\u8ffd\u8e64\u3002 Site domain does not match cookie domain","title":"\u7b2c\u4e09\u65b9 cookies"},{"location":"Web/topics/Http%20Cookies/#samesitenone","text":"Reject insecure SameSite=None cookies","title":"SameSite=None"},{"location":"Web/topics/Http%20Cookies/#_1","text":"Cross-site scripting (XSS) CSRF (Cross-Site Request Forgery) Cross-Origin Resource Sharing (CORS) XSS exploits the trust a user has for a particular site, CSRF exploits the trust that a site has in a user's browser. XSS \u662f\u4ee3\u78bc\u6ce8\u5165\uff0c CSRF \u662f\u62ff\u5230\u6b0a\u9650\u57f7\u884c\u547d\u4ee4","title":"\u5b89\u5168"},{"location":"Web/topics/Strict%20mode/","text":"Strict mode Strict mode Strict mode makes several changes to normal JavaScript semantics: Eliminates some JavaScript silent errors by changing them to throw errors. Fixes mistakes that make it difficult for JavaScript engines to perform optimizations: strict mode code can sometimes be made to run faster than identical code that's not strict mode. Prohibits some syntax likely to be defined in future versions of ECMAScript. Invoking strict mode Strict mode for scripts Strict mode for functions Strict mode for modules The entire contents of JavaScript modules are automatically in strict mode, with no statement needed to initiate it. Changes in strict mode Strict mode changes both syntax and runtime behavior. Changes generally fall into these categories: changes converting mistakes into errors (as syntax errors or at runtime) changes simplifying how the particular variable for a given use of a name is computed changes simplifying eval and arguments , changes making it easier to write \"secure\" JavaScript, and changes anticipating future ECMAScript evolution. Converting mistakes into errors prevent create global variables accidentally. illegal assignment. ex: assignment to NaN , non-writable global or property delete undeletable properties duplicate property names requires that function parameter names be unique forbids octal syntax forbids setting properties on primitive values Simplifying variable uses Strict mode simplifies how variable names map to particular variable definitions in the code. Many compiler optimizations rely on the ability to say that variable X is stored in that location: this is critical to fully optimizing JavaScript code. JavaScript sometimes makes this basic mapping of name to variable definition in the code impossible to perform until runtime. Strict mode removes most cases where this happens, so the compiler can better optimize strict mode code. prohibits with eval of strict mode code does not introduce new variables into the surrounding scope forbids deleting plain names Making eval and arguments simpler the names eval and arguments can't be bound or assigned in language syntax arguments objects for strict mode functions store the original arguments when the function was invoked arguments.callee is no longer supported \"Securing\" JavaScript the value passed as this to a function in strict mode is not forced into being an object (a.k.a. \"boxed\"). for a strict mode function, the specified this is not boxed into an object, and if unspecified, this will be undefined when a function fun is in the middle of being called, if fun is in strict mode, both fun.caller and fun.arguments are non-deletable properties which throw when set or retrieved arguments for strict mode functions no longer provide access to the corresponding function call's variables arguments.caller Paving the way for future ECMAScript versions in strict mode a short list of identifiers become reserved keywords. These words are implements , interface , let , package , private , protected , public , static , and yield Two Mozilla-specific caveats if your code is JavaScript 1.7 or greater (for example in chrome code or when using the right <script type=\"\"> ) and is strict mode code, let and yield have the functionality they've had since those keywords were first introduced. But strict mode code on the web, loaded with <script src=\"\"> or <script>...</script> , won't be able to use let/yield as identifiers ES5 unconditionally reserves the words class , enum , export , extends , import , and super , before Firefox 5 Mozilla reserved them only in strict mode strict mode prohibits function statements not at the top level of a script or function","title":"Strict mode"},{"location":"Web/topics/Strict%20mode/#strict-mode","text":"Strict mode Strict mode makes several changes to normal JavaScript semantics: Eliminates some JavaScript silent errors by changing them to throw errors. Fixes mistakes that make it difficult for JavaScript engines to perform optimizations: strict mode code can sometimes be made to run faster than identical code that's not strict mode. Prohibits some syntax likely to be defined in future versions of ECMAScript.","title":"Strict mode"},{"location":"Web/topics/Strict%20mode/#invoking-strict-mode","text":"Strict mode for scripts Strict mode for functions Strict mode for modules The entire contents of JavaScript modules are automatically in strict mode, with no statement needed to initiate it.","title":"Invoking strict mode"},{"location":"Web/topics/Strict%20mode/#changes-in-strict-mode","text":"Strict mode changes both syntax and runtime behavior. Changes generally fall into these categories: changes converting mistakes into errors (as syntax errors or at runtime) changes simplifying how the particular variable for a given use of a name is computed changes simplifying eval and arguments , changes making it easier to write \"secure\" JavaScript, and changes anticipating future ECMAScript evolution.","title":"Changes in strict mode"},{"location":"Web/topics/Strict%20mode/#converting-mistakes-into-errors","text":"prevent create global variables accidentally. illegal assignment. ex: assignment to NaN , non-writable global or property delete undeletable properties duplicate property names requires that function parameter names be unique forbids octal syntax forbids setting properties on primitive values","title":"Converting mistakes into errors"},{"location":"Web/topics/Strict%20mode/#simplifying-variable-uses","text":"Strict mode simplifies how variable names map to particular variable definitions in the code. Many compiler optimizations rely on the ability to say that variable X is stored in that location: this is critical to fully optimizing JavaScript code. JavaScript sometimes makes this basic mapping of name to variable definition in the code impossible to perform until runtime. Strict mode removes most cases where this happens, so the compiler can better optimize strict mode code. prohibits with eval of strict mode code does not introduce new variables into the surrounding scope forbids deleting plain names","title":"Simplifying variable uses"},{"location":"Web/topics/Strict%20mode/#making-eval-and-arguments-simpler","text":"the names eval and arguments can't be bound or assigned in language syntax arguments objects for strict mode functions store the original arguments when the function was invoked arguments.callee is no longer supported","title":"Making eval and arguments simpler"},{"location":"Web/topics/Strict%20mode/#securing-javascript","text":"the value passed as this to a function in strict mode is not forced into being an object (a.k.a. \"boxed\"). for a strict mode function, the specified this is not boxed into an object, and if unspecified, this will be undefined when a function fun is in the middle of being called, if fun is in strict mode, both fun.caller and fun.arguments are non-deletable properties which throw when set or retrieved arguments for strict mode functions no longer provide access to the corresponding function call's variables arguments.caller","title":"\"Securing\" JavaScript"},{"location":"Web/topics/Strict%20mode/#paving-the-way-for-future-ecmascript-versions","text":"in strict mode a short list of identifiers become reserved keywords. These words are implements , interface , let , package , private , protected , public , static , and yield Two Mozilla-specific caveats if your code is JavaScript 1.7 or greater (for example in chrome code or when using the right <script type=\"\"> ) and is strict mode code, let and yield have the functionality they've had since those keywords were first introduced. But strict mode code on the web, loaded with <script src=\"\"> or <script>...</script> , won't be able to use let/yield as identifiers ES5 unconditionally reserves the words class , enum , export , extends , import , and super , before Firefox 5 Mozilla reserved them only in strict mode strict mode prohibits function statements not at the top level of a script or function","title":"Paving the way for future ECMAScript versions"},{"location":"Web/topics/THIS/","text":"THIS this in MDN Global context In the global execution context (outside of any function), this refers to the global object whether in strict mode or not. You can always easily get the global object using the global globalThis property, regardless of the current context in which your code is running. Function context Inside a function, the value of this depends on how the function is called. Simple call not in strict mode: this will default to the global object, which is window in a browser. strict mode: if the value of this is not set when entering an execution context, it remains as undefined . call(), apply() To set the value of this to a particular value when calling a function, use call() , or apply() . Note that in non\u2013strict mode, with call and apply , if the value passed as this is not an object, an attempt will be made to convert it to an object using the internal ToObject operation. So if the value passed is a primitive like 7 or 'foo' , it will be converted to an Object using the related constructor, so the primitive number 7 is converted to an object as if by new Number(7) and the string 'foo' to an object as if by new String('foo') . bind() ECMAScript 5 introduced Function.prototype.bind() . Calling f.bind(someObject) creates a new function with the same body and scope as f , but where this occurs in the original function, in the new function it is permanently bound to the first argument of bind , regardless of how the function is being used. Arrow functions In arrow functions , this retains the value of the enclosing lexical context's this . In global code, it will be set to the global object. No matter what, arrow functions' this is set to what it was when it was created. The same applies to arrow functions created inside other functions: their this remains that of the enclosing lexical context. As an object method When a function is called as a method of an object, its this is set to the object the method is called on. Note that this behavior is not at all affected by how or where the function was defined. The this binding is only affected by the most immediate member reference. this on the object's prototype chain The same notion holds true for methods defined somewhere on the object's prototype chain. If the method is on an object's prototype chain, this refers to the object the method was called on, as if the method were on the object. this with a getter or setter Again, the same notion holds true when a function is invoked from a getter or a setter. A function used as getter or setter has its this bound to the object from which the property is being set or gotten. As a constructor When a function is used as a constructor (with the new keyword), its this is bound to the new object being constructed. While the default for a constructor is to return the object referenced by this , it can instead return some other object (if the return value isn't an object, then the this object is returned). As a DOM event handler When a function is used as an event handler, its this is set to the element the event fired from (some browsers do not follow this convention for listeners added dynamically with methods other than addEventListener() ). In an inline event handler When the code is called from an inline on-event handler , its this is set to the DOM element on which the listener is placed.","title":"THIS"},{"location":"Web/topics/THIS/#this","text":"this in MDN","title":"THIS"},{"location":"Web/topics/THIS/#global-context","text":"In the global execution context (outside of any function), this refers to the global object whether in strict mode or not. You can always easily get the global object using the global globalThis property, regardless of the current context in which your code is running.","title":"Global context"},{"location":"Web/topics/THIS/#function-context","text":"Inside a function, the value of this depends on how the function is called.","title":"Function context"},{"location":"Web/topics/THIS/#simple-call","text":"not in strict mode: this will default to the global object, which is window in a browser. strict mode: if the value of this is not set when entering an execution context, it remains as undefined .","title":"Simple call"},{"location":"Web/topics/THIS/#call-apply","text":"To set the value of this to a particular value when calling a function, use call() , or apply() . Note that in non\u2013strict mode, with call and apply , if the value passed as this is not an object, an attempt will be made to convert it to an object using the internal ToObject operation. So if the value passed is a primitive like 7 or 'foo' , it will be converted to an Object using the related constructor, so the primitive number 7 is converted to an object as if by new Number(7) and the string 'foo' to an object as if by new String('foo') .","title":"call(), apply()"},{"location":"Web/topics/THIS/#bind","text":"ECMAScript 5 introduced Function.prototype.bind() . Calling f.bind(someObject) creates a new function with the same body and scope as f , but where this occurs in the original function, in the new function it is permanently bound to the first argument of bind , regardless of how the function is being used.","title":"bind()"},{"location":"Web/topics/THIS/#arrow-functions","text":"In arrow functions , this retains the value of the enclosing lexical context's this . In global code, it will be set to the global object. No matter what, arrow functions' this is set to what it was when it was created. The same applies to arrow functions created inside other functions: their this remains that of the enclosing lexical context.","title":"Arrow functions"},{"location":"Web/topics/THIS/#as-an-object-method","text":"When a function is called as a method of an object, its this is set to the object the method is called on. Note that this behavior is not at all affected by how or where the function was defined. The this binding is only affected by the most immediate member reference.","title":"As an object method"},{"location":"Web/topics/THIS/#this-on-the-objects-prototype-chain","text":"The same notion holds true for methods defined somewhere on the object's prototype chain. If the method is on an object's prototype chain, this refers to the object the method was called on, as if the method were on the object.","title":"this on the object's prototype chain"},{"location":"Web/topics/THIS/#this-with-a-getter-or-setter","text":"Again, the same notion holds true when a function is invoked from a getter or a setter. A function used as getter or setter has its this bound to the object from which the property is being set or gotten.","title":"this with a getter or setter"},{"location":"Web/topics/THIS/#as-a-constructor","text":"When a function is used as a constructor (with the new keyword), its this is bound to the new object being constructed. While the default for a constructor is to return the object referenced by this , it can instead return some other object (if the return value isn't an object, then the this object is returned).","title":"As a constructor"},{"location":"Web/topics/THIS/#as-a-dom-event-handler","text":"When a function is used as an event handler, its this is set to the element the event fired from (some browsers do not follow this convention for listeners added dynamically with methods other than addEventListener() ).","title":"As a DOM event handler"},{"location":"Web/topics/THIS/#in-an-inline-event-handler","text":"When the code is called from an inline on-event handler , its this is set to the DOM element on which the listener is placed.","title":"In an inline event handler"},{"location":"Web/topics/Testing/","text":"Testing \u6e2c\u8a66JS \u67d0\u4e9b\u529f\u80fd\u9700\u8981\u8d77\u4e00\u500bserver\u624d\u80fd\u6e2c\u8a66\uff0c\u4f8b\u5982Ajax\uff0c\u9019\u6642\u5019\u4f60\u53ef\u4ee5\u63a1\u7528\u4ee5\u4e0b\u505a\u6cd5 \u4f7f\u7528fiddler Fiddler + Preview Fiddler Rule\u8a18\u5f97Enable \u4f7f\u7528Web Server for Chrome Web Server for Chrome \u81ea\u5df1\u8d77Web Server","title":"Testing"},{"location":"Web/topics/Testing/#testing","text":"","title":"Testing"},{"location":"Web/topics/Testing/#js","text":"\u67d0\u4e9b\u529f\u80fd\u9700\u8981\u8d77\u4e00\u500bserver\u624d\u80fd\u6e2c\u8a66\uff0c\u4f8b\u5982Ajax\uff0c\u9019\u6642\u5019\u4f60\u53ef\u4ee5\u63a1\u7528\u4ee5\u4e0b\u505a\u6cd5","title":"\u6e2c\u8a66JS"},{"location":"Web/topics/Testing/#fiddler","text":"Fiddler + Preview Fiddler Rule\u8a18\u5f97Enable","title":"\u4f7f\u7528fiddler"},{"location":"Web/topics/Testing/#web-server-for-chrome","text":"Web Server for Chrome","title":"\u4f7f\u7528Web Server for Chrome"},{"location":"Web/topics/Testing/#web-server","text":"","title":"\u81ea\u5df1\u8d77Web Server"}]}